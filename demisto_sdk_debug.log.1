[2023-10-31T17:14:44] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-10-31T17:14:44] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-10-31T17:14:44] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-10-31T17:14:44] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-10-31T17:14:44] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): pypi.org:443
[2023-10-31T17:14:44] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 41763
[2023-10-31T17:14:44] - [MainThread] - [INFO] - __main__.py:228 - You are using demisto-sdk 1.20.8.
[2023-10-31T17:14:44] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-10-31T17:14:44] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-10-31T17:14:44] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-10-31T17:14:44] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-10-31T17:14:44] - [MainThread] - [DEBUG] - readme.py:904 - server is already up. Not restarting
[2023-10-31T17:14:44] - [MainThread] - [DEBUG] - connectionpool.py:228 - Starting new HTTP connection (1): 127.0.0.1:7474
[2023-10-31T17:14:45] - [MainThread] - [DEBUG] - connectionpool.py:456 - http://127.0.0.1:7474 "GET / HTTP/1.1" 200 216
[2023-10-31T17:14:45] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'cat-file', '--batch-check'], cwd=/home/talg/XSOAR/content-cyberint, stdin=<valid stream>, shell=False, universal_newlines=False)
[2023-10-31T17:14:45] - [MainThread] - [DEBUG] - graph.py:81 - Content parser hash: fa5f88a3901b6e70087ba00ae96e70d2e08270c6
[2023-10-31T17:14:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
// Deletes all graph nodes and relationships
MATCH (n)
DETACH DELETE n
[2023-10-31T17:14:46] - [MainThread] - [DEBUG] - common.py:138 - Took 1.067352 seconds
[2023-10-31T17:14:50] - [MainThread] - [INFO] - neo4j_graph.py:342 - Creating graph indexes and constraints...
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004863 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003084 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005332 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003922 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002763 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002425 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002244 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004574 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004127 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002933 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.015959 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002463 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002799 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003981 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00285 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002695 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002384 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002636 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003507 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002804 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002779 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002422 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002403 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003287 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003425 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003525 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003096 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002476 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002515 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002884 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002236 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005469 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011606 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002728 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002231 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002027 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002015 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003634 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.018612 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003168 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002991 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002197 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002547 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003279 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002913 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002337 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00236 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002058 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002691 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00269 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002352 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002018 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001981 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001846 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002108 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002575 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002903 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002623 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002716 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002427 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002315 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002554 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002963 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002447 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002298 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002359 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002408 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00284 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003091 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002377 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002578 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00256 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002276 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002402 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002765 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002262 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002313 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002576 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002205 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.01078 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002368 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002151 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002063 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002063 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003195 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002522 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002263 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002208 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002638 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00226 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003608 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004449 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003435 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002414 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002229 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002939 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.0023 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002702 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002155 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002261 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002069 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002509 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002626 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010498 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003247 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.014048 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007353 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002513 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001917 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001897 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001678 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002087 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002421 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00631 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001721 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001664 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001713 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003935 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001838 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001691 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00183 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004076 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001771 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003126 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002664 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003176 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009798 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002041 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001888 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001601 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001436 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001356 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001342 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.017228 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002272 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.0025 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002329 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001662 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001556 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001419 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001372 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001593 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.01518 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001782 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001515 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002001 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002427 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001807 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008257 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002405 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002579 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002229 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001818 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001675 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00178 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001665 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001922 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.013734 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001832 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001756 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002608 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002365 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00202 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001923 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001807 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001708 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006048 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002156 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001551 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007277 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001897 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002062 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.03986 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002278 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002788 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004883 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001941 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00146 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001612 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003509 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.032319 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009553 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008428 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.014919 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005756 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007132 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002001 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001624 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001498 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001659 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001457 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004386 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002214 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002815 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001823 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003546 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005469 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00207 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002535 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001586 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002699 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00512 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002463 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003077 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003311 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00215 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009137 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00202 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001799 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001638 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002131 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002449 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003302 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002671 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.046273 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003793 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002713 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003085 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.020569 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.path)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002911 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003355 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.node_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004932 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004437 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004721 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.object_id)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005792 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.object_id, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006998 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002938 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.name)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.018385 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.name, n.content_type)
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003688 seconds
[2023-10-31T17:14:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.path)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.023855 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00236 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.node_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003259 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003114 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002121 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.object_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006271 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.object_id, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006263 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003024 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.name)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003044 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.name, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.01042 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.path)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002276 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00293 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.node_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002342 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002105 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001983 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.object_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006618 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.object_id, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004549 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006625 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.name)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00262 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.name, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002087 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.path)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00474 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011022 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.node_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002604 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002239 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002663 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.object_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003629 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.object_id, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002759 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002215 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.name)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003246 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.name, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003818 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.path)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004054 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005173 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.node_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003932 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002521 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002027 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.object_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002532 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.object_id, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.0028 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00279 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.name)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003346 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.name, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002351 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.path)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001898 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001888 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.node_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002231 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.0023 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003301 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.object_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002178 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.object_id, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001958 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001899 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.name)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002702 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.name, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002439 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.path)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00296 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002617 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.node_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002304 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.016721 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.016695 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.object_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003046 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.object_id, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002186 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002042 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.name)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002936 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.name, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003353 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.path)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.0032 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002253 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.node_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001923 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001938 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002169 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.object_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002603 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.object_id, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002256 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011224 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.name)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005198 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.name, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003242 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.path)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004644 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003758 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.node_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002575 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002413 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00253 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.object_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002293 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.object_id, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002281 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003743 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.name)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00282 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.name, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002949 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.path)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002357 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002258 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.node_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002223 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003422 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003424 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.object_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002715 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.object_id, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002214 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002078 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.name)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003031 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.name, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002656 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.path)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002007 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002104 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.node_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002119 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001976 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00195 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.object_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002277 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.object_id, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002641 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002144 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.name)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002239 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.name, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001991 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.path)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002196 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002205 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.node_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00313 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002849 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003926 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.object_id)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003003 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.object_id, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004475 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003991 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.name)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002779 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.name, n.content_type)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002468 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.path)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002206 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR ()-[r:USES]->() ON (r.mandatorily)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002347 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR ()-[r:HAS_COMMAND]->() ON (r.deprecated, r.description)
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004279 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE CONSTRAINT cmd_unique_object_id IF NOT EXISTS FOR (n:Command) REQUIRE n.object_id IS UNIQUE
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004048 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): storage.googleapis.com:443
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://storage.googleapis.com:443 "GET /marketplace-dist-dev/content_graph/xsoar.zip HTTP/1.1" 200 1960871
[2023-10-31T17:14:51] - [MainThread] - [INFO] - import_utils.py:29 - Importing from /tmp/tmpg7hmqitm
[2023-10-31T17:14:51] - [MainThread] - [INFO] - neo4j_graph.py:599 - Importing graph from GraphML files...
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
DROP CONSTRAINT cmd_unique_object_id IF EXISTS
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00396 seconds
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CALL apoc.import.graphml("file:/content.graphml", {readLabels: true})
[2023-10-31T17:14:51] - [MainThread] - [DEBUG] - common.py:138 - Took 0.027818 seconds
[2023-10-31T17:14:56] - [MainThread] - [DEBUG] - common.py:136 - Running query:
// Merges possible duplicate command nodes after import
MATCH (c:Command)
WITH c.object_id as object_id, collect(c) as cmds
CALL apoc.refactor.mergeNodes(cmds, {properties: "combine", mergeRels: true}) YIELD node
RETURN node
[2023-10-31T17:14:56] - [MainThread] - [DEBUG] - common.py:138 - Took 0.074769 seconds
[2023-10-31T17:14:56] - [MainThread] - [DEBUG] - common.py:136 - Running query:
// Merges possible duplicate content item nodes after import
MATCH (n:BaseContent{not_in_repository: true})
MATCH (m:BaseContent{content_type: n.content_type})
WHERE ((m.object_id = n.object_id AND m.object_id <> "") OR (m.name = n.name AND m.name <> ""))
AND m.not_in_repository = false
WITH m, n
CALL apoc.refactor.mergeNodes([m, n], {properties: "discard", mergeRels: true}) YIELD node
RETURN node
[2023-10-31T17:14:57] - [MainThread] - [DEBUG] - common.py:138 - Took 0.305644 seconds
[2023-10-31T17:14:57] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE CONSTRAINT cmd_unique_object_id IF NOT EXISTS FOR (n:Command) REQUIRE n.object_id IS UNIQUE
[2023-10-31T17:14:57] - [MainThread] - [DEBUG] - common.py:138 - Took 0.076997 seconds
[2023-10-31T17:14:57] - [MainThread] - [DEBUG] - common.py:136 - Running query:
// Removes string properties with empty values ("") from nodes
CALL apoc.periodic.iterate(
    "MATCH (n) RETURN n",
    "WITH n, [key in keys(n) WHERE n[key] = '' | [key, null]] as nullifiers
    WHERE size(nullifiers) <> 0
    WITH n, apoc.map.fromPairs(nullifiers) as nullifyMap
    SET n += nullifyMap",
    {batchSize:30000, parallel:true, iterateList:true}
);
[2023-10-31T17:14:57] - [MainThread] - [DEBUG] - common.py:138 - Took 0.026573 seconds
[2023-10-31T17:14:57] - [MainThread] - [DEBUG] - graph.py:81 - Content parser hash: fa5f88a3901b6e70087ba00ae96e70d2e08270c6
[2023-10-31T17:14:57] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'fetch', '-v', '--', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=True)
[2023-10-31T17:14:58] - [MainThread] - [WARNING] - common.py:17 - Failed to build content graph, retrying with a clean environment.
[2023-10-31T17:14:58] - [MainThread] - [DEBUG] - docker_helper.py:59 - init and login the docker client
[2023-10-31T17:14:58] - [MainThread] - [DEBUG] - docker_helper.py:62 -  - Using docker mounting: True
[2023-10-31T17:14:58] - [MainThread] - [DEBUG] - config.py:21 - Trying paths: ['/home/talg/.docker/config.json', '/home/talg/.dockercfg']
[2023-10-31T17:14:58] - [MainThread] - [DEBUG] - config.py:25 - Found file at path: /home/talg/.docker/config.json
[2023-10-31T17:14:58] - [MainThread] - [DEBUG] - auth.py:180 - Found 'auths' section
[2023-10-31T17:14:58] - [MainThread] - [DEBUG] - auth.py:132 - Auth data for https://index.docker.io/v1/ is absent. Client might be using a credentials store instead.
[2023-10-31T17:14:58] - [MainThread] - [DEBUG] - auth.py:187 - Found 'credsStore' section
[2023-10-31T17:14:58] - [MainThread] - [DEBUG] - connectionpool.py:456 - http://localhost:None "GET /version HTTP/1.1" 200 None
[2023-10-31T17:14:58] - [MainThread] - [DEBUG] - connectionpool.py:456 - http://localhost:None "GET /v1.43/containers/neo4j-content/json HTTP/1.1" 200 None
[2023-10-31T17:15:05] - [MainThread] - [DEBUG] - connectionpool.py:456 - http://localhost:None "POST /v1.43/containers/19f6dbf7918802472f9c00ec61d415284c6f3939b8bb03ec3113fc5591676afb/stop HTTP/1.1" 204 0
[2023-10-31T17:15:05] - [MainThread] - [DEBUG] - connectionpool.py:456 - http://localhost:None "DELETE /v1.43/containers/19f6dbf7918802472f9c00ec61d415284c6f3939b8bb03ec3113fc5591676afb?v=False&link=False&force=True HTTP/1.1" 204 0
[2023-10-31T17:15:05] - [MainThread] - [DEBUG] - connectionpool.py:228 - Starting new HTTP connection (1): 127.0.0.1:7474
[2023-10-31T17:15:05] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): neo4j.github.io:443
[2023-10-31T17:15:06] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://neo4j.github.io:443 "GET /apoc/versions.json HTTP/1.1" 200 1953
[2023-10-31T17:15:06] - [MainThread] - [INFO] - neo4j_service.py:79 - Downloading APOC plugin, please wait...
[2023-10-31T17:15:06] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): github.com:443
[2023-10-31T17:15:06] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://github.com:443 "GET /neo4j/apoc/releases/download/5.5.0/apoc-5.5.0-core.jar HTTP/1.1" 302 0
[2023-10-31T17:15:06] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): objects.githubusercontent.com:443
[2023-10-31T17:15:06] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://objects.githubusercontent.com:443 "GET /github-production-release-asset-2e65be/525054099/ec532705-680a-40a8-9a00-594c01cbe5b0?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20231031%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20231031T151330Z&X-Amz-Expires=300&X-Amz-Signature=111d0d57de1f8d8e85a78766ad88f740eb64195858c603ce3911f4548ca5c7bf&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=525054099&response-content-disposition=attachment%3B%20filename%3Dapoc-5.5.0-core.jar&response-content-type=application%2Foctet-stream HTTP/1.1" 200 15336290
[2023-10-31T17:15:09] - [MainThread] - [DEBUG] - neo4j_service.py:88 - Starting neo4j service
[2023-10-31T17:15:09] - [MainThread] - [DEBUG] - docker_helper.py:83 - docker client already available, using current DOCKER_CLIENT
[2023-10-31T17:15:09] - [MainThread] - [DEBUG] - connectionpool.py:456 - http://localhost:None "GET /v1.43/containers/neo4j-content/json HTTP/1.1" 404 None
[2023-10-31T17:15:09] - [MainThread] - [DEBUG] - neo4j_service.py:49 - Could not remove neo4j container: 404 Client Error for http+docker://localhost/v1.43/containers/neo4j-content/json: Not Found ("No such container: neo4j-content")
[2023-10-31T17:15:09] - [MainThread] - [DEBUG] - connectionpool.py:456 - http://localhost:None "POST /v1.43/containers/create?name=neo4j-content HTTP/1.1" 201 None
[2023-10-31T17:15:09] - [MainThread] - [DEBUG] - connectionpool.py:456 - http://localhost:None "GET /v1.43/containers/12209df65da1dab25f85636ca501ff492206075f403a85cfedee77985e7a9c34/json HTTP/1.1" 200 None
[2023-10-31T17:15:09] - [MainThread] - [DEBUG] - connectionpool.py:456 - http://localhost:None "POST /v1.43/containers/12209df65da1dab25f85636ca501ff492206075f403a85cfedee77985e7a9c34/start HTTP/1.1" 204 0
[2023-10-31T17:15:09] - [MainThread] - [DEBUG] - neo4j_service.py:124 - Neo4j service started successfully
[2023-10-31T17:15:09] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'cat-file', '--batch-check'], cwd=/home/talg/XSOAR/content-cyberint, stdin=<valid stream>, shell=False, universal_newlines=False)
[2023-10-31T17:15:09] - [MainThread] - [DEBUG] - graph.py:81 - Content parser hash: fa5f88a3901b6e70087ba00ae96e70d2e08270c6
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
// Deletes all graph nodes and relationships
MATCH (n)
DETACH DELETE n
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.274003 seconds
[2023-10-31T17:15:27] - [MainThread] - [INFO] - neo4j_graph.py:342 - Creating graph indexes and constraints...
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.id)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.06655 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.node_id)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.015185 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.content_type)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011995 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.marketplaces)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011999 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.object_id)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.014078 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.object_id, n.content_type)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.01463 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.014048 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.name)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010498 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.name, n.content_type)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008226 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.path)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.016186 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.id)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011194 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.node_id)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009636 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.content_type)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009741 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.marketplaces)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010073 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.object_id)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.015743 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.object_id, n.content_type)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009234 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.019312 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.name)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007792 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.name, n.content_type)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011875 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.path)
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008876 seconds
[2023-10-31T17:15:27] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.022612 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.node_id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008396 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010619 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.marketplaces)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009757 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.object_id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010602 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.object_id, n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010672 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012061 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.name)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009721 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.name, n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011299 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.path)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010364 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.022552 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.node_id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009174 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00865 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.marketplaces)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00859 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.object_id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008228 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.object_id, n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00898 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.013367 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.name)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009723 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.name, n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007559 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.path)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011047 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.022385 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.node_id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008105 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007487 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.marketplaces)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.015181 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.object_id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012726 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.object_id, n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007937 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009344 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.name)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008074 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.name, n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009488 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.path)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008707 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.020406 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.node_id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007834 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007495 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.marketplaces)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007745 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.object_id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007642 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.object_id, n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008058 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010373 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.name)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007293 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.name, n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008963 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.path)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006697 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.019792 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.node_id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006934 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006579 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.marketplaces)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007565 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.object_id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007158 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.object_id, n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007898 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008996 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.name)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007649 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.name, n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007201 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.path)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008777 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.019482 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.node_id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006798 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009141 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.marketplaces)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008936 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.object_id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007248 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.object_id, n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007114 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008009 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.name)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010457 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.name, n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011965 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.path)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010269 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.021927 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.node_id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012464 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007227 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.marketplaces)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.01878 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.object_id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007377 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.object_id, n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.016473 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.0086 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.name)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.017697 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.name, n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.013875 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.path)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.024925 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.028655 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.node_id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009061 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008277 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.marketplaces)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008529 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.object_id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005851 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.object_id, n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007081 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010657 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.name)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.name, n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010652 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.path)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006476 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009026 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.node_id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011395 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010731 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.marketplaces)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00687 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.object_id)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.02046 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.object_id, n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008588 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010079 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.name)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.015293 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.name, n.content_type)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011839 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.path)
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:138 - Took 0.014981 seconds
[2023-10-31T17:15:28] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.032629 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.node_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.0113 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010092 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005878 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.object_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00529 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.object_id, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008039 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009075 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.name)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.036751 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.name, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010258 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.path)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.019005 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.024969 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.node_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012567 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.014835 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010848 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.object_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010819 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.object_id, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006587 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006903 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.name)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006954 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.name, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006364 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.path)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005055 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.017758 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.node_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009197 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006785 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006145 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.object_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005895 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.object_id, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005485 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006149 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.name)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005144 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.name, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005703 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.path)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008409 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00987 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.node_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006155 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005917 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006174 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.object_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00637 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.object_id, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005562 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00812 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.name)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005542 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.name, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009676 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.path)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012404 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.018339 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.node_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004906 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005484 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011194 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.object_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005383 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.object_id, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006144 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005843 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.name)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006323 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.name, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006053 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.path)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004696 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007519 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.node_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004779 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00427 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005478 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.object_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004977 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.object_id, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00508 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006553 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.name)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00534 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.name, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006005 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.path)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005191 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007501 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.node_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005478 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005934 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006588 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.object_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005295 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.object_id, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007331 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.name)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00648 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.name, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007621 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.path)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008047 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009484 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.node_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005877 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005573 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00524 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.object_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005474 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.object_id, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005822 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00578 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.name)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005316 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.name, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006814 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.path)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007879 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011752 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.node_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009672 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010955 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006234 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.object_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007836 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.object_id, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008407 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010254 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.name)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006963 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.name, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010276 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.path)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010363 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.021731 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.node_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007493 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007778 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009339 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.object_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00949 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.object_id, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010426 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011315 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.name)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009128 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.name, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007566 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.path)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008988 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.021927 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.node_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008911 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.014071 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009128 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.object_id)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.017427 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.object_id, n.content_type)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.01594 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012891 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.name)
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005936 seconds
[2023-10-31T17:15:29] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.name, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.021855 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.path)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.01438 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.036251 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.node_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007128 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011806 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010915 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.object_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006422 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.object_id, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006849 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009136 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.name)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005442 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.name, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007912 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.path)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005453 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.027232 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.node_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005153 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009135 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007554 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.object_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010428 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.object_id, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006357 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.016056 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.name)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012109 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.name, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.014753 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.path)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00697 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.0116 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.node_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008077 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010951 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009885 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.object_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.017092 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.object_id, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.013582 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010082 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.name)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007808 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.name, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007697 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.path)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010018 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008317 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.node_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009526 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008138 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009332 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.object_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005738 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.object_id, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010674 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008281 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.name)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006881 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.name, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.015454 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.path)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004987 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.026448 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.node_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008856 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.020635 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.016412 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.object_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004968 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.object_id, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005297 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006771 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.name)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005307 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.name, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006488 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.path)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005308 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.017757 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.node_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005523 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005896 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004878 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.object_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005092 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.object_id, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005943 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005697 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.name)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004842 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.name, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005596 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.path)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005024 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007499 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.node_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006287 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005399 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005352 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.object_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004922 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.object_id, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004901 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005616 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.name)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005353 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.name, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012246 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.path)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008212 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006945 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.node_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005569 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004798 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007047 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.object_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005971 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.object_id, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011915 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007707 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.name)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008785 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.name, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010207 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.path)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008153 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.021378 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.node_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005425 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006501 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006823 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.object_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004991 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.object_id, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007028 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006931 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.name)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007558 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.name, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006209 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.path)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007588 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012844 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.node_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007141 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005104 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005362 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.object_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00657 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.object_id, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008954 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007272 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.name)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005471 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.name, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00636 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.path)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005463 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008434 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.node_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005071 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005516 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006711 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.object_id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004687 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.object_id, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005808 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007009 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.name)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004719 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.name, n.content_type)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005296 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.path)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005362 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.id)
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007778 seconds
[2023-10-31T17:15:30] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.node_id)
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005899 seconds
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.content_type)
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005478 seconds
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.marketplaces)
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005691 seconds
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.object_id)
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005942 seconds
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.object_id, n.content_type)
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005574 seconds
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006185 seconds
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.name)
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005287 seconds
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.name, n.content_type)
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005669 seconds
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.path)
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006169 seconds
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR ()-[r:USES]->() ON (r.mandatorily)
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:138 - Took 0.015539 seconds
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR ()-[r:HAS_COMMAND]->() ON (r.deprecated, r.description)
[2023-10-31T17:15:31] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012055 seconds
[2023-10-31T17:15:34] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE CONSTRAINT cmd_unique_object_id IF NOT EXISTS FOR (n:Command) REQUIRE n.object_id IS UNIQUE
[2023-10-31T17:15:34] - [MainThread] - [DEBUG] - common.py:138 - Took 0.094995 seconds
[2023-10-31T17:15:34] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): storage.googleapis.com:443
[2023-10-31T17:15:34] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://storage.googleapis.com:443 "GET /marketplace-dist-dev/content_graph/xsoar.zip HTTP/1.1" 200 1960871
[2023-10-31T17:15:35] - [MainThread] - [INFO] - import_utils.py:29 - Importing from /tmp/tmpi2rgtjgg
[2023-10-31T17:15:35] - [MainThread] - [INFO] - neo4j_graph.py:599 - Importing graph from GraphML files...
[2023-10-31T17:15:35] - [MainThread] - [DEBUG] - common.py:136 - Running query:
DROP CONSTRAINT cmd_unique_object_id IF EXISTS
[2023-10-31T17:15:35] - [MainThread] - [DEBUG] - common.py:138 - Took 0.01004 seconds
[2023-10-31T17:15:35] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CALL apoc.import.graphml("file:/content.graphml", {readLabels: true})
[2023-10-31T17:15:35] - [MainThread] - [DEBUG] - common.py:138 - Took 0.071495 seconds
[2023-10-31T17:15:43] - [MainThread] - [DEBUG] - common.py:136 - Running query:
// Merges possible duplicate command nodes after import
MATCH (c:Command)
WITH c.object_id as object_id, collect(c) as cmds
CALL apoc.refactor.mergeNodes(cmds, {properties: "combine", mergeRels: true}) YIELD node
RETURN node
[2023-10-31T17:15:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.213087 seconds
[2023-10-31T17:15:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
// Merges possible duplicate content item nodes after import
MATCH (n:BaseContent{not_in_repository: true})
MATCH (m:BaseContent{content_type: n.content_type})
WHERE ((m.object_id = n.object_id AND m.object_id <> "") OR (m.name = n.name AND m.name <> ""))
AND m.not_in_repository = false
WITH m, n
CALL apoc.refactor.mergeNodes([m, n], {properties: "discard", mergeRels: true}) YIELD node
RETURN node
[2023-10-31T17:15:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.440865 seconds
[2023-10-31T17:15:48] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE CONSTRAINT cmd_unique_object_id IF NOT EXISTS FOR (n:Command) REQUIRE n.object_id IS UNIQUE
[2023-10-31T17:15:48] - [MainThread] - [DEBUG] - common.py:138 - Took 0.141323 seconds
[2023-10-31T17:15:48] - [MainThread] - [DEBUG] - common.py:136 - Running query:
// Removes string properties with empty values ("") from nodes
CALL apoc.periodic.iterate(
    "MATCH (n) RETURN n",
    "WITH n, [key in keys(n) WHERE n[key] = '' | [key, null]] as nullifiers
    WHERE size(nullifiers) <> 0
    WITH n, apoc.map.fromPairs(nullifiers) as nullifyMap
    SET n += nullifyMap",
    {batchSize:30000, parallel:true, iterateList:true}
);
[2023-10-31T17:15:48] - [MainThread] - [DEBUG] - common.py:138 - Took 0.045674 seconds
[2023-10-31T17:15:49] - [MainThread] - [DEBUG] - graph.py:81 - Content parser hash: fa5f88a3901b6e70087ba00ae96e70d2e08270c6
[2023-10-31T17:15:49] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'fetch', '-v', '--', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=True)
[2023-10-31T17:15:50] - [MainThread] - [WARNING] - format_module.py:214 - Error updating content graph. Will not format using the graph.
[2023-10-31T17:15:50] - [MainThread] - [DEBUG] - format_module.py:217 - Error encountered when updating content graph: SHA b'771ca328d1859f44b8acc063f219f539b7435692' could not be resolved, git returned: b'771ca328d1859f44b8acc063f219f539b7435692 missing'
[2023-10-31T17:15:50] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-10-31T17:15:50] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'rev-parse', '--show-toplevel'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-10-31T17:15:50] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'show', 'origin/master:Layouts/layoutscontainer-Cyberint_Incident_Layout.json'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-10-31T17:15:50] - [MainThread] - [DEBUG] - tools.py:603 - Could not get local remote file because of: Cmd('git') failed due to: exit code(128)
  cmdline: git show origin/master:Layouts/layoutscontainer-Cyberint_Incident_Layout.json
  stderr: 'fatal: Invalid object name 'origin/master'.'
Searching the remote file content with the API.
Traceback (most recent call last):
  File "/home/talg/.local/lib/python3.10/site-packages/demisto_sdk/commands/common/tools.py", line 594, in get_remote_file
    local_origin_content := get_local_remote_file(
  File "/home/talg/.local/lib/python3.10/site-packages/demisto_sdk/commands/common/tools.py", line 449, in get_local_remote_file
    file_content = repo_git_util.get_local_remote_file_content(git_path)
  File "/home/talg/.local/lib/python3.10/site-packages/demisto_sdk/commands/common/git_util.py", line 773, in get_local_remote_file_content
    file_content = self.repo.git.show(git_file_path)
  File "/home/talg/.local/lib/python3.10/site-packages/git/cmd.py", line 736, in <lambda>
    return lambda *args, **kwargs: self._call_process(name, *args, **kwargs)
  File "/home/talg/.local/lib/python3.10/site-packages/git/cmd.py", line 1316, in _call_process
    return self.execute(call, **exec_kwargs)
  File "/home/talg/.local/lib/python3.10/site-packages/git/cmd.py", line 1111, in execute
    raise GitCommandError(redacted_command, status, stderr_value, stdout_value)
git.exc.GitCommandError: Cmd('git') failed due to: exit code(128)
  cmdline: git show origin/master:Layouts/layoutscontainer-Cyberint_Incident_Layout.json
  stderr: 'fatal: Invalid object name 'origin/master'.'
[2023-10-31T17:15:50] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-10-31T17:15:50] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): api.github.com:443
[2023-10-31T17:15:50] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://api.github.com:443 "GET /repos/qmasters-ltd/content-cyberint HTTP/1.1" 404 None
[2023-10-31T17:15:50] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): api.github.com:443
[2023-10-31T17:15:51] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://api.github.com:443 "GET /repos/qmasters-ltd/content-cyberint?token= HTTP/1.1" 404 108
[2023-10-31T17:15:51] - [MainThread] - [DEBUG] - git_content_config.py:292 - Could not access GitHub api in `_search_github_repo`. status code=404, reason=Not Found
[2023-10-31T17:15:51] - [MainThread] - [INFO] - git_content_config.py:234 - Could not find the repository name on gitlab - defaulting to demisto/content
[2023-10-31T17:15:51] - [MainThread] - [INFO] - git_content_config.py:237 - If you are using a private gitlab repo, configure one of the following environment variables: `DEMISTO_SDK_GITLAB_TOKEN`,`DEMISTO_SDK_REPO_HOSTNAME`
[2023-10-31T17:15:51] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): raw.githubusercontent.com:443
[2023-10-31T17:15:51] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://raw.githubusercontent.com:443 "GET /demisto/content/master/Layouts/layoutscontainer-Cyberint_Incident_Layout.json HTTP/1.1" 404 14
[2023-10-31T17:15:51] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): raw.githubusercontent.com:443
[2023-10-31T17:15:51] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://raw.githubusercontent.com:443 "GET /demisto/content/master/Layouts/layoutscontainer-Cyberint_Incident_Layout.json?token= HTTP/1.1" 404 14
[2023-10-31T17:15:51] - [MainThread] - [DEBUG] - tools.py:532 - Could not find the old entity file under "https://raw.githubusercontent.com/demisto/content/master/Layouts/layoutscontainer-Cyberint_Incident_Layout.json".
please make sure that you did not break backward compatibility.
Reason: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/demisto/content/master/Layouts/layoutscontainer-Cyberint_Incident_Layout.json?token=
[2023-10-31T17:15:51] - [MainThread] - [INFO] - update_layout.py:83 - 
================= Updating file /home/talg/XSOAR/content-cyberint/Layouts/layoutscontainer-Cyberint_Incident_Layout.json =================
[2023-10-31T17:15:51] - [MainThread] - [DEBUG] - update_generic_json.py:154 - Updating json ID and name to be without spaces at the end
[2023-10-31T17:15:51] - [MainThread] - [DEBUG] - update_layout.py:174 - Removing unnecessary fields from details field
[2023-10-31T17:15:51] - [MainThread] - [DEBUG] - update_layout.py:174 - Removing unnecessary fields from detailsV2 field
[2023-10-31T17:15:51] - [MainThread] - [INFO] - update_generic.py:146 - 
[2023-10-31T17:15:51] - [MainThread] - [INFO] - update_generic.py:350 - Setting fromVersion field
[2023-10-31T17:15:51] - [MainThread] - [INFO] - update_generic.py:324 - default_from_version='6.0.0', GENERAL_DEFAULT_FROMVERSION='6.10.0', current_fromversion_value='6.0.0'
[2023-10-31T17:15:51] - [MainThread] - [INFO] - update_generic.py:285 - Either no fromversion is specified in your file, or it is lower than the minimal fromversion for this content type.Would you like to set it to the default? [Y/n]
[2023-10-31T17:30:37] - [MainThread] - [DEBUG] - update_generic_json.py:137 - Updating ID to be the same as JSON name
[2023-10-31T17:30:37] - [MainThread] - [INFO] - update_layout.py:304 - Skipping formatting of non-existent-fields for /home/talg/XSOAR/content-cyberint/Layouts/layoutscontainer-Cyberint_Incident_Layout.json as the no-graph argument was given.
[2023-10-31T17:30:37] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'rev-parse', '--show-toplevel'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-10-31T17:30:37] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'show', 'origin/master:Layouts/layoutscontainer-Cyberint_Incident_Layout.json'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-10-31T17:30:37] - [MainThread] - [DEBUG] - tools.py:603 - Could not get local remote file because of: Cmd('git') failed due to: exit code(128)
  cmdline: git show origin/master:Layouts/layoutscontainer-Cyberint_Incident_Layout.json
  stderr: 'fatal: Invalid object name 'origin/master'.'
Searching the remote file content with the API.
Traceback (most recent call last):
  File "/home/talg/.local/lib/python3.10/site-packages/demisto_sdk/commands/common/tools.py", line 594, in get_remote_file
    local_origin_content := get_local_remote_file(
  File "/home/talg/.local/lib/python3.10/site-packages/demisto_sdk/commands/common/tools.py", line 449, in get_local_remote_file
    file_content = repo_git_util.get_local_remote_file_content(git_path)
  File "/home/talg/.local/lib/python3.10/site-packages/demisto_sdk/commands/common/git_util.py", line 773, in get_local_remote_file_content
    file_content = self.repo.git.show(git_file_path)
  File "/home/talg/.local/lib/python3.10/site-packages/git/cmd.py", line 736, in <lambda>
    return lambda *args, **kwargs: self._call_process(name, *args, **kwargs)
  File "/home/talg/.local/lib/python3.10/site-packages/git/cmd.py", line 1316, in _call_process
    return self.execute(call, **exec_kwargs)
  File "/home/talg/.local/lib/python3.10/site-packages/git/cmd.py", line 1111, in execute
    raise GitCommandError(redacted_command, status, stderr_value, stdout_value)
git.exc.GitCommandError: Cmd('git') failed due to: exit code(128)
  cmdline: git show origin/master:Layouts/layoutscontainer-Cyberint_Incident_Layout.json
  stderr: 'fatal: Invalid object name 'origin/master'.'
[2023-10-31T17:30:37] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-10-31T17:30:37] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): raw.githubusercontent.com:443
[2023-10-31T17:30:37] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://raw.githubusercontent.com:443 "GET /demisto/content/master/home/talg/XSOAR/content-cyberint/Layouts/layoutscontainer-Cyberint_Incident_Layout.json HTTP/1.1" 404 14
[2023-10-31T17:30:37] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): raw.githubusercontent.com:443
[2023-10-31T17:30:37] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://raw.githubusercontent.com:443 "GET /demisto/content/master/home/talg/XSOAR/content-cyberint/Layouts/layoutscontainer-Cyberint_Incident_Layout.json?token= HTTP/1.1" 404 14
[2023-10-31T17:30:37] - [MainThread] - [DEBUG] - tools.py:532 - Could not find the old entity file under "https://raw.githubusercontent.com/demisto/content/master/home/talg/XSOAR/content-cyberint/Layouts/layoutscontainer-Cyberint_Incident_Layout.json".
please make sure that you did not break backward compatibility.
Reason: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/demisto/content/master/home/talg/XSOAR/content-cyberint/Layouts/layoutscontainer-Cyberint_Incident_Layout.json?token=
[2023-10-31T17:30:37] - [MainThread] - [INFO] - validate_manager.py:441 - 
================= Validating file /home/talg/XSOAR/content-cyberint/Layouts/layoutscontainer-Cyberint_Incident_Layout.json =================
[2023-10-31T17:30:37] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'check-ignore', '/home/talg/XSOAR/content-cyberint/Layouts/layoutscontainer-Cyberint_Incident_Layout.json'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-10-31T17:30:37] - [MainThread] - [INFO] - validate_manager.py:839 - 
Validating /home/talg/XSOAR/content-cyberint/Layouts/layoutscontainer-Cyberint_Incident_Layout.json as layoutscontainer
[2023-10-31T17:30:37] - [MainThread] - [INFO] - structure.py:170 - Validating scheme for /home/talg/XSOAR/content-cyberint/Layouts/layoutscontainer-Cyberint_Incident_Layout.json
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'any'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : 
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: any Rule: {'type': 'any'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : 
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'map', 'mapping': {'id': {'type': 'str'}, 'version': {'type': 'number'}, 'modified': {'type': 'str'}, 'name': {'type': 'str'}, 'type': {'type': 'str'}, 'isVisible': {'type': 'bool'}, 'readOnly': {'type': 'bool'}, 'description': {'type': 'str'}, 'query': {'type': 'any'}, 'queryType': {'type': 'str'}, 'sortValues': {'type': 'str'}, 'fields': {'type': 'seq', 'sequence': [{'include': 'field_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : 
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: map Rule: {'type': 'map', 'mapping': {'id': {'type': 'str'}, 'version': {'type': 'number'}, 'modified': {'type': 'str'}, 'name': {'type': 'str'}, 'type': {'type': 'str'}, 'isVisible': {'type': 'bool'}, 'readOnly': {'type': 'bool'}, 'description': {'type': 'str'}, 'query': {'type': 'any'}, 'queryType': {'type': 'str'}, 'sortValues': {'type': 'str'}, 'fields': {'type': 'seq', 'sequence': [{'include': 'field_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1128 - Init mapping value : 
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/id
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/id
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'number'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/version
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: number Rule: {'type': 'number'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/version
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/modified
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/modified
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/name
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/name
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/type
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/type
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'bool'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/isVisible
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: bool Rule: {'type': 'bool'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/isVisible
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'bool'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/readOnly
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: bool Rule: {'type': 'bool'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/readOnly
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/description
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/description
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'any'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/query
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: any Rule: {'type': 'any'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/query
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/queryType
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/queryType
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/sortValues
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/sortValues
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'include': 'field_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/fields
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'include': 'field_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : /mapping/fields
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'include': 'field_schema'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:375 - Found include tag...
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/fields
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : 
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'map', 'mapping': {'id': {'type': 'str'}, 'version': {'type': 'number'}, 'modified': {'type': 'str'}, 'fieldId': {'type': 'str'}, 'isVisible': {'type': 'bool'}, 'sortValues': {'type': 'str'}, 'filters': {'type': 'seq', 'sequence': [{'include': 'arg_filters_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : 
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: map Rule: {'type': 'map', 'mapping': {'id': {'type': 'str'}, 'version': {'type': 'number'}, 'modified': {'type': 'str'}, 'fieldId': {'type': 'str'}, 'isVisible': {'type': 'bool'}, 'sortValues': {'type': 'str'}, 'filters': {'type': 'seq', 'sequence': [{'include': 'arg_filters_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1128 - Init mapping value : 
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/id
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/id
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'number'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/version
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: number Rule: {'type': 'number'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/version
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/modified
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/modified
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/fieldId
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/fieldId
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'bool'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/isVisible
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: bool Rule: {'type': 'bool'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/isVisible
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/sortValues
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/sortValues
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'include': 'arg_filters_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/filters
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'include': 'arg_filters_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : /mapping/filters
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'include': 'arg_filters_schema'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:375 - Found include tag...
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/filters
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : 
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'include': 'arg_filter_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : 
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'include': 'arg_filter_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : 
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'include': 'arg_filter_schema'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:375 - Found include tag...
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : 
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'map', 'mapping': {'operator': {'type': 'str', 'required': True}, 'ignorecase': {'type': 'bool'}, 'left': {'type': 'map', 'required': True, 'mapping': {'value': {'type': 'any', 'required': True}, 'isContext': {'type': 'bool'}}}, 'right': {'type': 'map', 'mapping': {'value': {'type': 'any', 'required': True}, 'isContext': {'type': 'bool'}}}, 'type': {'type': 'str'}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : 
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: map Rule: {'type': 'map', 'mapping': {'operator': {'type': 'str', 'required': True}, 'ignorecase': {'type': 'bool'}, 'left': {'type': 'map', 'required': True, 'mapping': {'value': {'type': 'any', 'required': True}, 'isContext': {'type': 'bool'}}}, 'right': {'type': 'map', 'mapping': {'value': {'type': 'any', 'required': True}, 'isContext': {'type': 'bool'}}}, 'type': {'type': 'str'}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1128 - Init mapping value : 
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str', 'required': True}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/operator
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str', 'required': True}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:783 - Init required value : /mapping/operator
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/operator
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'bool'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/ignorecase
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: bool Rule: {'type': 'bool'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/ignorecase
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'map', 'required': True, 'mapping': {'value': {'type': 'any', 'required': True}, 'isContext': {'type': 'bool'}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/left
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: map Rule: {'type': 'map', 'required': True, 'mapping': {'value': {'type': 'any', 'required': True}, 'isContext': {'type': 'bool'}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:783 - Init required value : /mapping/left
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1128 - Init mapping value : /mapping/left
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'any', 'required': True}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/left/mapping/value
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: any Rule: {'type': 'any', 'required': True}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:783 - Init required value : /mapping/left/mapping/value
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/left/mapping/value
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'bool'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/left/mapping/isContext
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: bool Rule: {'type': 'bool'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/left/mapping/isContext
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/left
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'map', 'mapping': {'value': {'type': 'any', 'required': True}, 'isContext': {'type': 'bool'}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/right
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: map Rule: {'type': 'map', 'mapping': {'value': {'type': 'any', 'required': True}, 'isContext': {'type': 'bool'}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1128 - Init mapping value : /mapping/right
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'any', 'required': True}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/right/mapping/value
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: any Rule: {'type': 'any', 'required': True}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:783 - Init required value : /mapping/right/mapping/value
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/right/mapping/value
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'bool'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/right/mapping/isContext
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: bool Rule: {'type': 'bool'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/right/mapping/isContext
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/right
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/type
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/type
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : 
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'map', 'mapping': {'id': {'type': 'str', 'required': True}, 'group': {'type': 'str', 'required': True, 'enum': ['incident', 'indicator']}, 'definitionId': {'type': 'str'}, 'version': {'type': 'number', 'required': True}, 'name': {'type': 'str', 'required': True}, 'fromVersion': {'type': 'str', 'required': True}, 'toVersion': {'type': 'str'}, 'description': {'type': 'str'}, 'system': {'type': 'bool'}, 'marketplaces': {'type': 'seq', 'sequence': [{'type': 'str', 'enum': ['xsoar', 'marketplacev2', 'xpanse', 'xsoar_saas', 'xsoar_on_prem']}]}, 'edit': {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}, 'indicatorsDetails': {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}, 'indicatorsQuickView': {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}, 'quickView': {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}, 'close': {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}, 'details': {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}, 'detailsV2': {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}, 'mobile': {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : 
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: map Rule: {'type': 'map', 'mapping': {'id': {'type': 'str', 'required': True}, 'group': {'type': 'str', 'required': True, 'enum': ['incident', 'indicator']}, 'definitionId': {'type': 'str'}, 'version': {'type': 'number', 'required': True}, 'name': {'type': 'str', 'required': True}, 'fromVersion': {'type': 'str', 'required': True}, 'toVersion': {'type': 'str'}, 'description': {'type': 'str'}, 'system': {'type': 'bool'}, 'marketplaces': {'type': 'seq', 'sequence': [{'type': 'str', 'enum': ['xsoar', 'marketplacev2', 'xpanse', 'xsoar_saas', 'xsoar_on_prem']}]}, 'edit': {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}, 'indicatorsDetails': {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}, 'indicatorsQuickView': {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}, 'quickView': {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}, 'close': {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}, 'details': {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}, 'detailsV2': {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}, 'mobile': {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1128 - Init mapping value : 
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str', 'required': True}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/id
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str', 'required': True}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:783 - Init required value : /mapping/id
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/id
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str', 'required': True, 'enum': ['incident', 'indicator']}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/group
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str', 'required': True, 'enum': ['incident', 'indicator']}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:783 - Init required value : /mapping/group
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:828 - Init enum value : /mapping/group
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/group
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/definitionId
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/definitionId
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'number', 'required': True}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/version
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: number Rule: {'type': 'number', 'required': True}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:783 - Init required value : /mapping/version
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/version
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str', 'required': True}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/name
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str', 'required': True}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:783 - Init required value : /mapping/name
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/name
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str', 'required': True}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/fromVersion
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str', 'required': True}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:783 - Init required value : /mapping/fromVersion
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/fromVersion
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/toVersion
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/toVersion
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/description
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/description
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'bool'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/system
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: bool Rule: {'type': 'bool'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/system
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'type': 'str', 'enum': ['xsoar', 'marketplacev2', 'xpanse', 'xsoar_saas', 'xsoar_on_prem']}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/marketplaces
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'type': 'str', 'enum': ['xsoar', 'marketplacev2', 'xpanse', 'xsoar_saas', 'xsoar_on_prem']}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : /mapping/marketplaces
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'str', 'enum': ['xsoar', 'marketplacev2', 'xpanse', 'xsoar_saas', 'xsoar_on_prem']}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/marketplaces/sequence/0
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: str Rule: {'type': 'str', 'enum': ['xsoar', 'marketplacev2', 'xpanse', 'xsoar_saas', 'xsoar_on_prem']}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:828 - Init enum value : /mapping/marketplaces/sequence/0
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/marketplaces/sequence/0
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/marketplaces
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/edit
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: map Rule: {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1128 - Init mapping value : /mapping/edit
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/edit/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : /mapping/edit/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'include': 'tabs_schema'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:375 - Found include tag...
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/edit/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/edit/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : /mapping/edit/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'include': 'section_schema'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:375 - Found include tag...
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/edit/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/edit
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/indicatorsDetails
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: map Rule: {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1128 - Init mapping value : /mapping/indicatorsDetails
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/indicatorsDetails/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : /mapping/indicatorsDetails/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'include': 'tabs_schema'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:375 - Found include tag...
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/indicatorsDetails/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/indicatorsDetails/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : /mapping/indicatorsDetails/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'include': 'section_schema'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:375 - Found include tag...
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/indicatorsDetails/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/indicatorsDetails
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/indicatorsQuickView
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: map Rule: {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1128 - Init mapping value : /mapping/indicatorsQuickView
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/indicatorsQuickView/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : /mapping/indicatorsQuickView/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'include': 'tabs_schema'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:375 - Found include tag...
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/indicatorsQuickView/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/indicatorsQuickView/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : /mapping/indicatorsQuickView/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'include': 'section_schema'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:375 - Found include tag...
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/indicatorsQuickView/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/indicatorsQuickView
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/quickView
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: map Rule: {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1128 - Init mapping value : /mapping/quickView
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/quickView/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : /mapping/quickView/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'include': 'tabs_schema'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:375 - Found include tag...
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/quickView/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/quickView/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : /mapping/quickView/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'include': 'section_schema'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:375 - Found include tag...
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/quickView/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/quickView
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/close
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: map Rule: {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1128 - Init mapping value : /mapping/close
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/close/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : /mapping/close/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'include': 'tabs_schema'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:375 - Found include tag...
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/close/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/close/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : /mapping/close/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'include': 'section_schema'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:375 - Found include tag...
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/close/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/close
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/details
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: map Rule: {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1128 - Init mapping value : /mapping/details
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/details/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : /mapping/details/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'include': 'tabs_schema'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:375 - Found include tag...
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/details/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/details/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : /mapping/details/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'include': 'section_schema'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:375 - Found include tag...
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/details/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/details
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/detailsV2
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: map Rule: {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1128 - Init mapping value : /mapping/detailsV2
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/detailsV2/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : /mapping/detailsV2/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'include': 'tabs_schema'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:375 - Found include tag...
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/detailsV2/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/detailsV2/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : /mapping/detailsV2/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'include': 'section_schema'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:375 - Found include tag...
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/detailsV2/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/detailsV2
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/mobile
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: map Rule: {'type': 'map', 'mapping': {'tabs': {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}, 'sections': {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}}}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1128 - Init mapping value : /mapping/mobile
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/mobile/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'include': 'tabs_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : /mapping/mobile/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'include': 'tabs_schema'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:375 - Found include tag...
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/mobile/mapping/tabs
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:706 - Init type value : /mapping/mobile/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:707 - Type: seq Rule: {'type': 'seq', 'sequence': [{'include': 'section_schema'}]}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1085 - Init sequence value : /mapping/mobile/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:369 - Init schema: {'include': 'section_schema'}
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:375 - Found include tag...
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/mobile/mapping/sections
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : /mapping/mobile
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - rule.py:1295 - Checking for conflicts : 
[2023-10-31T17:30:38] - [MainThread] - [DEBUG] - content_entity_validator.py:555 - either not from_version or not to_version in /home/talg/XSOAR/content-cyberint/Layouts/layoutscontainer-Cyberint_Incident_Layout.json, considering them synced
[2023-10-31T17:30:38] - [MainThread] - [INFO] - format_module.py:291 - 
[2023-10-31T17:30:38] - [MainThread] - [INFO] - format_module.py:294 - Format Status   on file: /home/talg/XSOAR/content-cyberint/Layouts/layoutscontainer-Cyberint_Incident_Layout.json - Success
Validate Status on file: /home/talg/XSOAR/content-cyberint/Layouts/layoutscontainer-Cyberint_Incident_Layout.json - Success
[2023-10-31T17:42:00] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-10-31T17:42:00] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-10-31T17:42:00] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-10-31T17:42:00] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-10-31T17:42:00] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): pypi.org:443
[2023-10-31T17:42:00] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 41763
[2023-10-31T17:42:00] - [MainThread] - [INFO] - __main__.py:228 - You are using demisto-sdk 1.20.8.
[2023-10-31T17:42:00] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-10-31T17:42:00] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-10-31T17:42:00] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-10-31T17:42:00] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-10-31T17:42:00] - [MainThread] - [DEBUG] - readme.py:904 - server is already up. Not restarting
[2023-10-31T17:42:00] - [MainThread] - [DEBUG] - connectionpool.py:228 - Starting new HTTP connection (1): 127.0.0.1:7474
[2023-10-31T17:42:00] - [MainThread] - [DEBUG] - connectionpool.py:456 - http://127.0.0.1:7474 "GET / HTTP/1.1" 200 216
[2023-10-31T17:42:00] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'cat-file', '--batch-check'], cwd=/home/talg/XSOAR/content-cyberint, stdin=<valid stream>, shell=False, universal_newlines=False)
[2023-10-31T17:42:00] - [MainThread] - [DEBUG] - graph.py:81 - Content parser hash: fa5f88a3901b6e70087ba00ae96e70d2e08270c6
[2023-10-31T17:42:00] - [MainThread] - [DEBUG] - common.py:136 - Running query:
// Deletes all graph nodes and relationships
MATCH (n)
DETACH DELETE n
[2023-10-31T17:42:02] - [MainThread] - [DEBUG] - common.py:138 - Took 1.377286 seconds
[2023-10-31T17:42:06] - [MainThread] - [INFO] - neo4j_graph.py:342 - Creating graph indexes and constraints...
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.id)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004279 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.node_id)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.053997 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.content_type)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003399 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.marketplaces)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003728 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.object_id)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002613 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.object_id, n.content_type)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002205 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002026 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.name)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.017283 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.name, n.content_type)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003675 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.path)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002888 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.id)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001912 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.node_id)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001639 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.content_type)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001741 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.marketplaces)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006836 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.object_id)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002944 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.object_id, n.content_type)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002828 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005182 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.name)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005351 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.name, n.content_type)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005565 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.path)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00799 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.id)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00477 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.node_id)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00327 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.content_type)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003014 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.marketplaces)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007751 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.object_id)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00557 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.object_id, n.content_type)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002546 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005081 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.name)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003962 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.name, n.content_type)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003901 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.path)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003596 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.id)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002741 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.node_id)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006502 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.content_type)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002882 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.marketplaces)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002173 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.object_id)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003111 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.object_id, n.content_type)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002207 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002039 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.name)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001789 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.name, n.content_type)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002548 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.path)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003823 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.id)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002698 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.node_id)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006391 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.content_type)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002474 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.marketplaces)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00248 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.object_id)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002963 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.object_id, n.content_type)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002584 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002527 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.name)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002432 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.name, n.content_type)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00207 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.path)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002614 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.id)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00204 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.node_id)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002369 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.content_type)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002147 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.marketplaces)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002724 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.object_id)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002046 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.object_id, n.content_type)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007297 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003436 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.name)
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002126 seconds
[2023-10-31T17:42:06] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006557 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003922 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002157 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00176 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001535 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00187 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001679 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001404 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002303 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002635 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00263 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001698 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001527 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001358 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001517 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001671 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001718 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002065 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001657 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002752 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.0023 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002933 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001729 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002541 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002057 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002324 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002344 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003089 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003397 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00188 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002317 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001797 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001904 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003458 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004684 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002083 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001926 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001878 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001564 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002739 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00185 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001672 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001572 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001572 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002353 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001656 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001846 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001866 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001588 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001595 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001842 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002422 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002416 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002127 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002193 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002014 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001572 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002314 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001956 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001896 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002448 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00368 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.0021 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001879 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00171 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001619 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002611 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002149 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002051 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002839 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002458 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001969 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001837 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001802 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003184 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002996 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002059 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003153 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002566 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003137 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00435 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002346 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004442 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.014581 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002944 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008891 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006112 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003568 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012223 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004541 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004164 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002759 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002205 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002898 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002021 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001815 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002145 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002158 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002017 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002646 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002623 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002189 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001964 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001584 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001709 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001769 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001898 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001669 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001581 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001561 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001751 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001691 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001686 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001623 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001917 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00202 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001571 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.065418 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003232 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002056 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001834 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002039 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001877 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001575 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001498 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00148 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001445 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001558 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001663 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001468 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002158 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001617 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001617 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001759 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002067 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001613 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001482 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001649 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002208 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001971 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001695 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001625 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001632 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001868 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001933 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001804 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001731 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.0016 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001708 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001761 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001688 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001689 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001778 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001786 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002452 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001899 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00165 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001627 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001679 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002045 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001843 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002503 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002611 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001955 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001776 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001813 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001694 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00153 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001645 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.0023 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001738 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001569 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001647 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001868 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00156 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001463 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001454 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001724 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002995 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.003326 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002542 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002239 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001666 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001469 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00148 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001504 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001962 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001908 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001696 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001674 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001719 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001582 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00161 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00167 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001556 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002137 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001719 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001689 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002249 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001713 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00162 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001556 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001686 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001879 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002125 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002772 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001997 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001852 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001694 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001699 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001628 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001527 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001802 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001872 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002399 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001916 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001642 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001739 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001735 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001591 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00147 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001502 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001956 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002387 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001946 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001827 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009543 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002619 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002171 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002372 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001812 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001781 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002105 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001915 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001844 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00195 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002694 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00258 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001825 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001619 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001665 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001803 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002099 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002049 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001984 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001993 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00199 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001854 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001855 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001885 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001937 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002993 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001799 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001838 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00178 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001984 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001862 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002431 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002209 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001873 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002006 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002488 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001923 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001667 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002383 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00188 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001691 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001718 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001677 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001835 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001907 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00177 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002221 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.node_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001891 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00195 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001924 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.object_id)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001905 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.object_id, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00189 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002044 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.name)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002193 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.name, n.content_type)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002127 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.path)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001762 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR ()-[r:USES]->() ON (r.mandatorily)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.001915 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR ()-[r:HAS_COMMAND]->() ON (r.deprecated, r.description)
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002113 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE CONSTRAINT cmd_unique_object_id IF NOT EXISTS FOR (n:Command) REQUIRE n.object_id IS UNIQUE
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - common.py:138 - Took 0.002901 seconds
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): storage.googleapis.com:443
[2023-10-31T17:42:07] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://storage.googleapis.com:443 "GET /marketplace-dist-dev/content_graph/xsoar.zip HTTP/1.1" 200 1960871
[2023-10-31T17:42:08] - [MainThread] - [INFO] - import_utils.py:29 - Importing from /tmp/tmpdk_ero9y
[2023-10-31T17:42:08] - [MainThread] - [INFO] - neo4j_graph.py:599 - Importing graph from GraphML files...
[2023-10-31T17:42:08] - [MainThread] - [DEBUG] - common.py:136 - Running query:
DROP CONSTRAINT cmd_unique_object_id IF EXISTS
[2023-10-31T17:42:08] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008808 seconds
[2023-10-31T17:42:08] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CALL apoc.import.graphml("file:/content.graphml", {readLabels: true})
[2023-10-31T17:42:08] - [MainThread] - [DEBUG] - common.py:138 - Took 0.054257 seconds
[2023-10-31T17:42:13] - [MainThread] - [DEBUG] - common.py:136 - Running query:
// Merges possible duplicate command nodes after import
MATCH (c:Command)
WITH c.object_id as object_id, collect(c) as cmds
CALL apoc.refactor.mergeNodes(cmds, {properties: "combine", mergeRels: true}) YIELD node
RETURN node
[2023-10-31T17:42:13] - [MainThread] - [DEBUG] - common.py:138 - Took 0.040972 seconds
[2023-10-31T17:42:13] - [MainThread] - [DEBUG] - common.py:136 - Running query:
// Merges possible duplicate content item nodes after import
MATCH (n:BaseContent{not_in_repository: true})
MATCH (m:BaseContent{content_type: n.content_type})
WHERE ((m.object_id = n.object_id AND m.object_id <> "") OR (m.name = n.name AND m.name <> ""))
AND m.not_in_repository = false
WITH m, n
CALL apoc.refactor.mergeNodes([m, n], {properties: "discard", mergeRels: true}) YIELD node
RETURN node
[2023-10-31T17:42:13] - [MainThread] - [DEBUG] - common.py:138 - Took 0.115614 seconds
[2023-10-31T17:42:16] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE CONSTRAINT cmd_unique_object_id IF NOT EXISTS FOR (n:Command) REQUIRE n.object_id IS UNIQUE
[2023-10-31T17:42:16] - [MainThread] - [DEBUG] - common.py:138 - Took 0.066627 seconds
[2023-10-31T17:42:16] - [MainThread] - [DEBUG] - common.py:136 - Running query:
// Removes string properties with empty values ("") from nodes
CALL apoc.periodic.iterate(
    "MATCH (n) RETURN n",
    "WITH n, [key in keys(n) WHERE n[key] = '' | [key, null]] as nullifiers
    WHERE size(nullifiers) <> 0
    WITH n, apoc.map.fromPairs(nullifiers) as nullifyMap
    SET n += nullifyMap",
    {batchSize:30000, parallel:true, iterateList:true}
);
[2023-10-31T17:42:16] - [MainThread] - [DEBUG] - common.py:138 - Took 0.02848 seconds
[2023-10-31T17:42:16] - [MainThread] - [DEBUG] - graph.py:81 - Content parser hash: fa5f88a3901b6e70087ba00ae96e70d2e08270c6
[2023-10-31T17:42:16] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'fetch', '-v', '--', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=True)
[2023-10-31T17:42:17] - [MainThread] - [WARNING] - common.py:17 - Failed to build content graph, retrying with a clean environment.
[2023-10-31T17:42:17] - [MainThread] - [DEBUG] - docker_helper.py:59 - init and login the docker client
[2023-10-31T17:42:17] - [MainThread] - [DEBUG] - docker_helper.py:62 -  - Using docker mounting: True
[2023-10-31T17:42:17] - [MainThread] - [DEBUG] - config.py:21 - Trying paths: ['/home/talg/.docker/config.json', '/home/talg/.dockercfg']
[2023-10-31T17:42:17] - [MainThread] - [DEBUG] - config.py:25 - Found file at path: /home/talg/.docker/config.json
[2023-10-31T17:42:17] - [MainThread] - [DEBUG] - auth.py:180 - Found 'auths' section
[2023-10-31T17:42:17] - [MainThread] - [DEBUG] - auth.py:132 - Auth data for https://index.docker.io/v1/ is absent. Client might be using a credentials store instead.
[2023-10-31T17:42:17] - [MainThread] - [DEBUG] - auth.py:187 - Found 'credsStore' section
[2023-10-31T17:42:17] - [MainThread] - [DEBUG] - connectionpool.py:456 - http://localhost:None "GET /version HTTP/1.1" 200 None
[2023-10-31T17:42:17] - [MainThread] - [DEBUG] - connectionpool.py:456 - http://localhost:None "GET /v1.43/containers/neo4j-content/json HTTP/1.1" 200 None
[2023-10-31T17:42:24] - [MainThread] - [DEBUG] - connectionpool.py:456 - http://localhost:None "POST /v1.43/containers/12209df65da1dab25f85636ca501ff492206075f403a85cfedee77985e7a9c34/stop HTTP/1.1" 204 0
[2023-10-31T17:42:24] - [MainThread] - [DEBUG] - connectionpool.py:456 - http://localhost:None "DELETE /v1.43/containers/12209df65da1dab25f85636ca501ff492206075f403a85cfedee77985e7a9c34?v=False&link=False&force=True HTTP/1.1" 204 0
[2023-10-31T17:42:24] - [MainThread] - [DEBUG] - connectionpool.py:228 - Starting new HTTP connection (1): 127.0.0.1:7474
[2023-10-31T17:42:24] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): neo4j.github.io:443
[2023-10-31T17:42:24] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://neo4j.github.io:443 "GET /apoc/versions.json HTTP/1.1" 200 1953
[2023-10-31T17:42:24] - [MainThread] - [INFO] - neo4j_service.py:79 - Downloading APOC plugin, please wait...
[2023-10-31T17:42:24] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): github.com:443
[2023-10-31T17:42:25] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://github.com:443 "GET /neo4j/apoc/releases/download/5.5.0/apoc-5.5.0-core.jar HTTP/1.1" 302 0
[2023-10-31T17:42:25] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): objects.githubusercontent.com:443
[2023-10-31T17:42:25] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://objects.githubusercontent.com:443 "GET /github-production-release-asset-2e65be/525054099/ec532705-680a-40a8-9a00-594c01cbe5b0?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20231031%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20231031T154224Z&X-Amz-Expires=300&X-Amz-Signature=4319be546d411b9043fb00f67fca93eefaad8db0c346766d950db8bb1c347c68&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=525054099&response-content-disposition=attachment%3B%20filename%3Dapoc-5.5.0-core.jar&response-content-type=application%2Foctet-stream HTTP/1.1" 200 15336290
[2023-10-31T17:42:27] - [MainThread] - [DEBUG] - neo4j_service.py:88 - Starting neo4j service
[2023-10-31T17:42:27] - [MainThread] - [DEBUG] - docker_helper.py:83 - docker client already available, using current DOCKER_CLIENT
[2023-10-31T17:42:27] - [MainThread] - [DEBUG] - connectionpool.py:456 - http://localhost:None "GET /v1.43/containers/neo4j-content/json HTTP/1.1" 404 None
[2023-10-31T17:42:27] - [MainThread] - [DEBUG] - neo4j_service.py:49 - Could not remove neo4j container: 404 Client Error for http+docker://localhost/v1.43/containers/neo4j-content/json: Not Found ("No such container: neo4j-content")
[2023-10-31T17:42:27] - [MainThread] - [DEBUG] - connectionpool.py:456 - http://localhost:None "POST /v1.43/containers/create?name=neo4j-content HTTP/1.1" 201 None
[2023-10-31T17:42:27] - [MainThread] - [DEBUG] - connectionpool.py:456 - http://localhost:None "GET /v1.43/containers/130f647d9facbdb530dcd7ddc345b5636f7cbd3fb14861adb041befda31e8c21/json HTTP/1.1" 200 None
[2023-10-31T17:42:28] - [MainThread] - [DEBUG] - connectionpool.py:456 - http://localhost:None "POST /v1.43/containers/130f647d9facbdb530dcd7ddc345b5636f7cbd3fb14861adb041befda31e8c21/start HTTP/1.1" 204 0
[2023-10-31T17:42:28] - [MainThread] - [DEBUG] - neo4j_service.py:124 - Neo4j service started successfully
[2023-10-31T17:42:28] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'cat-file', '--batch-check'], cwd=/home/talg/XSOAR/content-cyberint, stdin=<valid stream>, shell=False, universal_newlines=False)
[2023-10-31T17:42:28] - [MainThread] - [DEBUG] - graph.py:81 - Content parser hash: fa5f88a3901b6e70087ba00ae96e70d2e08270c6
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
// Deletes all graph nodes and relationships
MATCH (n)
DETACH DELETE n
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.116979 seconds
[2023-10-31T17:42:44] - [MainThread] - [INFO] - neo4j_graph.py:342 - Creating graph indexes and constraints...
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.045055 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.node_id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012281 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010849 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.marketplaces)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010922 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.object_id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012251 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.object_id, n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008886 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.01295 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.name)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00969 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.name, n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008744 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:BaseContent) ON (n.path)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012328 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010211 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.node_id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007569 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007311 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.marketplaces)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006824 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.object_id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007367 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.object_id, n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007339 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008541 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.name)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006734 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.name, n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008707 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Classifier) ON (n.path)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006877 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.021253 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.node_id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007456 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006952 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.marketplaces)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.017159 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.object_id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006828 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.object_id, n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006889 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008382 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.name)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007532 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.name, n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012407 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CommandOrScript) ON (n.path)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009083 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.023413 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.node_id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007661 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.0085 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.marketplaces)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008571 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.object_id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006735 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.object_id, n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007759 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.01511 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.name)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009427 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.name, n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008152 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Connection) ON (n.path)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007269 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.017669 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.node_id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.017689 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.018884 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.marketplaces)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009859 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.object_id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009497 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.object_id, n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011067 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.014517 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.name)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007518 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.name, n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008639 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:CorrelationRule) ON (n.path)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005972 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.020227 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.node_id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00687 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006655 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.marketplaces)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006549 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.object_id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006434 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.object_id, n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008058 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009401 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.name)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006983 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.name, n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.019198 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Dashboard) ON (n.path)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006911 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.017992 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.node_id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005739 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005357 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.marketplaces)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007224 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.object_id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00616 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.object_id, n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010707 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008838 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.name)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006915 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.name, n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006538 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericDefinition) ON (n.path)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00661 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.021456 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.node_id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006453 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006171 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.marketplaces)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005657 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.object_id)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005782 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.object_id, n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006007 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007277 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.name)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006275 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.name, n.content_type)
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005737 seconds
[2023-10-31T17:42:44] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericField) ON (n.path)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006399 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008187 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.node_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006636 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006431 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006496 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.object_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006578 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.object_id, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012806 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.013516 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.name)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007509 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.name, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010266 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericModule) ON (n.path)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00586 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.01874 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.node_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006476 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008397 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.013284 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.object_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008265 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.object_id, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010988 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008617 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.name)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011148 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.name, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012555 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:GenericType) ON (n.path)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012632 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.028561 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.node_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00592 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011765 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011728 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.object_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005782 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.object_id, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005771 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008776 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.name)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.013431 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.name, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009994 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentField) ON (n.path)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.026476 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.017991 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.node_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006215 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005042 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.015159 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.object_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009113 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.object_id, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005239 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005478 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.name)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004793 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.name, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010403 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IncidentType) ON (n.path)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005617 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.018473 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.node_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007974 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012476 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011489 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.object_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009117 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.object_id, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006336 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005548 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.name)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004977 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.name, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005402 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorField) ON (n.path)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005133 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.018005 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.node_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006194 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006066 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004918 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.object_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005803 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.object_id, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006818 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007284 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.name)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005499 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.name, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.016299 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:IndicatorType) ON (n.path)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005311 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007733 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.node_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00478 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004918 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006357 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.object_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005202 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.object_id, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006877 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006531 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.name)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006783 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.name, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006924 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Integration) ON (n.path)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004769 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007228 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.node_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004985 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004729 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004622 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.object_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005003 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.object_id, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004876 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005418 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.name)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004684 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.name, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004343 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Job) ON (n.path)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00487 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007423 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.node_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004638 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004907 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006748 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.object_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004853 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.object_id, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005737 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005735 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.name)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005381 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.name, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005603 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Layout) ON (n.path)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005858 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007746 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.node_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006299 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005885 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006435 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.object_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005945 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.object_id, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006196 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008324 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.name)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007064 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.name, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006886 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:List) ON (n.path)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005683 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008046 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.node_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006022 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005933 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006148 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.object_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006213 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.object_id, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00695 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011241 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.name)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006674 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.name, n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006987 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Mapper) ON (n.path)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.015024 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.035677 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.node_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.016859 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.content_type)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012049 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.marketplaces)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005756 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.object_id)
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008485 seconds
[2023-10-31T17:42:45] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.object_id, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006881 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006457 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.name)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006303 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.name, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005886 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ModelingRule) ON (n.path)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005586 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011013 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.node_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005146 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005538 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004444 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.object_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004467 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.object_id, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005311 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005541 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.name)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004806 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.name, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006422 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Pack) ON (n.path)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005195 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00846 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.node_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005195 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004969 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008958 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.object_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.object_id, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005793 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00604 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.name)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007908 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.name, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005998 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:ParsingRule) ON (n.path)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004836 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007719 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.node_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005519 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006483 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005366 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.object_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005269 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.object_id, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005411 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006821 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.name)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008864 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.name, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007731 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Playbook) ON (n.path)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006808 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.014418 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.node_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005134 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006846 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005211 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.object_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005003 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.object_id, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005052 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005391 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.name)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005709 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.name, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005888 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:PreProcessRule) ON (n.path)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005615 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00868 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.node_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005088 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004861 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006813 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.object_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004776 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.object_id, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005016 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005925 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.name)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004702 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.name, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004833 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Report) ON (n.path)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004997 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006888 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.node_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005508 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004925 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00535 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.object_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00784 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.object_id, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.010837 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00595 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.name)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00473 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.name, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005196 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Script) ON (n.path)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005271 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006972 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.node_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005638 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004421 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004753 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.object_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005877 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.object_id, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004912 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005144 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.name)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004934 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.name, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004724 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:TestPlaybook) ON (n.path)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004446 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007016 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.node_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004606 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004498 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004738 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.object_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004382 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.object_id, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004879 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005434 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.name)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004874 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.name, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004978 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Trigger) ON (n.path)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004932 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006996 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.node_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004537 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005139 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004804 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.object_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004543 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.object_id, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005052 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00517 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.name)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004571 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.name, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004917 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Widget) ON (n.path)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.012121 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00696 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.node_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005012 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00468 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004953 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.object_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004397 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.object_id, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004799 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005724 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.name)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004361 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.name, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00458 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMDashboard) ON (n.path)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005369 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007089 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.node_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005789 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006376 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004869 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.object_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004865 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.object_id, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005094 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005239 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.name)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004772 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.name, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004976 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XSIAMReport) ON (n.path)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004594 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006868 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.node_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00468 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004694 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005141 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.object_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005865 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.object_id, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006227 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.009301 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.name)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005526 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.name, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005976 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:Wizard) ON (n.path)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005651 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007066 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.node_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004965 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004687 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005121 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.object_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005031 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.object_id, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004878 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006377 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.name)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.0052 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.name, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005308 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:XDRCTemplate) ON (n.path)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.007319 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.008186 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.node_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006095 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005471 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005403 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.object_id)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006203 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.object_id, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006421 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.object_id, n.content_type, n.fromversion, n.marketplaces)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005793 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.name)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.004972 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.name, n.content_type)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.006399 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR (n:LayoutRule) ON (n.path)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.005575 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR ()-[r:USES]->() ON (r.mandatorily)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.014595 seconds
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE INDEX IF NOT EXISTS FOR ()-[r:HAS_COMMAND]->() ON (r.deprecated, r.description)
[2023-10-31T17:42:46] - [MainThread] - [DEBUG] - common.py:138 - Took 0.011593 seconds
[2023-10-31T17:42:49] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE CONSTRAINT cmd_unique_object_id IF NOT EXISTS FOR (n:Command) REQUIRE n.object_id IS UNIQUE
[2023-10-31T17:42:49] - [MainThread] - [DEBUG] - common.py:138 - Took 0.04163 seconds
[2023-10-31T17:42:49] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): storage.googleapis.com:443
[2023-10-31T17:42:50] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://storage.googleapis.com:443 "GET /marketplace-dist-dev/content_graph/xsoar.zip HTTP/1.1" 200 1960871
[2023-10-31T17:42:50] - [MainThread] - [INFO] - import_utils.py:29 - Importing from /tmp/tmp0lh9xdpu
[2023-10-31T17:42:50] - [MainThread] - [INFO] - neo4j_graph.py:599 - Importing graph from GraphML files...
[2023-10-31T17:42:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
DROP CONSTRAINT cmd_unique_object_id IF EXISTS
[2023-10-31T17:42:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.00978 seconds
[2023-10-31T17:42:50] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CALL apoc.import.graphml("file:/content.graphml", {readLabels: true})
[2023-10-31T17:42:50] - [MainThread] - [DEBUG] - common.py:138 - Took 0.074748 seconds
[2023-10-31T17:42:59] - [MainThread] - [DEBUG] - common.py:136 - Running query:
// Merges possible duplicate command nodes after import
MATCH (c:Command)
WITH c.object_id as object_id, collect(c) as cmds
CALL apoc.refactor.mergeNodes(cmds, {properties: "combine", mergeRels: true}) YIELD node
RETURN node
[2023-10-31T17:42:59] - [MainThread] - [DEBUG] - common.py:138 - Took 0.247555 seconds
[2023-10-31T17:43:00] - [MainThread] - [DEBUG] - common.py:136 - Running query:
// Merges possible duplicate content item nodes after import
MATCH (n:BaseContent{not_in_repository: true})
MATCH (m:BaseContent{content_type: n.content_type})
WHERE ((m.object_id = n.object_id AND m.object_id <> "") OR (m.name = n.name AND m.name <> ""))
AND m.not_in_repository = false
WITH m, n
CALL apoc.refactor.mergeNodes([m, n], {properties: "discard", mergeRels: true}) YIELD node
RETURN node
[2023-10-31T17:43:00] - [MainThread] - [DEBUG] - common.py:138 - Took 0.320265 seconds
[2023-10-31T17:43:03] - [MainThread] - [DEBUG] - common.py:136 - Running query:
CREATE CONSTRAINT cmd_unique_object_id IF NOT EXISTS FOR (n:Command) REQUIRE n.object_id IS UNIQUE
[2023-10-31T17:43:03] - [MainThread] - [DEBUG] - common.py:138 - Took 0.190308 seconds
[2023-10-31T17:43:03] - [MainThread] - [DEBUG] - common.py:136 - Running query:
// Removes string properties with empty values ("") from nodes
CALL apoc.periodic.iterate(
    "MATCH (n) RETURN n",
    "WITH n, [key in keys(n) WHERE n[key] = '' | [key, null]] as nullifiers
    WHERE size(nullifiers) <> 0
    WITH n, apoc.map.fromPairs(nullifiers) as nullifyMap
    SET n += nullifyMap",
    {batchSize:30000, parallel:true, iterateList:true}
);
[2023-10-31T17:43:03] - [MainThread] - [DEBUG] - common.py:138 - Took 0.05011 seconds
[2023-10-31T17:43:04] - [MainThread] - [DEBUG] - graph.py:81 - Content parser hash: fa5f88a3901b6e70087ba00ae96e70d2e08270c6
[2023-10-31T17:43:04] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'fetch', '-v', '--', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=True)
[2023-10-31T17:43:04] - [MainThread] - [WARNING] - format_module.py:214 - Error updating content graph. Will not format using the graph.
[2023-10-31T17:43:04] - [MainThread] - [DEBUG] - format_module.py:217 - Error encountered when updating content graph: SHA b'771ca328d1859f44b8acc063f219f539b7435692' could not be resolved, git returned: b'771ca328d1859f44b8acc063f219f539b7435692 missing'
[2023-10-31T17:43:04] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-10-31T17:43:04] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'rev-parse', '--show-toplevel'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-10-31T17:43:04] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'show', 'origin/master:Classifiers/classifier-mapper-incoming-CyberInt.json'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-10-31T17:43:04] - [MainThread] - [DEBUG] - tools.py:603 - Could not get local remote file because of: Cmd('git') failed due to: exit code(128)
  cmdline: git show origin/master:Classifiers/classifier-mapper-incoming-CyberInt.json
  stderr: 'fatal: Invalid object name 'origin/master'.'
Searching the remote file content with the API.
Traceback (most recent call last):
  File "/home/talg/.local/lib/python3.10/site-packages/demisto_sdk/commands/common/tools.py", line 594, in get_remote_file
    local_origin_content := get_local_remote_file(
  File "/home/talg/.local/lib/python3.10/site-packages/demisto_sdk/commands/common/tools.py", line 449, in get_local_remote_file
    file_content = repo_git_util.get_local_remote_file_content(git_path)
  File "/home/talg/.local/lib/python3.10/site-packages/demisto_sdk/commands/common/git_util.py", line 773, in get_local_remote_file_content
    file_content = self.repo.git.show(git_file_path)
  File "/home/talg/.local/lib/python3.10/site-packages/git/cmd.py", line 736, in <lambda>
    return lambda *args, **kwargs: self._call_process(name, *args, **kwargs)
  File "/home/talg/.local/lib/python3.10/site-packages/git/cmd.py", line 1316, in _call_process
    return self.execute(call, **exec_kwargs)
  File "/home/talg/.local/lib/python3.10/site-packages/git/cmd.py", line 1111, in execute
    raise GitCommandError(redacted_command, status, stderr_value, stdout_value)
git.exc.GitCommandError: Cmd('git') failed due to: exit code(128)
  cmdline: git show origin/master:Classifiers/classifier-mapper-incoming-CyberInt.json
  stderr: 'fatal: Invalid object name 'origin/master'.'
[2023-10-31T17:43:04] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-10-31T17:43:04] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): api.github.com:443
[2023-10-31T17:43:05] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://api.github.com:443 "GET /repos/qmasters-ltd/content-cyberint HTTP/1.1" 404 None
[2023-10-31T17:43:05] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): api.github.com:443
[2023-10-31T17:43:05] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://api.github.com:443 "GET /repos/qmasters-ltd/content-cyberint?token= HTTP/1.1" 404 108
[2023-10-31T17:43:05] - [MainThread] - [DEBUG] - git_content_config.py:292 - Could not access GitHub api in `_search_github_repo`. status code=404, reason=Not Found
[2023-10-31T17:43:05] - [MainThread] - [INFO] - git_content_config.py:234 - Could not find the repository name on gitlab - defaulting to demisto/content
[2023-10-31T17:43:05] - [MainThread] - [INFO] - git_content_config.py:237 - If you are using a private gitlab repo, configure one of the following environment variables: `DEMISTO_SDK_GITLAB_TOKEN`,`DEMISTO_SDK_REPO_HOSTNAME`
[2023-10-31T17:43:05] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): raw.githubusercontent.com:443
[2023-10-31T17:43:05] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://raw.githubusercontent.com:443 "GET /demisto/content/master/Classifiers/classifier-mapper-incoming-CyberInt.json HTTP/1.1" 404 14
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): raw.githubusercontent.com:443
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://raw.githubusercontent.com:443 "GET /demisto/content/master/Classifiers/classifier-mapper-incoming-CyberInt.json?token= HTTP/1.1" 404 14
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - tools.py:532 - Could not find the old entity file under "https://raw.githubusercontent.com/demisto/content/master/Classifiers/classifier-mapper-incoming-CyberInt.json".
please make sure that you did not break backward compatibility.
Reason: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/demisto/content/master/Classifiers/classifier-mapper-incoming-CyberInt.json?token=
[2023-10-31T17:43:06] - [MainThread] - [INFO] - update_mapper.py:46 - 
================= Updating file /home/talg/XSOAR/content-cyberint/Classifiers/classifier-mapper-incoming-CyberInt.json =================
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic_json.py:154 - Updating json ID and name to be without spaces at the end
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic.py:158 - Removing Unnecessary fields from file
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic.py:242 - Removing nameRaw field
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic.py:242 - Removing unclassifiedCases field
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic.py:242 - Removing keyTypeMap field
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic.py:242 - Removing locked field
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic.py:242 - Removing brands field
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic.py:242 - Removing itemVersion field
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic.py:242 - Removing system field
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic.py:242 - Removing transformer field
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic.py:242 - Removing indicatorSamples field
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic.py:242 - Removing packName field
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic.py:242 - Removing cacheVersn field
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic.py:242 - Removing toServerVersion field
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic.py:242 - Removing sourceClassifierId field
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic.py:242 - Removing fromServerVersion field
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic.py:242 - Removing incidentSamples field
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic.py:242 - Removing instanceIds field
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic.py:242 - Removing packID field
[2023-10-31T17:43:06] - [MainThread] - [DEBUG] - update_generic.py:242 - Removing logicalVersion field
[2023-10-31T17:43:06] - [MainThread] - [INFO] - update_generic.py:146 - 
[2023-10-31T17:43:06] - [MainThread] - [INFO] - update_generic.py:350 - Setting fromVersion field
[2023-10-31T17:43:06] - [MainThread] - [INFO] - update_generic.py:324 - default_from_version='', GENERAL_DEFAULT_FROMVERSION='6.10.0', current_fromversion_value=''
[2023-10-31T17:43:06] - [MainThread] - [INFO] - update_generic.py:285 - Either no fromversion is specified in your file, or it is lower than the minimal fromversion for this content type.Would you like to set it to the default? [Y/n]
[2023-10-31T17:43:09] - [MainThread] - [DEBUG] - update_generic_json.py:137 - Updating ID to be the same as JSON name
[2023-10-31T17:43:09] - [MainThread] - [INFO] - update_mapper.py:82 - Skipping formatting of non-existent-fields for /home/talg/XSOAR/content-cyberint/Classifiers/classifier-mapper-incoming-CyberInt.json as the no-graph argument was given.
[2023-10-31T17:43:09] - [MainThread] - [INFO] - format_module.py:291 - 
[2023-10-31T17:43:09] - [MainThread] - [INFO] - format_module.py:294 - Format Status   on file: /home/talg/XSOAR/content-cyberint/Classifiers/classifier-mapper-incoming-CyberInt.json - Success
[2023-10-31T17:43:09] - [MainThread] - [INFO] - format_module.py:294 - Validate Status on file: /home/talg/XSOAR/content-cyberint/Classifiers/classifier-mapper-incoming-CyberInt.json - Skipped
[2023-11-23T11:18:55] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T11:18:55] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T11:18:55] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T11:18:55] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-11-23T11:18:55] - [MainThread] - [DEBUG] - connectionpool.py:1019 - Starting new HTTPS connection (1): pypi.org:443
[2023-11-23T11:18:55] - [MainThread] - [DEBUG] - connectionpool.py:474 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 42701
[2023-11-23T11:18:55] - [MainThread] - [INFO] - __main__.py:228 - You are using demisto-sdk 1.21.0.
[2023-11-23T11:18:55] - [MainThread] - [INFO] - __main__.py:230 - however version 1.23.0 is available.
To update, run pip3 install --upgrade demisto-sdk
[2023-11-23T11:18:55] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T11:18:55] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T11:18:55] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T11:18:55] - [MainThread] - [DEBUG] - tools.py:3784 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-11-23T11:19:20] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T11:19:20] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T11:19:20] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T11:19:20] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-11-23T11:19:20] - [MainThread] - [DEBUG] - connectionpool.py:1019 - Starting new HTTPS connection (1): pypi.org:443
[2023-11-23T11:19:21] - [MainThread] - [DEBUG] - connectionpool.py:474 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 42701
[2023-11-23T11:19:21] - [MainThread] - [INFO] - __main__.py:228 - You are using demisto-sdk 1.21.0.
[2023-11-23T11:19:21] - [MainThread] - [INFO] - __main__.py:230 - however version 1.23.0 is available.
To update, run pip3 install --upgrade demisto-sdk
[2023-11-23T11:19:21] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T11:19:21] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T11:19:21] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T11:19:21] - [MainThread] - [DEBUG] - tools.py:3784 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-11-23T11:19:21] - [MainThread] - [INFO] - uploader.py:210 - Uploading /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml to https://192.168.30.206...
[2023-11-23T11:19:21] - [MainThread] - [DEBUG] - base_content.py:169 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:19:21] - [MainThread] - [DEBUG] - content_item.py:98 - Parsing content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:19:21] - [MainThread] - [DEBUG] - content_item.py:137 - Parsed Integration:Cyberint Feed
[2023-11-23T11:19:21] - [MainThread] - [DEBUG] - base_content.py:204 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml as <class 'demisto_sdk.commands.content_graph.objects.integration.Integration'>
[2023-11-23T11:19:21] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:19:21] - [MainThread] - [DEBUG] - content_item.py:194 - preparing /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:19:21] - [MainThread] - [DEBUG] - integration_script_unifier.py:76 - Unifying /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:19:21] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-11-23T11:19:21] - [MainThread] - [WARNING] - integration_script_unifier.py:207 - Failed getting image data for '/home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint'.
[2023-11-23T11:19:21] - [MainThread] - [INFO] - integration_script_unifier.py:650 - Did not find README in /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint, not adding integration doc link
[2023-11-23T11:19:21] - [MainThread] - [DEBUG] - integration_script_unifier.py:132 - Created unified yml: FeedCyberint.yml
[2023-11-23T11:19:21] - [MainThread] - [DEBUG] - integration_script.py:64 - The docker_native_image_config.json file could not be found.
[2023-11-23T11:19:21] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:19:22] - [MainThread] - [DEBUG] - tools.py:39 - got the following response when uploading Integration /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml: {'beta': None,
 'brand': '',
 'can_get_samples': True,
 'category': 'Data Enrichment & Threat Intelligence',
 'cmdline': None,
 'commit_message': '',
 'configuration': [{'default_value': 'true',
                    'display': 'Fetch indicators',
                    'hidden': False,
                    'info': '',
                    'name': 'feed',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': 'Good',
                    'display': 'Indicator Reputation',
                    'hidden': False,
                    'info': 'Indicators from this integration instance will be '
                            'marked with this reputation',
                    'name': 'feedReputation',
                    'options': ['None', 'Good', 'Suspicious', 'Bad'],
                    'required': False,
                    'type': 18},
                   {'default_value': 'F - Reliability cannot be judged',
                    'display': 'Source Reliability',
                    'hidden': False,
                    'info': 'Reliability of the source providing the '
                            'intelligence data',
                    'name': 'feedReliability',
                    'options': ['A - Completely reliable',
                                'B - Usually reliable',
                                'C - Fairly reliable',
                                'D - Not usually reliable',
                                'E - Unreliable',
                                'F - Reliability cannot be judged'],
                    'required': True,
                    'type': 15},
                   {'default_value': '',
                    'display': 'Traffic Light Protocol Color',
                    'hidden': False,
                    'info': 'The Traffic Light Protocol (TLP) designation to '
                            'apply to indicators fetched from the feed',
                    'name': 'tlp_color',
                    'options': ['RED', 'AMBER', 'GREEN', 'WHITE'],
                    'required': False,
                    'type': 15},
                   {'default_value': 'suddenDeath',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationPolicy',
                    'options': ['never',
                                'interval',
                                'indicatorType',
                                'suddenDeath'],
                    'required': False,
                    'type': 17},
                   {'default_value': '20160',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationInterval',
                    'options': None,
                    'required': False,
                    'type': 1},
                   {'default_value': '30',
                    'display': 'Feed Fetch Interval',
                    'hidden': False,
                    'info': '',
                    'name': 'feedFetchInterval',
                    'options': None,
                    'required': False,
                    'type': 19},
                   {'default_value': 'https://qmasters-integration.cyberint.io/ioc/api/v1/feed/daily/',
                    'display': 'The Cyberint IOC feed endpoint URL',
                    'hidden': False,
                    'info': '',
                    'name': 'url',
                    'options': None,
                    'required': True,
                    'type': 0},
                   {'default_value': '',
                    'display': 'Tags',
                    'hidden': False,
                    'info': 'Supports CSV values.',
                    'name': 'feedTags',
                    'options': None,
                    'required': False,
                    'type': 0},
                   {'default_value': 'true',
                    'display': 'Bypass exclusion list',
                    'hidden': False,
                    'info': 'When selected, the exclusion list is ignored for '
                            'indicators from this feed. This means that if an '
                            'indicator from this feed is on the exclusion '
                            'list, the indicator might still be added to the '
                            'system.',
                    'name': 'feedBypassExclusionList',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Trust any certificate (not secure)',
                    'hidden': False,
                    'info': '',
                    'name': 'insecure',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Use system proxy settings',
                    'hidden': False,
                    'info': '',
                    'name': 'proxy',
                    'options': None,
                    'required': False,
                    'type': 8}],
 'deprecated': None,
 'description': 'Use the Cyberint Feed integration to get indicators from the '
                'feed.',
 'detailed_description': '### Partner Contributed Integration\n'
                         '#### Integration Author: Cyberint\n'
                         'Support and maintenance for this integration are '
                         'provided by the author. Please use the following '
                         'contact details:\n'
                         '- **Email**: '
                         '[support@cyberint.com](mailto:support@cyberint.com)\n'
                         '- **URL**: '
                         '[https://cyberint.com](https://cyberint.com)\n'
                         '***\n',
 'display': 'Cyberint Feed (Partner Contribution)',
 'executable': None,
 'hidden': False,
 'hide_engines': None,
 'icon': '',
 'id': 'Cyberint Feed',
 'image': None,
 'integration_script': {'commands': [{'arguments': [{'auto': None,
                                                     'default': False,
                                                     'default_value': '0',
                                                     'deprecated': False,
                                                     'description': 'The '
                                                                    'maximum '
                                                                    'number of '
                                                                    'results '
                                                                    'to '
                                                                    'return. '
                                                                    'The '
                                                                    'default '
                                                                    'value is '
                                                                    '10.',
                                                     'is_array': None,
                                                     'name': 'limit',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False}],
                                      'cartesian': False,
                                      'deprecated': False,
                                      'description': 'Gets indicators from the '
                                                     'feed.',
                                      'execution': False,
                                      'hidden': False,
                                      'important': None,
                                      'name': 'cyberint-get-indicators',
                                      'outputs': None,
                                      'permitted': False,
                                      'sensitive': False,
                                      'timeout': 0}],
                        'docker_image': 'demisto/btfl-soup:1.0.1.45563',
                        'feed': True,
                        'is_fetch': False,
                        'is_fetch_credentials': False,
                        'long_running': False,
                        'long_running_port_mapping': False,
                        'run_once': False,
                        'script': "register_module_line('Cyberint Feed', "
                                  "'start', __line__())\n"
                                  '### pack version: 1.1.3\n'
                                  'import re\n'
                                  'from typing import Any, Callable, Dict, '
                                  'List, Optional, Tuple\n'
                                  '\n'
                                  'import urllib3\n'
                                  'from bs4 import BeautifulSoup\n'
                                  'from Cyberint\n'
                                  'from Cyberint.CommonServerPython import *\n'
                                  '\n'
                                  '# disable insecure warnings\n'
                                  'urllib3.disable_warnings()\n'
                                  '\n'
                                  'INTEGRATION_NAME = "Microsoft Intune Feed"\n'
                                  '\n'
                                  '\n'
                                  'class Client(BaseClient):\n'
                                  '    """\n'
                                  '    Client to use in the Microsoft Intune '
                                  'Feed integration. Overrides BaseClient.\n'
                                  '    """\n'
                                  '\n'
                                  '    def __init__(self, base_url: str, '
                                  'verify: bool = False, proxy: bool = False, '
                                  'tlp_color: Optional[str] = None):\n'
                                  '        """\n'
                                  '        Implements class for Microsoft '
                                  'Intune feeds.\n'
                                  '        :param url: the Intune endpoint '
                                  'URL\n'
                                  '        :verify: boolean, if *false* feed '
                                  'HTTPS server certificate is verified. '
                                  'Default: *false*\n'
                                  '        :param proxy: boolean, if *false* '
                                  'feed HTTPS server certificate will not use '
                                  'proxies. Default: *false*\n'
                                  '        :param tlp_color: Traffic Light '
                                  'Protocol color.\n'
                                  '        """\n'
                                  '        super().__init__(base_url, '
                                  'verify=verify, proxy=proxy)\n'
                                  '        self.tlp_color = tlp_color\n'
                                  '\n'
                                  '    def build_iterator(self) -> List:\n'
                                  '        """Retrieves all entries from the '
                                  'feed.\n'
                                  '\n'
                                  '        Returns:\n'
                                  '            A list of objects, containing '
                                  'the indicators.\n'
                                  '        """\n'
                                  '        result = []  # type: list\n'
                                  '        domains = []  # type: list\n'
                                  '        ipv4s = []  # type: list\n'
                                  '        ipv4cidrs = []  # type: list\n'
                                  '        r = self._http_request("GET", '
                                  'url_suffix="", full_url=self._base_url, '
                                  'resp_type="text")\n'
                                  '\n'
                                  '        soup = BeautifulSoup(r, '
                                  '"html.parser")\n'
                                  '\n'
                                  '        table_rows = soup.select("tbody '
                                  'tr")\n'
                                  '        for row in table_rows:\n'
                                  '            found_domains = [\n'
                                  '                string.strip()\n'
                                  '                for string in row.strings\n'
                                  '                if re.search(\n'
                                  '                    '
                                  'r"(microsoft\\.(com|net))|"\n'
                                  '                    '
                                  'r"microsoftonline\\.com|"\n'
                                  '                    '
                                  'r"officeconfig\\.msocdn\\.com|"\n'
                                  '                    '
                                  'r"config\\.office\\.com|"\n'
                                  '                    '
                                  'r"graph\\.windows\\.net",\n'
                                  '                    string,\n'
                                  '                )\n'
                                  '            ]\n'
                                  '            if found_domains:\n'
                                  '                domains += found_domains\n'
                                  '                for string in row.strings:\n'
                                  '                    string = '
                                  'string.strip()\n'
                                  '                    if '
                                  're.match(ipv4cidrRegex, string):\n'
                                  '                        '
                                  'ipv4cidrs.append(string)\n'
                                  '                    elif '
                                  're.match(ipv4Regex, string):\n'
                                  '                        '
                                  'ipv4s.append(string)\n'
                                  '\n'
                                  '        for domain in domains:\n'
                                  '            result.append(\n'
                                  '                {\n'
                                  '                    "value": domain,\n'
                                  '                    "type": '
                                  'FeedIndicatorType.DomainGlob if "*" in '
                                  'domain else FeedIndicatorType.Domain,\n'
                                  '                    "FeedURL": '
                                  'self._base_url,\n'
                                  '                }\n'
                                  '            )\n'
                                  '        for ipv4 in ipv4s:\n'
                                  '            result.append({"value": ipv4, '
                                  '"type": FeedIndicatorType.IP, "FeedURL": '
                                  'self._base_url})\n'
                                  '        for cidr in ipv4cidrs:\n'
                                  '            result.append({"value": cidr, '
                                  '"type": FeedIndicatorType.CIDR, "FeedURL": '
                                  'self._base_url})\n'
                                  '\n'
                                  '        return result\n'
                                  '\n'
                                  '\n'
                                  'def test_module(client: Client, *_) -> '
                                  'Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Builds the iterator to check that '
                                  'the feed is accessible.\n'
                                  '    Args:\n'
                                  '        client: Client object.\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    client.build_iterator()\n'
                                  '    return "ok", {}, {}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators(client: Client, '
                                  'feed_tags: List = [], limit: int = -1) -> '
                                  'List[Dict]:\n'
                                  '    """Retrieves indicators from the feed\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client (Client): Client object with '
                                  'request\n'
                                  '        feed_tags (list): tags to assign '
                                  'fetched indicators\n'
                                  '        limit (int): limit the results\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    iterator = client.build_iterator()\n'
                                  '    indicators = []\n'
                                  '    if limit > 0:\n'
                                  '        iterator = iterator[:limit]\n'
                                  '    for item in iterator:\n'
                                  '        value = item.get("value")\n'
                                  '        type_ = item.get("type", '
                                  'FeedIndicatorType.Domain)\n'
                                  '        raw_data = {\n'
                                  '            "value": value,\n'
                                  '            "type": type_,\n'
                                  '        }\n'
                                  '        for key, val in item.items():\n'
                                  '            raw_data.update({key: val})\n'
                                  '        indicator_obj = {"value": value, '
                                  '"type": type_, "rawJSON": raw_data, '
                                  '"fields": {}}\n'
                                  '        if feed_tags:\n'
                                  '            indicator_obj["fields"]["tags"] '
                                  '= feed_tags\n'
                                  '        if client.tlp_color:\n'
                                  '            '
                                  'indicator_obj["fields"]["trafficlightprotocol"] '
                                  '= client.tlp_color\n'
                                  '\n'
                                  '        indicators.append(indicator_obj)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def get_indicators_command(\n'
                                  '    client: Client, params: Dict[str, str], '
                                  'args: Dict[str, str]\n'
                                  ') -> Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Wrapper for retrieving indicators '
                                  'from the feed to the war-room.\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '        args: demisto.args()\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    limit = int(args.get("limit", "10"))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'feed_tags, limit)\n'
                                  '    human_readable = tableToMarkdown(\n'
                                  '        "Indicators from Microsoft Intune '
                                  'Feed:", indicators, headers=["value", '
                                  '"type"], removeNull=True\n'
                                  '    )\n'
                                  '\n'
                                  '    return human_readable, {}, '
                                  '{"raw_response": indicators}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators_command(client: '
                                  'Client, params: Dict[str, str]) -> '
                                  'List[Dict]:\n'
                                  '    """Wrapper for fetching indicators from '
                                  'the feed to the Indicators tab.\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'feed_tags)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def main():\n'
                                  '    """\n'
                                  '    PARSE AND VALIDATE INTEGRATION PARAMS\n'
                                  '    """\n'
                                  '    params = demisto.params()\n'
                                  '    base_url = params.get("url")\n'
                                  '    insecure = not params.get("insecure", '
                                  'False)\n'
                                  '    proxy = params.get("proxy", False)\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '\n'
                                  '    command = demisto.command()\n'
                                  '    demisto.info(f"Command being called is '
                                  '{command}")\n'
                                  '\n'
                                  '    try:\n'
                                  '        client = Client(base_url=base_url, '
                                  'verify=insecure, proxy=proxy, '
                                  'tlp_color=tlp_color)\n'
                                  '\n'
                                  '        commands: Dict[\n'
                                  '            str, Callable[[Client, '
                                  'Dict[str, str], Dict[str, str]], Tuple[str, '
                                  'Dict[Any, Any], Dict[Any, Any]]]\n'
                                  '        ] = {"test-module": test_module, '
                                  '"cyberint-get-indicators": '
                                  'get_indicators_command}\n'
                                  '        if command in commands:\n'
                                  '            '
                                  'return_outputs(*commands[command](client, '
                                  'demisto.params(), demisto.args()))\n'
                                  '\n'
                                  '        elif command == '
                                  '"fetch-indicators":\n'
                                  '            indicators = '
                                  'fetch_indicators_command(client, '
                                  'demisto.params())\n'
                                  '            for iter_ in batch(indicators, '
                                  'batch_size=2000):\n'
                                  '                '
                                  'demisto.createIndicators(iter_)\n'
                                  '\n'
                                  '        else:\n'
                                  '            raise '
                                  'NotImplementedError(f"Command {command} is '
                                  'not implemented.")\n'
                                  '\n'
                                  '    except Exception as err:\n'
                                  '        err_msg = f"Error in '
                                  '{INTEGRATION_NAME} Integration. [{err}]"\n'
                                  '        return_error(err_msg)\n'
                                  '\n'
                                  '\n'
                                  'if __name__ in ["__main__", "builtin", '
                                  '"builtins"]:\n'
                                  '    main()\n'
                                  '\n'
                                  "register_module_line('Cyberint Feed', "
                                  "'end', __line__())\n",
                        'subtype': 'python3',
                        'type': 'python'},
 'is_password_protected': None,
 'locked': None,
 'modified': datetime.datetime(2023, 11, 23, 11, 19, 21, 123969, tzinfo=tzoffset(None, 7200)),
 'name': 'Cyberint Feed',
 'path': None,
 'prev_name': 'Cyberint Feed',
 'propagation_labels': ['all'],
 'readonly': None,
 'script_not_visible': None,
 'should_commit': False,
 'sort_values': None,
 'source_module_id': None,
 'system': None,
 'vc_should_ignore': False,
 'version': 1}
[2023-11-23T11:19:22] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:19:22] - [MainThread] - [DEBUG] - uploader.py:287 - Uploaded Integration integration-FeedCyberint.yml successfully
[2023-11-23T11:19:22] - [MainThread] - [INFO] - uploader.py:389 - UPLOAD SUMMARY:

[2023-11-23T11:19:22] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:19:22] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:19:22] - [MainThread] - [INFO] - uploader.py:422 - SUCCESSFUL UPLOADS:
╒══════════════════╤═════════════╤═════════════╤════════════════╕
│ NAME             │ TYPE        │ PACK NAME   │ PACK VERSION   │
╞══════════════════╪═════════════╪═════════════╪════════════════╡
│ FeedCyberint.yml │ Integration │             │                │
╘══════════════════╧═════════════╧═════════════╧════════════════╛

[2023-11-23T11:21:50] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T11:21:50] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T11:21:50] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T11:21:50] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-11-23T11:21:50] - [MainThread] - [DEBUG] - connectionpool.py:1019 - Starting new HTTPS connection (1): pypi.org:443
[2023-11-23T11:21:50] - [MainThread] - [DEBUG] - connectionpool.py:474 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 42701
[2023-11-23T11:21:51] - [MainThread] - [INFO] - __main__.py:228 - You are using demisto-sdk 1.21.0.
[2023-11-23T11:21:51] - [MainThread] - [INFO] - __main__.py:230 - however version 1.23.0 is available.
To update, run pip3 install --upgrade demisto-sdk
[2023-11-23T11:21:51] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T11:21:51] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T11:21:51] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T11:21:51] - [MainThread] - [DEBUG] - tools.py:3784 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-11-23T11:21:51] - [MainThread] - [INFO] - uploader.py:210 - Uploading /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml to https://192.168.30.206...
[2023-11-23T11:21:51] - [MainThread] - [DEBUG] - base_content.py:169 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:21:51] - [MainThread] - [DEBUG] - content_item.py:98 - Parsing content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:21:51] - [MainThread] - [DEBUG] - content_item.py:137 - Parsed Integration:Cyberint Feed
[2023-11-23T11:21:51] - [MainThread] - [DEBUG] - base_content.py:204 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml as <class 'demisto_sdk.commands.content_graph.objects.integration.Integration'>
[2023-11-23T11:21:51] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:21:51] - [MainThread] - [DEBUG] - content_item.py:194 - preparing /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:21:51] - [MainThread] - [DEBUG] - integration_script_unifier.py:76 - Unifying /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:21:51] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-11-23T11:21:51] - [MainThread] - [WARNING] - integration_script_unifier.py:207 - Failed getting image data for '/home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint'.
[2023-11-23T11:21:51] - [MainThread] - [INFO] - integration_script_unifier.py:650 - Did not find README in /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint, not adding integration doc link
[2023-11-23T11:21:51] - [MainThread] - [DEBUG] - integration_script_unifier.py:132 - Created unified yml: FeedCyberint.yml
[2023-11-23T11:21:51] - [MainThread] - [DEBUG] - integration_script.py:64 - The docker_native_image_config.json file could not be found.
[2023-11-23T11:21:51] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:21:52] - [MainThread] - [DEBUG] - tools.py:39 - got the following response when uploading Integration /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml: {'beta': None,
 'brand': '',
 'can_get_samples': True,
 'category': 'Data Enrichment & Threat Intelligence',
 'cmdline': None,
 'commit_message': '',
 'configuration': [{'default_value': 'true',
                    'display': 'Fetch indicators',
                    'hidden': False,
                    'info': '',
                    'name': 'feed',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': 'Good',
                    'display': 'Indicator Reputation',
                    'hidden': False,
                    'info': 'Indicators from this integration instance will be '
                            'marked with this reputation',
                    'name': 'feedReputation',
                    'options': ['None', 'Good', 'Suspicious', 'Bad'],
                    'required': False,
                    'type': 18},
                   {'default_value': 'F - Reliability cannot be judged',
                    'display': 'Source Reliability',
                    'hidden': False,
                    'info': 'Reliability of the source providing the '
                            'intelligence data',
                    'name': 'feedReliability',
                    'options': ['A - Completely reliable',
                                'B - Usually reliable',
                                'C - Fairly reliable',
                                'D - Not usually reliable',
                                'E - Unreliable',
                                'F - Reliability cannot be judged'],
                    'required': True,
                    'type': 15},
                   {'default_value': '',
                    'display': 'Traffic Light Protocol Color',
                    'hidden': False,
                    'info': 'The Traffic Light Protocol (TLP) designation to '
                            'apply to indicators fetched from the feed',
                    'name': 'tlp_color',
                    'options': ['RED', 'AMBER', 'GREEN', 'WHITE'],
                    'required': False,
                    'type': 15},
                   {'default_value': 'suddenDeath',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationPolicy',
                    'options': ['never',
                                'interval',
                                'indicatorType',
                                'suddenDeath'],
                    'required': False,
                    'type': 17},
                   {'default_value': '20160',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationInterval',
                    'options': None,
                    'required': False,
                    'type': 1},
                   {'default_value': '30',
                    'display': 'Feed Fetch Interval',
                    'hidden': False,
                    'info': '',
                    'name': 'feedFetchInterval',
                    'options': None,
                    'required': False,
                    'type': 19},
                   {'default_value': 'https://qmasters-integration.cyberint.io/ioc/api/v1/feed/daily/',
                    'display': 'The Cyberint IOC feed endpoint URL',
                    'hidden': False,
                    'info': '',
                    'name': 'url',
                    'options': None,
                    'required': True,
                    'type': 0},
                   {'default_value': '',
                    'display': 'Tags',
                    'hidden': False,
                    'info': 'Supports CSV values.',
                    'name': 'feedTags',
                    'options': None,
                    'required': False,
                    'type': 0},
                   {'default_value': 'true',
                    'display': 'Bypass exclusion list',
                    'hidden': False,
                    'info': 'When selected, the exclusion list is ignored for '
                            'indicators from this feed. This means that if an '
                            'indicator from this feed is on the exclusion '
                            'list, the indicator might still be added to the '
                            'system.',
                    'name': 'feedBypassExclusionList',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Trust any certificate (not secure)',
                    'hidden': False,
                    'info': '',
                    'name': 'insecure',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Use system proxy settings',
                    'hidden': False,
                    'info': '',
                    'name': 'proxy',
                    'options': None,
                    'required': False,
                    'type': 8}],
 'deprecated': None,
 'description': 'Use the Cyberint Feed integration to get indicators from the '
                'feed.',
 'detailed_description': '### Partner Contributed Integration\n'
                         '#### Integration Author: Cyberint\n'
                         'Support and maintenance for this integration are '
                         'provided by the author. Please use the following '
                         'contact details:\n'
                         '- **Email**: '
                         '[support@cyberint.com](mailto:support@cyberint.com)\n'
                         '- **URL**: '
                         '[https://cyberint.com](https://cyberint.com)\n'
                         '***\n',
 'display': 'Cyberint Feed (Partner Contribution)',
 'executable': None,
 'hidden': False,
 'hide_engines': None,
 'icon': '',
 'id': 'Cyberint Feed',
 'image': None,
 'integration_script': {'commands': [{'arguments': [{'auto': None,
                                                     'default': False,
                                                     'default_value': '0',
                                                     'deprecated': False,
                                                     'description': 'The '
                                                                    'maximum '
                                                                    'number of '
                                                                    'results '
                                                                    'to '
                                                                    'return. '
                                                                    'The '
                                                                    'default '
                                                                    'value is '
                                                                    '10.',
                                                     'is_array': None,
                                                     'name': 'limit',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False}],
                                      'cartesian': False,
                                      'deprecated': False,
                                      'description': 'Gets indicators from the '
                                                     'feed.',
                                      'execution': False,
                                      'hidden': False,
                                      'important': None,
                                      'name': 'cyberint-get-indicators',
                                      'outputs': None,
                                      'permitted': False,
                                      'sensitive': False,
                                      'timeout': 0}],
                        'docker_image': 'demisto/btfl-soup:1.0.1.45563',
                        'feed': True,
                        'is_fetch': False,
                        'is_fetch_credentials': False,
                        'long_running': False,
                        'long_running_port_mapping': False,
                        'run_once': False,
                        'script': "register_module_line('Cyberint Feed', "
                                  "'start', __line__())\n"
                                  '### pack version: 1.1.3\n'
                                  'import re\n'
                                  'from typing import Any, Callable, Dict, '
                                  'List, Optional, Tuple\n'
                                  '\n'
                                  'import urllib3\n'
                                  'from bs4 import BeautifulSoup\n'
                                  'from Cyberint\n'
                                  'from Cyberint.CommonServerPython import *\n'
                                  '\n'
                                  '# disable insecure warnings\n'
                                  'urllib3.disable_warnings()\n'
                                  '\n'
                                  'INTEGRATION_NAME = "Microsoft Intune Feed"\n'
                                  '\n'
                                  '\n'
                                  'class Client(BaseClient):\n'
                                  '    """\n'
                                  '    Client to use in the Microsoft Intune '
                                  'Feed integration. Overrides BaseClient.\n'
                                  '    """\n'
                                  '\n'
                                  '    def __init__(self, base_url: str, '
                                  'verify: bool = False, proxy: bool = False, '
                                  'tlp_color: Optional[str] = None):\n'
                                  '        """\n'
                                  '        Implements class for Microsoft '
                                  'Intune feeds.\n'
                                  '        :param url: the Intune endpoint '
                                  'URL\n'
                                  '        :verify: boolean, if *false* feed '
                                  'HTTPS server certificate is verified. '
                                  'Default: *false*\n'
                                  '        :param proxy: boolean, if *false* '
                                  'feed HTTPS server certificate will not use '
                                  'proxies. Default: *false*\n'
                                  '        :param tlp_color: Traffic Light '
                                  'Protocol color.\n'
                                  '        """\n'
                                  '        super().__init__(base_url, '
                                  'verify=verify, proxy=proxy)\n'
                                  '        self.tlp_color = tlp_color\n'
                                  '\n'
                                  '    def build_iterator(self, date_time: str '
                                  '= None) -> List:\n'
                                  '        """Retrieves all entries from the '
                                  'feed.\n'
                                  '\n'
                                  '        Returns:\n'
                                  '            A list of objects, containing '
                                  'the indicators.\n'
                                  '        """\n'
                                  '        result = []  # type: list\n'
                                  '        domains = []  # type: list\n'
                                  '        ipv4s = []  # type: list\n'
                                  '        ipv4cidrs = []  # type: list\n'
                                  '        date_time = "2023-11-23"\n'
                                  '        r = self._http_request("GET", '
                                  'url_suffix=date_time, '
                                  'full_url=self._base_url, resp_type="text")\n'
                                  '\n'
                                  '        soup = BeautifulSoup(r, '
                                  '"html.parser")\n'
                                  '\n'
                                  '        table_rows = soup.select("tbody '
                                  'tr")\n'
                                  '        for row in table_rows:\n'
                                  '            found_domains = [\n'
                                  '                string.strip()\n'
                                  '                for string in row.strings\n'
                                  '                if re.search(\n'
                                  '                    '
                                  'r"(microsoft\\.(com|net))|"\n'
                                  '                    '
                                  'r"microsoftonline\\.com|"\n'
                                  '                    '
                                  'r"officeconfig\\.msocdn\\.com|"\n'
                                  '                    '
                                  'r"config\\.office\\.com|"\n'
                                  '                    '
                                  'r"graph\\.windows\\.net",\n'
                                  '                    string,\n'
                                  '                )\n'
                                  '            ]\n'
                                  '            if found_domains:\n'
                                  '                domains += found_domains\n'
                                  '                for string in row.strings:\n'
                                  '                    string = '
                                  'string.strip()\n'
                                  '                    if '
                                  're.match(ipv4cidrRegex, string):\n'
                                  '                        '
                                  'ipv4cidrs.append(string)\n'
                                  '                    elif '
                                  're.match(ipv4Regex, string):\n'
                                  '                        '
                                  'ipv4s.append(string)\n'
                                  '\n'
                                  '        for domain in domains:\n'
                                  '            result.append(\n'
                                  '                {\n'
                                  '                    "value": domain,\n'
                                  '                    "type": '
                                  'FeedIndicatorType.DomainGlob if "*" in '
                                  'domain else FeedIndicatorType.Domain,\n'
                                  '                    "FeedURL": '
                                  'self._base_url,\n'
                                  '                }\n'
                                  '            )\n'
                                  '        for ipv4 in ipv4s:\n'
                                  '            result.append({"value": ipv4, '
                                  '"type": FeedIndicatorType.IP, "FeedURL": '
                                  'self._base_url})\n'
                                  '        for cidr in ipv4cidrs:\n'
                                  '            result.append({"value": cidr, '
                                  '"type": FeedIndicatorType.CIDR, "FeedURL": '
                                  'self._base_url})\n'
                                  '\n'
                                  '        return result\n'
                                  '\n'
                                  '\n'
                                  'def test_module(client: Client, *_) -> '
                                  'Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Builds the iterator to check that '
                                  'the feed is accessible.\n'
                                  '    Args:\n'
                                  '        client: Client object.\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    client.build_iterator()\n'
                                  '    return "ok", {}, {}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators(client: Client, '
                                  'feed_tags: List = [], limit: int = -1) -> '
                                  'List[Dict]:\n'
                                  '    """Retrieves indicators from the feed\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client (Client): Client object with '
                                  'request\n'
                                  '        feed_tags (list): tags to assign '
                                  'fetched indicators\n'
                                  '        limit (int): limit the results\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    iterator = client.build_iterator()\n'
                                  '    indicators = []\n'
                                  '    if limit > 0:\n'
                                  '        iterator = iterator[:limit]\n'
                                  '    for item in iterator:\n'
                                  '        value = item.get("value")\n'
                                  '        type_ = item.get("type", '
                                  'FeedIndicatorType.Domain)\n'
                                  '        raw_data = {\n'
                                  '            "value": value,\n'
                                  '            "type": type_,\n'
                                  '        }\n'
                                  '        for key, val in item.items():\n'
                                  '            raw_data.update({key: val})\n'
                                  '        indicator_obj = {"value": value, '
                                  '"type": type_, "rawJSON": raw_data, '
                                  '"fields": {}}\n'
                                  '        if feed_tags:\n'
                                  '            indicator_obj["fields"]["tags"] '
                                  '= feed_tags\n'
                                  '        if client.tlp_color:\n'
                                  '            '
                                  'indicator_obj["fields"]["trafficlightprotocol"] '
                                  '= client.tlp_color\n'
                                  '\n'
                                  '        indicators.append(indicator_obj)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def get_indicators_command(\n'
                                  '    client: Client, params: Dict[str, str], '
                                  'args: Dict[str, str]\n'
                                  ') -> Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Wrapper for retrieving indicators '
                                  'from the feed to the war-room.\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '        args: demisto.args()\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    limit = int(args.get("limit", "10"))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'feed_tags, limit)\n'
                                  '    human_readable = tableToMarkdown(\n'
                                  '        "Indicators from Microsoft Intune '
                                  'Feed:", indicators, headers=["value", '
                                  '"type"], removeNull=True\n'
                                  '    )\n'
                                  '\n'
                                  '    return human_readable, {}, '
                                  '{"raw_response": indicators}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators_command(client: '
                                  'Client, params: Dict[str, str]) -> '
                                  'List[Dict]:\n'
                                  '    """Wrapper for fetching indicators from '
                                  'the feed to the Indicators tab.\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'feed_tags)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def main():\n'
                                  '    """\n'
                                  '    PARSE AND VALIDATE INTEGRATION PARAMS\n'
                                  '    """\n'
                                  '    params = demisto.params()\n'
                                  '    base_url = params.get("url")\n'
                                  '    insecure = not params.get("insecure", '
                                  'False)\n'
                                  '    proxy = params.get("proxy", False)\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '\n'
                                  '    command = demisto.command()\n'
                                  '    demisto.info(f"Command being called is '
                                  '{command}")\n'
                                  '\n'
                                  '    try:\n'
                                  '        client = Client(base_url=base_url, '
                                  'verify=insecure, proxy=proxy, '
                                  'tlp_color=tlp_color)\n'
                                  '\n'
                                  '        commands: Dict[\n'
                                  '            str, Callable[[Client, '
                                  'Dict[str, str], Dict[str, str]], Tuple[str, '
                                  'Dict[Any, Any], Dict[Any, Any]]]\n'
                                  '        ] = {"test-module": test_module, '
                                  '"cyberint-get-indicators": '
                                  'get_indicators_command}\n'
                                  '        if command in commands:\n'
                                  '            '
                                  'return_outputs(*commands[command](client, '
                                  'demisto.params(), demisto.args()))\n'
                                  '\n'
                                  '        elif command == '
                                  '"fetch-indicators":\n'
                                  '            indicators = '
                                  'fetch_indicators_command(client, '
                                  'demisto.params())\n'
                                  '            for iter_ in batch(indicators, '
                                  'batch_size=2000):\n'
                                  '                '
                                  'demisto.createIndicators(iter_)\n'
                                  '\n'
                                  '        else:\n'
                                  '            raise '
                                  'NotImplementedError(f"Command {command} is '
                                  'not implemented.")\n'
                                  '\n'
                                  '    except Exception as err:\n'
                                  '        err_msg = f"Error in '
                                  '{INTEGRATION_NAME} Integration. [{err}]"\n'
                                  '        return_error(err_msg)\n'
                                  '\n'
                                  '\n'
                                  'if __name__ in ["__main__", "builtin", '
                                  '"builtins"]:\n'
                                  '    main()\n'
                                  '\n'
                                  "register_module_line('Cyberint Feed', "
                                  "'end', __line__())\n",
                        'subtype': 'python3',
                        'type': 'python'},
 'is_password_protected': None,
 'locked': None,
 'modified': datetime.datetime(2023, 11, 23, 11, 21, 50, 907349, tzinfo=tzoffset(None, 7200)),
 'name': 'Cyberint Feed',
 'path': None,
 'prev_name': 'Cyberint Feed',
 'propagation_labels': ['all'],
 'readonly': None,
 'script_not_visible': None,
 'should_commit': False,
 'sort_values': None,
 'source_module_id': None,
 'system': None,
 'vc_should_ignore': False,
 'version': 2}
[2023-11-23T11:21:52] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:21:52] - [MainThread] - [DEBUG] - uploader.py:287 - Uploaded Integration integration-FeedCyberint.yml successfully
[2023-11-23T11:21:52] - [MainThread] - [INFO] - uploader.py:389 - UPLOAD SUMMARY:

[2023-11-23T11:21:52] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:21:52] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:21:52] - [MainThread] - [INFO] - uploader.py:422 - SUCCESSFUL UPLOADS:
╒══════════════════╤═════════════╤═════════════╤════════════════╕
│ NAME             │ TYPE        │ PACK NAME   │ PACK VERSION   │
╞══════════════════╪═════════════╪═════════════╪════════════════╡
│ FeedCyberint.yml │ Integration │             │                │
╘══════════════════╧═════════════╧═════════════╧════════════════╛

[2023-11-23T11:28:44] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T11:28:44] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T11:28:44] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T11:28:44] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-11-23T11:28:44] - [MainThread] - [DEBUG] - connectionpool.py:1019 - Starting new HTTPS connection (1): pypi.org:443
[2023-11-23T11:28:44] - [MainThread] - [DEBUG] - connectionpool.py:474 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 42701
[2023-11-23T11:28:45] - [MainThread] - [INFO] - __main__.py:228 - You are using demisto-sdk 1.21.0.
[2023-11-23T11:28:45] - [MainThread] - [INFO] - __main__.py:230 - however version 1.23.0 is available.
To update, run pip3 install --upgrade demisto-sdk
[2023-11-23T11:28:45] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T11:28:45] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T11:28:45] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T11:28:45] - [MainThread] - [DEBUG] - tools.py:3784 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-11-23T11:28:45] - [MainThread] - [INFO] - uploader.py:210 - Uploading /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml to https://192.168.30.206...
[2023-11-23T11:28:45] - [MainThread] - [DEBUG] - base_content.py:169 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:28:45] - [MainThread] - [DEBUG] - content_item.py:98 - Parsing content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:28:45] - [MainThread] - [DEBUG] - content_item.py:137 - Parsed Integration:Cyberint Feed
[2023-11-23T11:28:45] - [MainThread] - [DEBUG] - base_content.py:204 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml as <class 'demisto_sdk.commands.content_graph.objects.integration.Integration'>
[2023-11-23T11:28:45] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:28:45] - [MainThread] - [DEBUG] - content_item.py:194 - preparing /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:28:45] - [MainThread] - [DEBUG] - integration_script_unifier.py:76 - Unifying /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:28:45] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-11-23T11:28:45] - [MainThread] - [WARNING] - integration_script_unifier.py:207 - Failed getting image data for '/home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint'.
[2023-11-23T11:28:45] - [MainThread] - [INFO] - integration_script_unifier.py:650 - Did not find README in /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint, not adding integration doc link
[2023-11-23T11:28:45] - [MainThread] - [DEBUG] - integration_script_unifier.py:132 - Created unified yml: FeedCyberint.yml
[2023-11-23T11:28:45] - [MainThread] - [DEBUG] - integration_script.py:64 - The docker_native_image_config.json file could not be found.
[2023-11-23T11:28:45] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:28:46] - [MainThread] - [DEBUG] - tools.py:39 - got the following response when uploading Integration /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml: {'beta': None,
 'brand': '',
 'can_get_samples': True,
 'category': 'Data Enrichment & Threat Intelligence',
 'cmdline': None,
 'commit_message': '',
 'configuration': [{'default_value': 'https://qmasters-integration.cyberint.io/ioc/api/v1/feed/daily/',
                    'display': 'The Cyberint IOC feed endpoint URL',
                    'hidden': False,
                    'info': '',
                    'name': 'url',
                    'options': None,
                    'required': True,
                    'type': 0},
                   {'default_value': '',
                    'display': 'API Key (Leave empty. Fill in the API Key in '
                               'the password field.)',
                    'hidden': False,
                    'info': '',
                    'name': 'access_token',
                    'options': None,
                    'required': False,
                    'type': 9},
                   {'default_value': 'true',
                    'display': 'Fetch indicators',
                    'hidden': False,
                    'info': '',
                    'name': 'feed',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': 'Good',
                    'display': 'Indicator Reputation',
                    'hidden': False,
                    'info': 'Indicators from this integration instance will be '
                            'marked with this reputation',
                    'name': 'feedReputation',
                    'options': ['None', 'Good', 'Suspicious', 'Bad'],
                    'required': False,
                    'type': 18},
                   {'default_value': 'F - Reliability cannot be judged',
                    'display': 'Source Reliability',
                    'hidden': False,
                    'info': 'Reliability of the source providing the '
                            'intelligence data',
                    'name': 'feedReliability',
                    'options': ['A - Completely reliable',
                                'B - Usually reliable',
                                'C - Fairly reliable',
                                'D - Not usually reliable',
                                'E - Unreliable',
                                'F - Reliability cannot be judged'],
                    'required': True,
                    'type': 15},
                   {'default_value': '',
                    'display': 'Traffic Light Protocol Color',
                    'hidden': False,
                    'info': 'The Traffic Light Protocol (TLP) designation to '
                            'apply to indicators fetched from the feed',
                    'name': 'tlp_color',
                    'options': ['RED', 'AMBER', 'GREEN', 'WHITE'],
                    'required': False,
                    'type': 15},
                   {'default_value': 'suddenDeath',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationPolicy',
                    'options': ['never',
                                'interval',
                                'indicatorType',
                                'suddenDeath'],
                    'required': False,
                    'type': 17},
                   {'default_value': '20160',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationInterval',
                    'options': None,
                    'required': False,
                    'type': 1},
                   {'default_value': '30',
                    'display': 'Feed Fetch Interval',
                    'hidden': False,
                    'info': '',
                    'name': 'feedFetchInterval',
                    'options': None,
                    'required': False,
                    'type': 19},
                   {'default_value': '',
                    'display': 'Tags',
                    'hidden': False,
                    'info': 'Supports CSV values.',
                    'name': 'feedTags',
                    'options': None,
                    'required': False,
                    'type': 0},
                   {'default_value': 'true',
                    'display': 'Bypass exclusion list',
                    'hidden': False,
                    'info': 'When selected, the exclusion list is ignored for '
                            'indicators from this feed. This means that if an '
                            'indicator from this feed is on the exclusion '
                            'list, the indicator might still be added to the '
                            'system.',
                    'name': 'feedBypassExclusionList',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Trust any certificate (not secure)',
                    'hidden': False,
                    'info': '',
                    'name': 'insecure',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Use system proxy settings',
                    'hidden': False,
                    'info': '',
                    'name': 'proxy',
                    'options': None,
                    'required': False,
                    'type': 8}],
 'deprecated': None,
 'description': 'Use the Cyberint Feed integration to get indicators from the '
                'feed.',
 'detailed_description': '### Partner Contributed Integration\n'
                         '#### Integration Author: Cyberint\n'
                         'Support and maintenance for this integration are '
                         'provided by the author. Please use the following '
                         'contact details:\n'
                         '- **Email**: '
                         '[support@cyberint.com](mailto:support@cyberint.com)\n'
                         '- **URL**: '
                         '[https://cyberint.com](https://cyberint.com)\n'
                         '***\n',
 'display': 'Cyberint Feed (Partner Contribution)',
 'executable': None,
 'hidden': False,
 'hide_engines': None,
 'icon': '',
 'id': 'Cyberint Feed',
 'image': None,
 'integration_script': {'commands': [{'arguments': [{'auto': None,
                                                     'default': False,
                                                     'default_value': '0',
                                                     'deprecated': False,
                                                     'description': 'The '
                                                                    'maximum '
                                                                    'number of '
                                                                    'results '
                                                                    'to '
                                                                    'return. '
                                                                    'The '
                                                                    'default '
                                                                    'value is '
                                                                    '10.',
                                                     'is_array': None,
                                                     'name': 'limit',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False}],
                                      'cartesian': False,
                                      'deprecated': False,
                                      'description': 'Gets indicators from the '
                                                     'feed.',
                                      'execution': False,
                                      'hidden': False,
                                      'important': None,
                                      'name': 'cyberint-get-indicators',
                                      'outputs': None,
                                      'permitted': False,
                                      'sensitive': False,
                                      'timeout': 0}],
                        'docker_image': 'demisto/btfl-soup:1.0.1.45563',
                        'feed': True,
                        'is_fetch': False,
                        'is_fetch_credentials': False,
                        'long_running': False,
                        'long_running_port_mapping': False,
                        'run_once': False,
                        'script': "register_module_line('Cyberint Feed', "
                                  "'start', __line__())\n"
                                  '### pack version: 1.1.3\n'
                                  'import re\n'
                                  'from typing import Any, Callable, Dict, '
                                  'List, Optional, Tuple\n'
                                  '\n'
                                  'import urllib3\n'
                                  'from bs4 import BeautifulSoup\n'
                                  'from Cyberint\n'
                                  'from Cyberint.CommonServerPython import *\n'
                                  '\n'
                                  '# disable insecure warnings\n'
                                  'urllib3.disable_warnings()\n'
                                  '\n'
                                  'INTEGRATION_NAME = "Microsoft Intune Feed"\n'
                                  '\n'
                                  '\n'
                                  'class Client(BaseClient):\n'
                                  '    """\n'
                                  '    Client to use in the Microsoft Intune '
                                  'Feed integration. Overrides BaseClient.\n'
                                  '    """\n'
                                  '\n'
                                  '    def __init__(\n'
                                  '        self,\n'
                                  '        base_url: str,\n'
                                  '        access_token: str,\n'
                                  '        verify: bool = False,\n'
                                  '        proxy: bool = False,\n'
                                  '        tlp_color: Optional[str] = None,\n'
                                  '    ):\n'
                                  '        """\n'
                                  '        Implements class for Microsoft '
                                  'Intune feeds.\n'
                                  '        :param url: the Intune endpoint '
                                  'URL\n'
                                  '        :verify: boolean, if *false* feed '
                                  'HTTPS server certificate is verified. '
                                  'Default: *false*\n'
                                  '        :param proxy: boolean, if *false* '
                                  'feed HTTPS server certificate will not use '
                                  'proxies. Default: *false*\n'
                                  '        :param tlp_color: Traffic Light '
                                  'Protocol color.\n'
                                  '        """\n'
                                  '        self._cookies = {"access_token": '
                                  'access_token}\n'
                                  '        super().__init__(base_url, '
                                  'verify=verify, proxy=proxy)\n'
                                  '        self.tlp_color = tlp_color\n'
                                  '\n'
                                  '    def build_iterator(self, date_time: str '
                                  '= None) -> List:\n'
                                  '        """Retrieves all entries from the '
                                  'feed.\n'
                                  '\n'
                                  '        Returns:\n'
                                  '            A list of objects, containing '
                                  'the indicators.\n'
                                  '        """\n'
                                  '        result = []  # type: list\n'
                                  '        domains = []  # type: list\n'
                                  '        ipv4s = []  # type: list\n'
                                  '        ipv4cidrs = []  # type: list\n'
                                  '        date_time = "2023-11-23"\n'
                                  '        r = self._http_request("GET", '
                                  'url_suffix=date_time, '
                                  'full_url=self._base_url, resp_type="text")\n'
                                  '\n'
                                  '        soup = BeautifulSoup(r, '
                                  '"html.parser")\n'
                                  '\n'
                                  '        table_rows = soup.select("tbody '
                                  'tr")\n'
                                  '        for row in table_rows:\n'
                                  '            found_domains = [\n'
                                  '                string.strip()\n'
                                  '                for string in row.strings\n'
                                  '                if re.search(\n'
                                  '                    '
                                  'r"(microsoft\\.(com|net))|"\n'
                                  '                    '
                                  'r"microsoftonline\\.com|"\n'
                                  '                    '
                                  'r"officeconfig\\.msocdn\\.com|"\n'
                                  '                    '
                                  'r"config\\.office\\.com|"\n'
                                  '                    '
                                  'r"graph\\.windows\\.net",\n'
                                  '                    string,\n'
                                  '                )\n'
                                  '            ]\n'
                                  '            if found_domains:\n'
                                  '                domains += found_domains\n'
                                  '                for string in row.strings:\n'
                                  '                    string = '
                                  'string.strip()\n'
                                  '                    if '
                                  're.match(ipv4cidrRegex, string):\n'
                                  '                        '
                                  'ipv4cidrs.append(string)\n'
                                  '                    elif '
                                  're.match(ipv4Regex, string):\n'
                                  '                        '
                                  'ipv4s.append(string)\n'
                                  '\n'
                                  '        for domain in domains:\n'
                                  '            result.append(\n'
                                  '                {\n'
                                  '                    "value": domain,\n'
                                  '                    "type": '
                                  'FeedIndicatorType.DomainGlob if "*" in '
                                  'domain else FeedIndicatorType.Domain,\n'
                                  '                    "FeedURL": '
                                  'self._base_url,\n'
                                  '                }\n'
                                  '            )\n'
                                  '        for ipv4 in ipv4s:\n'
                                  '            result.append({"value": ipv4, '
                                  '"type": FeedIndicatorType.IP, "FeedURL": '
                                  'self._base_url})\n'
                                  '        for cidr in ipv4cidrs:\n'
                                  '            result.append({"value": cidr, '
                                  '"type": FeedIndicatorType.CIDR, "FeedURL": '
                                  'self._base_url})\n'
                                  '\n'
                                  '        return result\n'
                                  '\n'
                                  '\n'
                                  'def test_module(client: Client, *_) -> '
                                  'Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Builds the iterator to check that '
                                  'the feed is accessible.\n'
                                  '    Args:\n'
                                  '        client: Client object.\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    client.build_iterator()\n'
                                  '    return "ok", {}, {}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators(client: Client, '
                                  'feed_tags: List = [], limit: int = -1) -> '
                                  'List[Dict]:\n'
                                  '    """Retrieves indicators from the feed\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client (Client): Client object with '
                                  'request\n'
                                  '        feed_tags (list): tags to assign '
                                  'fetched indicators\n'
                                  '        limit (int): limit the results\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    iterator = client.build_iterator()\n'
                                  '    indicators = []\n'
                                  '    if limit > 0:\n'
                                  '        iterator = iterator[:limit]\n'
                                  '    for item in iterator:\n'
                                  '        value = item.get("value")\n'
                                  '        type_ = item.get("type", '
                                  'FeedIndicatorType.Domain)\n'
                                  '        raw_data = {\n'
                                  '            "value": value,\n'
                                  '            "type": type_,\n'
                                  '        }\n'
                                  '        for key, val in item.items():\n'
                                  '            raw_data.update({key: val})\n'
                                  '        indicator_obj = {"value": value, '
                                  '"type": type_, "rawJSON": raw_data, '
                                  '"fields": {}}\n'
                                  '        if feed_tags:\n'
                                  '            indicator_obj["fields"]["tags"] '
                                  '= feed_tags\n'
                                  '        if client.tlp_color:\n'
                                  '            '
                                  'indicator_obj["fields"]["trafficlightprotocol"] '
                                  '= client.tlp_color\n'
                                  '\n'
                                  '        indicators.append(indicator_obj)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def get_indicators_command(\n'
                                  '    client: Client, params: Dict[str, str], '
                                  'args: Dict[str, str]\n'
                                  ') -> Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Wrapper for retrieving indicators '
                                  'from the feed to the war-room.\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '        args: demisto.args()\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    limit = int(args.get("limit", "10"))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'feed_tags, limit)\n'
                                  '    human_readable = tableToMarkdown(\n'
                                  '        "Indicators from Microsoft Intune '
                                  'Feed:", indicators, headers=["value", '
                                  '"type"], removeNull=True\n'
                                  '    )\n'
                                  '\n'
                                  '    return human_readable, {}, '
                                  '{"raw_response": indicators}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators_command(client: '
                                  'Client, params: Dict[str, str]) -> '
                                  'List[Dict]:\n'
                                  '    """Wrapper for fetching indicators from '
                                  'the feed to the Indicators tab.\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'feed_tags)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def main():\n'
                                  '    """\n'
                                  '    PARSE AND VALIDATE INTEGRATION PARAMS\n'
                                  '    """\n'
                                  '    params = demisto.params()\n'
                                  '    base_url = params.get("url")\n'
                                  '    access_token = '
                                  'params.get("access_token").get("password")\n'
                                  '    insecure = not params.get("insecure", '
                                  'False)\n'
                                  '    proxy = params.get("proxy", False)\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '\n'
                                  '    command = demisto.command()\n'
                                  '    demisto.info(f"Command being called is '
                                  '{command}")\n'
                                  '\n'
                                  '    try:\n'
                                  '        client = Client(base_url=base_url, '
                                  'access_token=access_token, verify=insecure, '
                                  'proxy=proxy, tlp_color=tlp_color)\n'
                                  '\n'
                                  '        commands: Dict[\n'
                                  '            str, Callable[[Client, '
                                  'Dict[str, str], Dict[str, str]], Tuple[str, '
                                  'Dict[Any, Any], Dict[Any, Any]]]\n'
                                  '        ] = {"test-module": test_module, '
                                  '"cyberint-get-indicators": '
                                  'get_indicators_command}\n'
                                  '        if command in commands:\n'
                                  '            '
                                  'return_outputs(*commands[command](client, '
                                  'demisto.params(), demisto.args()))\n'
                                  '\n'
                                  '        elif command == '
                                  '"fetch-indicators":\n'
                                  '            indicators = '
                                  'fetch_indicators_command(client, '
                                  'demisto.params())\n'
                                  '            for iter_ in batch(indicators, '
                                  'batch_size=2000):\n'
                                  '                '
                                  'demisto.createIndicators(iter_)\n'
                                  '\n'
                                  '        else:\n'
                                  '            raise '
                                  'NotImplementedError(f"Command {command} is '
                                  'not implemented.")\n'
                                  '\n'
                                  '    except Exception as err:\n'
                                  '        err_msg = f"Error in '
                                  '{INTEGRATION_NAME} Integration. [{err}]"\n'
                                  '        return_error(err_msg)\n'
                                  '\n'
                                  '\n'
                                  'if __name__ in ["__main__", "builtin", '
                                  '"builtins"]:\n'
                                  '    main()\n'
                                  '\n'
                                  "register_module_line('Cyberint Feed', "
                                  "'end', __line__())\n",
                        'subtype': 'python3',
                        'type': 'python'},
 'is_password_protected': None,
 'locked': None,
 'modified': datetime.datetime(2023, 11, 23, 11, 28, 44, 860593, tzinfo=tzoffset(None, 7200)),
 'name': 'Cyberint Feed',
 'path': None,
 'prev_name': 'Cyberint Feed',
 'propagation_labels': ['all'],
 'readonly': None,
 'script_not_visible': None,
 'should_commit': False,
 'sort_values': None,
 'source_module_id': None,
 'system': None,
 'vc_should_ignore': False,
 'version': 3}
[2023-11-23T11:28:46] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:28:46] - [MainThread] - [DEBUG] - uploader.py:287 - Uploaded Integration integration-FeedCyberint.yml successfully
[2023-11-23T11:28:46] - [MainThread] - [INFO] - uploader.py:389 - UPLOAD SUMMARY:

[2023-11-23T11:28:46] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:28:46] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:28:46] - [MainThread] - [INFO] - uploader.py:422 - SUCCESSFUL UPLOADS:
╒══════════════════╤═════════════╤═════════════╤════════════════╕
│ NAME             │ TYPE        │ PACK NAME   │ PACK VERSION   │
╞══════════════════╪═════════════╪═════════════╪════════════════╡
│ FeedCyberint.yml │ Integration │             │                │
╘══════════════════╧═════════════╧═════════════╧════════════════╛

[2023-11-23T11:29:26] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T11:29:26] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T11:29:26] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T11:29:26] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-11-23T11:29:26] - [MainThread] - [DEBUG] - connectionpool.py:1019 - Starting new HTTPS connection (1): pypi.org:443
[2023-11-23T11:29:26] - [MainThread] - [DEBUG] - connectionpool.py:474 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 42701
[2023-11-23T11:29:26] - [MainThread] - [INFO] - __main__.py:228 - You are using demisto-sdk 1.21.0.
[2023-11-23T11:29:26] - [MainThread] - [INFO] - __main__.py:230 - however version 1.23.0 is available.
To update, run pip3 install --upgrade demisto-sdk
[2023-11-23T11:29:26] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T11:29:26] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T11:29:26] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T11:29:26] - [MainThread] - [DEBUG] - tools.py:3784 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-11-23T11:29:27] - [MainThread] - [INFO] - uploader.py:210 - Uploading /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml to https://192.168.30.206...
[2023-11-23T11:29:27] - [MainThread] - [DEBUG] - base_content.py:169 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:29:27] - [MainThread] - [DEBUG] - content_item.py:98 - Parsing content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:29:27] - [MainThread] - [DEBUG] - content_item.py:137 - Parsed Integration:Cyberint Feed
[2023-11-23T11:29:27] - [MainThread] - [DEBUG] - base_content.py:204 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml as <class 'demisto_sdk.commands.content_graph.objects.integration.Integration'>
[2023-11-23T11:29:27] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:29:27] - [MainThread] - [DEBUG] - content_item.py:194 - preparing /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:29:27] - [MainThread] - [DEBUG] - integration_script_unifier.py:76 - Unifying /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:29:27] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-11-23T11:29:27] - [MainThread] - [WARNING] - integration_script_unifier.py:207 - Failed getting image data for '/home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint'.
[2023-11-23T11:29:27] - [MainThread] - [INFO] - integration_script_unifier.py:650 - Did not find README in /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint, not adding integration doc link
[2023-11-23T11:29:27] - [MainThread] - [DEBUG] - integration_script_unifier.py:132 - Created unified yml: FeedCyberint.yml
[2023-11-23T11:29:27] - [MainThread] - [DEBUG] - integration_script.py:64 - The docker_native_image_config.json file could not be found.
[2023-11-23T11:29:27] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:29:28] - [MainThread] - [DEBUG] - tools.py:39 - got the following response when uploading Integration /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml: {'beta': None,
 'brand': '',
 'can_get_samples': True,
 'category': 'Data Enrichment & Threat Intelligence',
 'cmdline': None,
 'commit_message': '',
 'configuration': [{'default_value': 'https://qmasters-integration.cyberint.io/ioc/api/v1/feed/daily/',
                    'display': 'The Cyberint IOC feed endpoint URL',
                    'hidden': False,
                    'info': '',
                    'name': 'url',
                    'options': None,
                    'required': True,
                    'type': 0},
                   {'default_value': '',
                    'display': 'API Key (Leave empty. Fill in the API Key in '
                               'the password field.)',
                    'hidden': False,
                    'info': '',
                    'name': 'access_token',
                    'options': None,
                    'required': True,
                    'type': 9},
                   {'default_value': 'true',
                    'display': 'Fetch indicators',
                    'hidden': False,
                    'info': '',
                    'name': 'feed',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': 'Good',
                    'display': 'Indicator Reputation',
                    'hidden': False,
                    'info': 'Indicators from this integration instance will be '
                            'marked with this reputation',
                    'name': 'feedReputation',
                    'options': ['None', 'Good', 'Suspicious', 'Bad'],
                    'required': False,
                    'type': 18},
                   {'default_value': 'F - Reliability cannot be judged',
                    'display': 'Source Reliability',
                    'hidden': False,
                    'info': 'Reliability of the source providing the '
                            'intelligence data',
                    'name': 'feedReliability',
                    'options': ['A - Completely reliable',
                                'B - Usually reliable',
                                'C - Fairly reliable',
                                'D - Not usually reliable',
                                'E - Unreliable',
                                'F - Reliability cannot be judged'],
                    'required': True,
                    'type': 15},
                   {'default_value': '',
                    'display': 'Traffic Light Protocol Color',
                    'hidden': False,
                    'info': 'The Traffic Light Protocol (TLP) designation to '
                            'apply to indicators fetched from the feed',
                    'name': 'tlp_color',
                    'options': ['RED', 'AMBER', 'GREEN', 'WHITE'],
                    'required': False,
                    'type': 15},
                   {'default_value': 'suddenDeath',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationPolicy',
                    'options': ['never',
                                'interval',
                                'indicatorType',
                                'suddenDeath'],
                    'required': False,
                    'type': 17},
                   {'default_value': '20160',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationInterval',
                    'options': None,
                    'required': False,
                    'type': 1},
                   {'default_value': '30',
                    'display': 'Feed Fetch Interval',
                    'hidden': False,
                    'info': '',
                    'name': 'feedFetchInterval',
                    'options': None,
                    'required': False,
                    'type': 19},
                   {'default_value': '',
                    'display': 'Tags',
                    'hidden': False,
                    'info': 'Supports CSV values.',
                    'name': 'feedTags',
                    'options': None,
                    'required': False,
                    'type': 0},
                   {'default_value': 'true',
                    'display': 'Bypass exclusion list',
                    'hidden': False,
                    'info': 'When selected, the exclusion list is ignored for '
                            'indicators from this feed. This means that if an '
                            'indicator from this feed is on the exclusion '
                            'list, the indicator might still be added to the '
                            'system.',
                    'name': 'feedBypassExclusionList',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Trust any certificate (not secure)',
                    'hidden': False,
                    'info': '',
                    'name': 'insecure',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Use system proxy settings',
                    'hidden': False,
                    'info': '',
                    'name': 'proxy',
                    'options': None,
                    'required': False,
                    'type': 8}],
 'deprecated': None,
 'description': 'Use the Cyberint Feed integration to get indicators from the '
                'feed.',
 'detailed_description': '### Partner Contributed Integration\n'
                         '#### Integration Author: Cyberint\n'
                         'Support and maintenance for this integration are '
                         'provided by the author. Please use the following '
                         'contact details:\n'
                         '- **Email**: '
                         '[support@cyberint.com](mailto:support@cyberint.com)\n'
                         '- **URL**: '
                         '[https://cyberint.com](https://cyberint.com)\n'
                         '***\n',
 'display': 'Cyberint Feed (Partner Contribution)',
 'executable': None,
 'hidden': False,
 'hide_engines': None,
 'icon': '',
 'id': 'Cyberint Feed',
 'image': None,
 'integration_script': {'commands': [{'arguments': [{'auto': None,
                                                     'default': False,
                                                     'default_value': '0',
                                                     'deprecated': False,
                                                     'description': 'The '
                                                                    'maximum '
                                                                    'number of '
                                                                    'results '
                                                                    'to '
                                                                    'return. '
                                                                    'The '
                                                                    'default '
                                                                    'value is '
                                                                    '10.',
                                                     'is_array': None,
                                                     'name': 'limit',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False}],
                                      'cartesian': False,
                                      'deprecated': False,
                                      'description': 'Gets indicators from the '
                                                     'feed.',
                                      'execution': False,
                                      'hidden': False,
                                      'important': None,
                                      'name': 'cyberint-get-indicators',
                                      'outputs': None,
                                      'permitted': False,
                                      'sensitive': False,
                                      'timeout': 0}],
                        'docker_image': 'demisto/btfl-soup:1.0.1.45563',
                        'feed': True,
                        'is_fetch': False,
                        'is_fetch_credentials': False,
                        'long_running': False,
                        'long_running_port_mapping': False,
                        'run_once': False,
                        'script': "register_module_line('Cyberint Feed', "
                                  "'start', __line__())\n"
                                  '### pack version: 1.1.3\n'
                                  'import re\n'
                                  'from typing import Any, Callable, Dict, '
                                  'List, Optional, Tuple\n'
                                  '\n'
                                  'import urllib3\n'
                                  'from bs4 import BeautifulSoup\n'
                                  'from Cyberint\n'
                                  'from Cyberint.CommonServerPython import *\n'
                                  '\n'
                                  '# disable insecure warnings\n'
                                  'urllib3.disable_warnings()\n'
                                  '\n'
                                  'INTEGRATION_NAME = "Microsoft Intune Feed"\n'
                                  '\n'
                                  '\n'
                                  'class Client(BaseClient):\n'
                                  '    """\n'
                                  '    Client to use in the Microsoft Intune '
                                  'Feed integration. Overrides BaseClient.\n'
                                  '    """\n'
                                  '\n'
                                  '    def __init__(\n'
                                  '        self,\n'
                                  '        base_url: str,\n'
                                  '        access_token: str,\n'
                                  '        verify: bool = False,\n'
                                  '        proxy: bool = False,\n'
                                  '        tlp_color: Optional[str] = None,\n'
                                  '    ):\n'
                                  '        """\n'
                                  '        Implements class for Microsoft '
                                  'Intune feeds.\n'
                                  '        :param url: the Intune endpoint '
                                  'URL\n'
                                  '        :verify: boolean, if *false* feed '
                                  'HTTPS server certificate is verified. '
                                  'Default: *false*\n'
                                  '        :param proxy: boolean, if *false* '
                                  'feed HTTPS server certificate will not use '
                                  'proxies. Default: *false*\n'
                                  '        :param tlp_color: Traffic Light '
                                  'Protocol color.\n'
                                  '        """\n'
                                  '        self._cookies = {"access_token": '
                                  'access_token}\n'
                                  '        super().__init__(base_url, '
                                  'verify=verify, proxy=proxy)\n'
                                  '        self.tlp_color = tlp_color\n'
                                  '\n'
                                  '    def build_iterator(self, date_time: str '
                                  '= None) -> List:\n'
                                  '        """Retrieves all entries from the '
                                  'feed.\n'
                                  '\n'
                                  '        Returns:\n'
                                  '            A list of objects, containing '
                                  'the indicators.\n'
                                  '        """\n'
                                  '        result = []  # type: list\n'
                                  '        domains = []  # type: list\n'
                                  '        ipv4s = []  # type: list\n'
                                  '        ipv4cidrs = []  # type: list\n'
                                  '        date_time = "2023-11-23"\n'
                                  '        r = self._http_request("GET", '
                                  'url_suffix=date_time, '
                                  'full_url=self._base_url, resp_type="text")\n'
                                  '\n'
                                  '        soup = BeautifulSoup(r, '
                                  '"html.parser")\n'
                                  '\n'
                                  '        table_rows = soup.select("tbody '
                                  'tr")\n'
                                  '        for row in table_rows:\n'
                                  '            found_domains = [\n'
                                  '                string.strip()\n'
                                  '                for string in row.strings\n'
                                  '                if re.search(\n'
                                  '                    '
                                  'r"(microsoft\\.(com|net))|"\n'
                                  '                    '
                                  'r"microsoftonline\\.com|"\n'
                                  '                    '
                                  'r"officeconfig\\.msocdn\\.com|"\n'
                                  '                    '
                                  'r"config\\.office\\.com|"\n'
                                  '                    '
                                  'r"graph\\.windows\\.net",\n'
                                  '                    string,\n'
                                  '                )\n'
                                  '            ]\n'
                                  '            if found_domains:\n'
                                  '                domains += found_domains\n'
                                  '                for string in row.strings:\n'
                                  '                    string = '
                                  'string.strip()\n'
                                  '                    if '
                                  're.match(ipv4cidrRegex, string):\n'
                                  '                        '
                                  'ipv4cidrs.append(string)\n'
                                  '                    elif '
                                  're.match(ipv4Regex, string):\n'
                                  '                        '
                                  'ipv4s.append(string)\n'
                                  '\n'
                                  '        for domain in domains:\n'
                                  '            result.append(\n'
                                  '                {\n'
                                  '                    "value": domain,\n'
                                  '                    "type": '
                                  'FeedIndicatorType.DomainGlob if "*" in '
                                  'domain else FeedIndicatorType.Domain,\n'
                                  '                    "FeedURL": '
                                  'self._base_url,\n'
                                  '                }\n'
                                  '            )\n'
                                  '        for ipv4 in ipv4s:\n'
                                  '            result.append({"value": ipv4, '
                                  '"type": FeedIndicatorType.IP, "FeedURL": '
                                  'self._base_url})\n'
                                  '        for cidr in ipv4cidrs:\n'
                                  '            result.append({"value": cidr, '
                                  '"type": FeedIndicatorType.CIDR, "FeedURL": '
                                  'self._base_url})\n'
                                  '\n'
                                  '        return result\n'
                                  '\n'
                                  '\n'
                                  'def test_module(client: Client, *_) -> '
                                  'Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Builds the iterator to check that '
                                  'the feed is accessible.\n'
                                  '    Args:\n'
                                  '        client: Client object.\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    client.build_iterator()\n'
                                  '    return "ok", {}, {}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators(client: Client, '
                                  'feed_tags: List = [], limit: int = -1) -> '
                                  'List[Dict]:\n'
                                  '    """Retrieves indicators from the feed\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client (Client): Client object with '
                                  'request\n'
                                  '        feed_tags (list): tags to assign '
                                  'fetched indicators\n'
                                  '        limit (int): limit the results\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    iterator = client.build_iterator()\n'
                                  '    indicators = []\n'
                                  '    if limit > 0:\n'
                                  '        iterator = iterator[:limit]\n'
                                  '    for item in iterator:\n'
                                  '        value = item.get("value")\n'
                                  '        type_ = item.get("type", '
                                  'FeedIndicatorType.Domain)\n'
                                  '        raw_data = {\n'
                                  '            "value": value,\n'
                                  '            "type": type_,\n'
                                  '        }\n'
                                  '        for key, val in item.items():\n'
                                  '            raw_data.update({key: val})\n'
                                  '        indicator_obj = {"value": value, '
                                  '"type": type_, "rawJSON": raw_data, '
                                  '"fields": {}}\n'
                                  '        if feed_tags:\n'
                                  '            indicator_obj["fields"]["tags"] '
                                  '= feed_tags\n'
                                  '        if client.tlp_color:\n'
                                  '            '
                                  'indicator_obj["fields"]["trafficlightprotocol"] '
                                  '= client.tlp_color\n'
                                  '\n'
                                  '        indicators.append(indicator_obj)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def get_indicators_command(\n'
                                  '    client: Client, params: Dict[str, str], '
                                  'args: Dict[str, str]\n'
                                  ') -> Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Wrapper for retrieving indicators '
                                  'from the feed to the war-room.\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '        args: demisto.args()\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    limit = int(args.get("limit", "10"))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'feed_tags, limit)\n'
                                  '    human_readable = tableToMarkdown(\n'
                                  '        "Indicators from Microsoft Intune '
                                  'Feed:", indicators, headers=["value", '
                                  '"type"], removeNull=True\n'
                                  '    )\n'
                                  '\n'
                                  '    return human_readable, {}, '
                                  '{"raw_response": indicators}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators_command(client: '
                                  'Client, params: Dict[str, str]) -> '
                                  'List[Dict]:\n'
                                  '    """Wrapper for fetching indicators from '
                                  'the feed to the Indicators tab.\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'feed_tags)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def main():\n'
                                  '    """\n'
                                  '    PARSE AND VALIDATE INTEGRATION PARAMS\n'
                                  '    """\n'
                                  '    params = demisto.params()\n'
                                  '    base_url = params.get("url")\n'
                                  '    access_token = '
                                  'params.get("access_token").get("password")\n'
                                  '    insecure = not params.get("insecure", '
                                  'False)\n'
                                  '    proxy = params.get("proxy", False)\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '\n'
                                  '    command = demisto.command()\n'
                                  '    demisto.info(f"Command being called is '
                                  '{command}")\n'
                                  '\n'
                                  '    try:\n'
                                  '        client = Client(base_url=base_url, '
                                  'access_token=access_token, verify=insecure, '
                                  'proxy=proxy, tlp_color=tlp_color)\n'
                                  '\n'
                                  '        commands: Dict[\n'
                                  '            str, Callable[[Client, '
                                  'Dict[str, str], Dict[str, str]], Tuple[str, '
                                  'Dict[Any, Any], Dict[Any, Any]]]\n'
                                  '        ] = {"test-module": test_module, '
                                  '"cyberint-get-indicators": '
                                  'get_indicators_command}\n'
                                  '        if command in commands:\n'
                                  '            '
                                  'return_outputs(*commands[command](client, '
                                  'demisto.params(), demisto.args()))\n'
                                  '\n'
                                  '        elif command == '
                                  '"fetch-indicators":\n'
                                  '            indicators = '
                                  'fetch_indicators_command(client, '
                                  'demisto.params())\n'
                                  '            for iter_ in batch(indicators, '
                                  'batch_size=2000):\n'
                                  '                '
                                  'demisto.createIndicators(iter_)\n'
                                  '\n'
                                  '        else:\n'
                                  '            raise '
                                  'NotImplementedError(f"Command {command} is '
                                  'not implemented.")\n'
                                  '\n'
                                  '    except Exception as err:\n'
                                  '        err_msg = f"Error in '
                                  '{INTEGRATION_NAME} Integration. [{err}]"\n'
                                  '        return_error(err_msg)\n'
                                  '\n'
                                  '\n'
                                  'if __name__ in ["__main__", "builtin", '
                                  '"builtins"]:\n'
                                  '    main()\n'
                                  '\n'
                                  "register_module_line('Cyberint Feed', "
                                  "'end', __line__())\n",
                        'subtype': 'python3',
                        'type': 'python'},
 'is_password_protected': None,
 'locked': None,
 'modified': datetime.datetime(2023, 11, 23, 11, 29, 26, 829034, tzinfo=tzoffset(None, 7200)),
 'name': 'Cyberint Feed',
 'path': None,
 'prev_name': 'Cyberint Feed',
 'propagation_labels': ['all'],
 'readonly': None,
 'script_not_visible': None,
 'should_commit': False,
 'sort_values': None,
 'source_module_id': None,
 'system': None,
 'vc_should_ignore': False,
 'version': 4}
[2023-11-23T11:29:28] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:29:28] - [MainThread] - [DEBUG] - uploader.py:287 - Uploaded Integration integration-FeedCyberint.yml successfully
[2023-11-23T11:29:28] - [MainThread] - [INFO] - uploader.py:389 - UPLOAD SUMMARY:

[2023-11-23T11:29:28] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:29:28] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:29:28] - [MainThread] - [INFO] - uploader.py:422 - SUCCESSFUL UPLOADS:
╒══════════════════╤═════════════╤═════════════╤════════════════╕
│ NAME             │ TYPE        │ PACK NAME   │ PACK VERSION   │
╞══════════════════╪═════════════╪═════════════╪════════════════╡
│ FeedCyberint.yml │ Integration │             │                │
╘══════════════════╧═════════════╧═════════════╧════════════════╛

[2023-11-23T11:32:40] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T11:32:40] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T11:32:40] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T11:32:40] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-11-23T11:32:40] - [MainThread] - [DEBUG] - connectionpool.py:1019 - Starting new HTTPS connection (1): pypi.org:443
[2023-11-23T11:32:40] - [MainThread] - [DEBUG] - connectionpool.py:474 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 42701
[2023-11-23T11:32:40] - [MainThread] - [INFO] - __main__.py:228 - You are using demisto-sdk 1.21.0.
[2023-11-23T11:32:40] - [MainThread] - [INFO] - __main__.py:230 - however version 1.23.0 is available.
To update, run pip3 install --upgrade demisto-sdk
[2023-11-23T11:32:40] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T11:32:40] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T11:32:40] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T11:32:40] - [MainThread] - [DEBUG] - tools.py:3784 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-11-23T11:32:41] - [MainThread] - [INFO] - uploader.py:210 - Uploading /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml to https://192.168.30.206...
[2023-11-23T11:32:41] - [MainThread] - [DEBUG] - base_content.py:169 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:32:41] - [MainThread] - [DEBUG] - content_item.py:98 - Parsing content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:32:41] - [MainThread] - [DEBUG] - content_item.py:137 - Parsed Integration:Cyberint Feed
[2023-11-23T11:32:41] - [MainThread] - [DEBUG] - base_content.py:204 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml as <class 'demisto_sdk.commands.content_graph.objects.integration.Integration'>
[2023-11-23T11:32:41] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:32:41] - [MainThread] - [DEBUG] - content_item.py:194 - preparing /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:32:41] - [MainThread] - [DEBUG] - integration_script_unifier.py:76 - Unifying /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:32:41] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-11-23T11:32:41] - [MainThread] - [WARNING] - integration_script_unifier.py:207 - Failed getting image data for '/home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint'.
[2023-11-23T11:32:41] - [MainThread] - [INFO] - integration_script_unifier.py:650 - Did not find README in /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint, not adding integration doc link
[2023-11-23T11:32:41] - [MainThread] - [DEBUG] - integration_script_unifier.py:132 - Created unified yml: FeedCyberint.yml
[2023-11-23T11:32:41] - [MainThread] - [DEBUG] - integration_script.py:64 - The docker_native_image_config.json file could not be found.
[2023-11-23T11:32:41] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:32:41] - [MainThread] - [DEBUG] - tools.py:39 - got the following response when uploading Integration /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml: {'beta': None,
 'brand': '',
 'can_get_samples': True,
 'category': 'Data Enrichment & Threat Intelligence',
 'cmdline': None,
 'commit_message': '',
 'configuration': [{'default_value': 'https://qmasters-integration.cyberint.io/ioc/api/v1/feed/daily/',
                    'display': 'The Cyberint IOC feed endpoint URL',
                    'hidden': False,
                    'info': '',
                    'name': 'url',
                    'options': None,
                    'required': True,
                    'type': 0},
                   {'default_value': '',
                    'display': 'API Key (Leave empty. Fill in the API Key in '
                               'the password field.)',
                    'hidden': False,
                    'info': '',
                    'name': 'access_token',
                    'options': None,
                    'required': True,
                    'type': 9},
                   {'default_value': 'true',
                    'display': 'Fetch indicators',
                    'hidden': False,
                    'info': '',
                    'name': 'feed',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': 'Good',
                    'display': 'Indicator Reputation',
                    'hidden': False,
                    'info': 'Indicators from this integration instance will be '
                            'marked with this reputation',
                    'name': 'feedReputation',
                    'options': ['None', 'Good', 'Suspicious', 'Bad'],
                    'required': False,
                    'type': 18},
                   {'default_value': 'F - Reliability cannot be judged',
                    'display': 'Source Reliability',
                    'hidden': False,
                    'info': 'Reliability of the source providing the '
                            'intelligence data',
                    'name': 'feedReliability',
                    'options': ['A - Completely reliable',
                                'B - Usually reliable',
                                'C - Fairly reliable',
                                'D - Not usually reliable',
                                'E - Unreliable',
                                'F - Reliability cannot be judged'],
                    'required': True,
                    'type': 15},
                   {'default_value': '',
                    'display': 'Traffic Light Protocol Color',
                    'hidden': False,
                    'info': 'The Traffic Light Protocol (TLP) designation to '
                            'apply to indicators fetched from the feed',
                    'name': 'tlp_color',
                    'options': ['RED', 'AMBER', 'GREEN', 'WHITE'],
                    'required': False,
                    'type': 15},
                   {'default_value': 'suddenDeath',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationPolicy',
                    'options': ['never',
                                'interval',
                                'indicatorType',
                                'suddenDeath'],
                    'required': False,
                    'type': 17},
                   {'default_value': '20160',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationInterval',
                    'options': None,
                    'required': False,
                    'type': 1},
                   {'default_value': '30',
                    'display': 'Feed Fetch Interval',
                    'hidden': False,
                    'info': '',
                    'name': 'feedFetchInterval',
                    'options': None,
                    'required': False,
                    'type': 19},
                   {'default_value': '',
                    'display': 'Tags',
                    'hidden': False,
                    'info': 'Supports CSV values.',
                    'name': 'feedTags',
                    'options': None,
                    'required': False,
                    'type': 0},
                   {'default_value': 'true',
                    'display': 'Bypass exclusion list',
                    'hidden': False,
                    'info': 'When selected, the exclusion list is ignored for '
                            'indicators from this feed. This means that if an '
                            'indicator from this feed is on the exclusion '
                            'list, the indicator might still be added to the '
                            'system.',
                    'name': 'feedBypassExclusionList',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Trust any certificate (not secure)',
                    'hidden': False,
                    'info': '',
                    'name': 'insecure',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Use system proxy settings',
                    'hidden': False,
                    'info': '',
                    'name': 'proxy',
                    'options': None,
                    'required': False,
                    'type': 8}],
 'deprecated': None,
 'description': 'Use the Cyberint Feed integration to get indicators from the '
                'feed.',
 'detailed_description': '### Partner Contributed Integration\n'
                         '#### Integration Author: Cyberint\n'
                         'Support and maintenance for this integration are '
                         'provided by the author. Please use the following '
                         'contact details:\n'
                         '- **Email**: '
                         '[support@cyberint.com](mailto:support@cyberint.com)\n'
                         '- **URL**: '
                         '[https://cyberint.com](https://cyberint.com)\n'
                         '***\n',
 'display': 'Cyberint Feed (Partner Contribution)',
 'executable': None,
 'hidden': False,
 'hide_engines': None,
 'icon': '',
 'id': 'Cyberint Feed',
 'image': None,
 'integration_script': {'commands': [{'arguments': [{'auto': None,
                                                     'default': False,
                                                     'default_value': '0',
                                                     'deprecated': False,
                                                     'description': 'The '
                                                                    'maximum '
                                                                    'number of '
                                                                    'results '
                                                                    'to '
                                                                    'return. '
                                                                    'The '
                                                                    'default '
                                                                    'value is '
                                                                    '10.',
                                                     'is_array': None,
                                                     'name': 'limit',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False}],
                                      'cartesian': False,
                                      'deprecated': False,
                                      'description': 'Gets indicators from the '
                                                     'feed.',
                                      'execution': False,
                                      'hidden': False,
                                      'important': None,
                                      'name': 'cyberint-get-indicators',
                                      'outputs': None,
                                      'permitted': False,
                                      'sensitive': False,
                                      'timeout': 0}],
                        'docker_image': 'demisto/btfl-soup:1.0.1.45563',
                        'feed': True,
                        'is_fetch': False,
                        'is_fetch_credentials': False,
                        'long_running': False,
                        'long_running_port_mapping': False,
                        'run_once': False,
                        'script': "register_module_line('Cyberint Feed', "
                                  "'start', __line__())\n"
                                  '### pack version: 1.1.3\n'
                                  'import re\n'
                                  'from typing import Any, Callable, Dict, '
                                  'List, Optional, Tuple\n'
                                  '\n'
                                  '\n'
                                  'import urllib3\n'
                                  'from bs4 import BeautifulSoup\n'
                                  '\n'
                                  '\n'
                                  '# disable insecure warnings\n'
                                  'urllib3.disable_warnings()\n'
                                  '\n'
                                  'INTEGRATION_NAME = "Microsoft Intune Feed"\n'
                                  '\n'
                                  '\n'
                                  'class Client(BaseClient):\n'
                                  '    """\n'
                                  '    Client to use in the Microsoft Intune '
                                  'Feed integration. Overrides BaseClient.\n'
                                  '    """\n'
                                  '\n'
                                  '    def __init__(\n'
                                  '        self,\n'
                                  '        base_url: str,\n'
                                  '        access_token: str,\n'
                                  '        verify: bool = False,\n'
                                  '        proxy: bool = False,\n'
                                  '        tlp_color: Optional[str] = None,\n'
                                  '    ):\n'
                                  '        """\n'
                                  '        Implements class for Microsoft '
                                  'Intune feeds.\n'
                                  '        :param url: the Intune endpoint '
                                  'URL\n'
                                  '        :verify: boolean, if *false* feed '
                                  'HTTPS server certificate is verified. '
                                  'Default: *false*\n'
                                  '        :param proxy: boolean, if *false* '
                                  'feed HTTPS server certificate will not use '
                                  'proxies. Default: *false*\n'
                                  '        :param tlp_color: Traffic Light '
                                  'Protocol color.\n'
                                  '        """\n'
                                  '        self._cookies = {"access_token": '
                                  'access_token}\n'
                                  '        super().__init__(base_url, '
                                  'verify=verify, proxy=proxy)\n'
                                  '        self.tlp_color = tlp_color\n'
                                  '\n'
                                  '    def build_iterator(self, date_time: str '
                                  '= None) -> List:\n'
                                  '        """Retrieves all entries from the '
                                  'feed.\n'
                                  '\n'
                                  '        Returns:\n'
                                  '            A list of objects, containing '
                                  'the indicators.\n'
                                  '        """\n'
                                  '        result = []  # type: list\n'
                                  '        domains = []  # type: list\n'
                                  '        ipv4s = []  # type: list\n'
                                  '        ipv4cidrs = []  # type: list\n'
                                  '        date_time = "2023-11-23"\n'
                                  '        r = self._http_request("GET", '
                                  'url_suffix=date_time, '
                                  'full_url=self._base_url, resp_type="text")\n'
                                  '\n'
                                  '        soup = BeautifulSoup(r, '
                                  '"html.parser")\n'
                                  '\n'
                                  '        table_rows = soup.select("tbody '
                                  'tr")\n'
                                  '        for row in table_rows:\n'
                                  '            found_domains = [\n'
                                  '                string.strip()\n'
                                  '                for string in row.strings\n'
                                  '                if re.search(\n'
                                  '                    '
                                  'r"(microsoft\\.(com|net))|"\n'
                                  '                    '
                                  'r"microsoftonline\\.com|"\n'
                                  '                    '
                                  'r"officeconfig\\.msocdn\\.com|"\n'
                                  '                    '
                                  'r"config\\.office\\.com|"\n'
                                  '                    '
                                  'r"graph\\.windows\\.net",\n'
                                  '                    string,\n'
                                  '                )\n'
                                  '            ]\n'
                                  '            if found_domains:\n'
                                  '                domains += found_domains\n'
                                  '                for string in row.strings:\n'
                                  '                    string = '
                                  'string.strip()\n'
                                  '                    if '
                                  're.match(ipv4cidrRegex, string):\n'
                                  '                        '
                                  'ipv4cidrs.append(string)\n'
                                  '                    elif '
                                  're.match(ipv4Regex, string):\n'
                                  '                        '
                                  'ipv4s.append(string)\n'
                                  '\n'
                                  '        for domain in domains:\n'
                                  '            result.append(\n'
                                  '                {\n'
                                  '                    "value": domain,\n'
                                  '                    "type": '
                                  'FeedIndicatorType.DomainGlob if "*" in '
                                  'domain else FeedIndicatorType.Domain,\n'
                                  '                    "FeedURL": '
                                  'self._base_url,\n'
                                  '                }\n'
                                  '            )\n'
                                  '        for ipv4 in ipv4s:\n'
                                  '            result.append({"value": ipv4, '
                                  '"type": FeedIndicatorType.IP, "FeedURL": '
                                  'self._base_url})\n'
                                  '        for cidr in ipv4cidrs:\n'
                                  '            result.append({"value": cidr, '
                                  '"type": FeedIndicatorType.CIDR, "FeedURL": '
                                  'self._base_url})\n'
                                  '\n'
                                  '        return result\n'
                                  '\n'
                                  '\n'
                                  'def test_module(client: Client, *_) -> '
                                  'Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Builds the iterator to check that '
                                  'the feed is accessible.\n'
                                  '    Args:\n'
                                  '        client: Client object.\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    client.build_iterator()\n'
                                  '    return "ok", {}, {}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators(client: Client, '
                                  'feed_tags: List = [], limit: int = -1) -> '
                                  'List[Dict]:\n'
                                  '    """Retrieves indicators from the feed\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client (Client): Client object with '
                                  'request\n'
                                  '        feed_tags (list): tags to assign '
                                  'fetched indicators\n'
                                  '        limit (int): limit the results\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    iterator = client.build_iterator()\n'
                                  '    indicators = []\n'
                                  '    if limit > 0:\n'
                                  '        iterator = iterator[:limit]\n'
                                  '    for item in iterator:\n'
                                  '        value = item.get("value")\n'
                                  '        type_ = item.get("type", '
                                  'FeedIndicatorType.Domain)\n'
                                  '        raw_data = {\n'
                                  '            "value": value,\n'
                                  '            "type": type_,\n'
                                  '        }\n'
                                  '        for key, val in item.items():\n'
                                  '            raw_data.update({key: val})\n'
                                  '        indicator_obj = {"value": value, '
                                  '"type": type_, "rawJSON": raw_data, '
                                  '"fields": {}}\n'
                                  '        if feed_tags:\n'
                                  '            indicator_obj["fields"]["tags"] '
                                  '= feed_tags\n'
                                  '        if client.tlp_color:\n'
                                  '            '
                                  'indicator_obj["fields"]["trafficlightprotocol"] '
                                  '= client.tlp_color\n'
                                  '\n'
                                  '        indicators.append(indicator_obj)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def get_indicators_command(\n'
                                  '    client: Client, params: Dict[str, str], '
                                  'args: Dict[str, str]\n'
                                  ') -> Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Wrapper for retrieving indicators '
                                  'from the feed to the war-room.\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '        args: demisto.args()\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    limit = int(args.get("limit", "10"))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'feed_tags, limit)\n'
                                  '    human_readable = tableToMarkdown(\n'
                                  '        "Indicators from Microsoft Intune '
                                  'Feed:", indicators, headers=["value", '
                                  '"type"], removeNull=True\n'
                                  '    )\n'
                                  '\n'
                                  '    return human_readable, {}, '
                                  '{"raw_response": indicators}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators_command(client: '
                                  'Client, params: Dict[str, str]) -> '
                                  'List[Dict]:\n'
                                  '    """Wrapper for fetching indicators from '
                                  'the feed to the Indicators tab.\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'feed_tags)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def main():\n'
                                  '    """\n'
                                  '    PARSE AND VALIDATE INTEGRATION PARAMS\n'
                                  '    """\n'
                                  '    params = demisto.params()\n'
                                  '    base_url = params.get("url")\n'
                                  '    access_token = '
                                  'params.get("access_token").get("password")\n'
                                  '    insecure = not params.get("insecure", '
                                  'False)\n'
                                  '    proxy = params.get("proxy", False)\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '\n'
                                  '    command = demisto.command()\n'
                                  '    demisto.info(f"Command being called is '
                                  '{command}")\n'
                                  '\n'
                                  '    try:\n'
                                  '        client = Client(base_url=base_url, '
                                  'access_token=access_token, verify=insecure, '
                                  'proxy=proxy, tlp_color=tlp_color)\n'
                                  '\n'
                                  '        commands: Dict[\n'
                                  '            str, Callable[[Client, '
                                  'Dict[str, str], Dict[str, str]], Tuple[str, '
                                  'Dict[Any, Any], Dict[Any, Any]]]\n'
                                  '        ] = {"test-module": test_module, '
                                  '"cyberint-get-indicators": '
                                  'get_indicators_command}\n'
                                  '        if command in commands:\n'
                                  '            '
                                  'return_outputs(*commands[command](client, '
                                  'demisto.params(), demisto.args()))\n'
                                  '\n'
                                  '        elif command == '
                                  '"fetch-indicators":\n'
                                  '            indicators = '
                                  'fetch_indicators_command(client, '
                                  'demisto.params())\n'
                                  '            for iter_ in batch(indicators, '
                                  'batch_size=2000):\n'
                                  '                '
                                  'demisto.createIndicators(iter_)\n'
                                  '\n'
                                  '        else:\n'
                                  '            raise '
                                  'NotImplementedError(f"Command {command} is '
                                  'not implemented.")\n'
                                  '\n'
                                  '    except Exception as err:\n'
                                  '        err_msg = f"Error in '
                                  '{INTEGRATION_NAME} Integration. [{err}]"\n'
                                  '        return_error(err_msg)\n'
                                  '\n'
                                  '\n'
                                  'if __name__ in ["__main__", "builtin", '
                                  '"builtins"]:\n'
                                  '    main()\n'
                                  '\n'
                                  "register_module_line('Cyberint Feed', "
                                  "'end', __line__())\n",
                        'subtype': 'python3',
                        'type': 'python'},
 'is_password_protected': None,
 'locked': None,
 'modified': datetime.datetime(2023, 11, 23, 11, 32, 40, 453936, tzinfo=tzoffset(None, 7200)),
 'name': 'Cyberint Feed',
 'path': None,
 'prev_name': 'Cyberint Feed',
 'propagation_labels': ['all'],
 'readonly': None,
 'script_not_visible': None,
 'should_commit': False,
 'sort_values': None,
 'source_module_id': None,
 'system': None,
 'vc_should_ignore': False,
 'version': 5}
[2023-11-23T11:32:41] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:32:41] - [MainThread] - [DEBUG] - uploader.py:287 - Uploaded Integration integration-FeedCyberint.yml successfully
[2023-11-23T11:32:41] - [MainThread] - [INFO] - uploader.py:389 - UPLOAD SUMMARY:

[2023-11-23T11:32:41] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:32:41] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:32:41] - [MainThread] - [INFO] - uploader.py:422 - SUCCESSFUL UPLOADS:
╒══════════════════╤═════════════╤═════════════╤════════════════╕
│ NAME             │ TYPE        │ PACK NAME   │ PACK VERSION   │
╞══════════════════╪═════════════╪═════════════╪════════════════╡
│ FeedCyberint.yml │ Integration │             │                │
╘══════════════════╧═════════════╧═════════════╧════════════════╛

[2023-11-23T11:43:50] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T11:43:50] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T11:43:50] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T11:43:50] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-11-23T11:43:50] - [MainThread] - [DEBUG] - connectionpool.py:1019 - Starting new HTTPS connection (1): pypi.org:443
[2023-11-23T11:43:51] - [MainThread] - [DEBUG] - connectionpool.py:474 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 42701
[2023-11-23T11:43:51] - [MainThread] - [INFO] - __main__.py:228 - You are using demisto-sdk 1.21.0.
[2023-11-23T11:43:51] - [MainThread] - [INFO] - __main__.py:230 - however version 1.23.0 is available.
To update, run pip3 install --upgrade demisto-sdk
[2023-11-23T11:43:51] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T11:43:51] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T11:43:51] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T11:43:51] - [MainThread] - [DEBUG] - tools.py:3784 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-11-23T11:43:51] - [MainThread] - [INFO] - uploader.py:210 - Uploading /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml to https://192.168.30.206...
[2023-11-23T11:43:51] - [MainThread] - [DEBUG] - base_content.py:169 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:43:51] - [MainThread] - [DEBUG] - content_item.py:98 - Parsing content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:43:51] - [MainThread] - [DEBUG] - content_item.py:137 - Parsed Integration:Cyberint Feed
[2023-11-23T11:43:51] - [MainThread] - [DEBUG] - base_content.py:204 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml as <class 'demisto_sdk.commands.content_graph.objects.integration.Integration'>
[2023-11-23T11:43:51] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:43:51] - [MainThread] - [DEBUG] - content_item.py:194 - preparing /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:43:51] - [MainThread] - [DEBUG] - integration_script_unifier.py:76 - Unifying /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:43:51] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-11-23T11:43:51] - [MainThread] - [WARNING] - integration_script_unifier.py:207 - Failed getting image data for '/home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint'.
[2023-11-23T11:43:51] - [MainThread] - [INFO] - integration_script_unifier.py:650 - Did not find README in /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint, not adding integration doc link
[2023-11-23T11:43:51] - [MainThread] - [DEBUG] - integration_script_unifier.py:132 - Created unified yml: FeedCyberint.yml
[2023-11-23T11:43:51] - [MainThread] - [DEBUG] - integration_script.py:64 - The docker_native_image_config.json file could not be found.
[2023-11-23T11:43:51] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:43:52] - [MainThread] - [DEBUG] - tools.py:39 - got the following response when uploading Integration /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml: {'beta': None,
 'brand': '',
 'can_get_samples': True,
 'category': 'Data Enrichment & Threat Intelligence',
 'cmdline': None,
 'commit_message': '',
 'configuration': [{'default_value': 'https://qmasters-integration.cyberint.io/ioc/api/v1/feed/daily/',
                    'display': 'The Cyberint IOC feed endpoint URL',
                    'hidden': False,
                    'info': '',
                    'name': 'url',
                    'options': None,
                    'required': True,
                    'type': 0},
                   {'default_value': '',
                    'display': 'API Key (Leave empty. Fill in the API Key in '
                               'the password field.)',
                    'hidden': False,
                    'info': '',
                    'name': 'access_token',
                    'options': None,
                    'required': True,
                    'type': 9},
                   {'default_value': 'true',
                    'display': 'Fetch indicators',
                    'hidden': False,
                    'info': '',
                    'name': 'feed',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': 'Good',
                    'display': 'Indicator Reputation',
                    'hidden': False,
                    'info': 'Indicators from this integration instance will be '
                            'marked with this reputation',
                    'name': 'feedReputation',
                    'options': ['None', 'Good', 'Suspicious', 'Bad'],
                    'required': False,
                    'type': 18},
                   {'default_value': 'F - Reliability cannot be judged',
                    'display': 'Source Reliability',
                    'hidden': False,
                    'info': 'Reliability of the source providing the '
                            'intelligence data',
                    'name': 'feedReliability',
                    'options': ['A - Completely reliable',
                                'B - Usually reliable',
                                'C - Fairly reliable',
                                'D - Not usually reliable',
                                'E - Unreliable',
                                'F - Reliability cannot be judged'],
                    'required': True,
                    'type': 15},
                   {'default_value': '',
                    'display': 'Traffic Light Protocol Color',
                    'hidden': False,
                    'info': 'The Traffic Light Protocol (TLP) designation to '
                            'apply to indicators fetched from the feed',
                    'name': 'tlp_color',
                    'options': ['RED', 'AMBER', 'GREEN', 'WHITE'],
                    'required': False,
                    'type': 15},
                   {'default_value': 'suddenDeath',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationPolicy',
                    'options': ['never',
                                'interval',
                                'indicatorType',
                                'suddenDeath'],
                    'required': False,
                    'type': 17},
                   {'default_value': '20160',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationInterval',
                    'options': None,
                    'required': False,
                    'type': 1},
                   {'default_value': '30',
                    'display': 'Feed Fetch Interval',
                    'hidden': False,
                    'info': '',
                    'name': 'feedFetchInterval',
                    'options': None,
                    'required': False,
                    'type': 19},
                   {'default_value': '',
                    'display': 'Tags',
                    'hidden': False,
                    'info': 'Supports CSV values.',
                    'name': 'feedTags',
                    'options': None,
                    'required': False,
                    'type': 0},
                   {'default_value': 'true',
                    'display': 'Bypass exclusion list',
                    'hidden': False,
                    'info': 'When selected, the exclusion list is ignored for '
                            'indicators from this feed. This means that if an '
                            'indicator from this feed is on the exclusion '
                            'list, the indicator might still be added to the '
                            'system.',
                    'name': 'feedBypassExclusionList',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Trust any certificate (not secure)',
                    'hidden': False,
                    'info': '',
                    'name': 'insecure',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Use system proxy settings',
                    'hidden': False,
                    'info': '',
                    'name': 'proxy',
                    'options': None,
                    'required': False,
                    'type': 8}],
 'deprecated': None,
 'description': 'Use the Cyberint Feed integration to get indicators from the '
                'feed.',
 'detailed_description': '### Partner Contributed Integration\n'
                         '#### Integration Author: Cyberint\n'
                         'Support and maintenance for this integration are '
                         'provided by the author. Please use the following '
                         'contact details:\n'
                         '- **Email**: '
                         '[support@cyberint.com](mailto:support@cyberint.com)\n'
                         '- **URL**: '
                         '[https://cyberint.com](https://cyberint.com)\n'
                         '***\n',
 'display': 'Cyberint Feed (Partner Contribution)',
 'executable': None,
 'hidden': False,
 'hide_engines': None,
 'icon': '',
 'id': 'Cyberint Feed',
 'image': None,
 'integration_script': {'commands': [{'arguments': [{'auto': None,
                                                     'default': False,
                                                     'default_value': '0',
                                                     'deprecated': False,
                                                     'description': 'The '
                                                                    'maximum '
                                                                    'number of '
                                                                    'results '
                                                                    'to '
                                                                    'return. '
                                                                    'The '
                                                                    'default '
                                                                    'value is '
                                                                    '10.',
                                                     'is_array': None,
                                                     'name': 'limit',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False}],
                                      'cartesian': False,
                                      'deprecated': False,
                                      'description': 'Gets indicators from the '
                                                     'feed.',
                                      'execution': False,
                                      'hidden': False,
                                      'important': None,
                                      'name': 'cyberint-get-indicators',
                                      'outputs': None,
                                      'permitted': False,
                                      'sensitive': False,
                                      'timeout': 0}],
                        'docker_image': 'demisto/btfl-soup:1.0.1.45563',
                        'feed': True,
                        'is_fetch': False,
                        'is_fetch_credentials': False,
                        'long_running': False,
                        'long_running_port_mapping': False,
                        'run_once': False,
                        'script': "register_module_line('Cyberint Feed', "
                                  "'start', __line__())\n"
                                  '### pack version: 1.1.3\n'
                                  'import re\n'
                                  'from typing import Any, Callable, Dict, '
                                  'List, Optional, Tuple\n'
                                  '\n'
                                  '\n'
                                  'import urllib3\n'
                                  'from bs4 import BeautifulSoup\n'
                                  '\n'
                                  '\n'
                                  '# disable insecure warnings\n'
                                  'urllib3.disable_warnings()\n'
                                  '\n'
                                  'INTEGRATION_NAME = "Microsoft Intune Feed"\n'
                                  '\n'
                                  '\n'
                                  'class Client(BaseClient):\n'
                                  '    """\n'
                                  '    Client to use in the Microsoft Intune '
                                  'Feed integration. Overrides BaseClient.\n'
                                  '    """\n'
                                  '\n'
                                  '    def __init__(\n'
                                  '        self,\n'
                                  '        base_url: str,\n'
                                  '        access_token: str,\n'
                                  '        verify: bool = False,\n'
                                  '        proxy: bool = False,\n'
                                  '        tlp_color: Optional[str] = None,\n'
                                  '    ):\n'
                                  '        """\n'
                                  '        Implements class for Microsoft '
                                  'Intune feeds.\n'
                                  '        :param url: the Intune endpoint '
                                  'URL\n'
                                  '        :verify: boolean, if *false* feed '
                                  'HTTPS server certificate is verified. '
                                  'Default: *false*\n'
                                  '        :param proxy: boolean, if *false* '
                                  'feed HTTPS server certificate will not use '
                                  'proxies. Default: *false*\n'
                                  '        :param tlp_color: Traffic Light '
                                  'Protocol color.\n'
                                  '        """\n'
                                  '        self._cookies = {"access_token": '
                                  'access_token}\n'
                                  '        super().__init__(base_url, '
                                  'verify=verify, proxy=proxy)\n'
                                  '        self.tlp_color = tlp_color\n'
                                  '\n'
                                  '    def build_iterator(self, date_time: str '
                                  '= None) -> List:\n'
                                  '        """Retrieves all entries from the '
                                  'feed.\n'
                                  '\n'
                                  '        Returns:\n'
                                  '            A list of objects, containing '
                                  'the indicators.\n'
                                  '        """\n'
                                  '        result = []  # type: list\n'
                                  '        domains = []  # type: list\n'
                                  '        ipv4s = []  # type: list\n'
                                  '        ipv4cidrs = []  # type: list\n'
                                  '        date_time = "2023-11-23"\n'
                                  '        r = self._http_request("GET", '
                                  'url_suffix=date_time, '
                                  'full_url=self._base_url, resp_type="text")\n'
                                  '\n'
                                  '        # soup = BeautifulSoup(r, '
                                  '"html.parser")\n'
                                  '\n'
                                  '        # table_rows = soup.select("tbody '
                                  'tr")\n'
                                  '        # for row in table_rows:\n'
                                  '        #     found_domains = [\n'
                                  '        #         string.strip()\n'
                                  '        #         for string in '
                                  'row.strings\n'
                                  '        #         if re.search(\n'
                                  '        #             '
                                  'r"(microsoft\\.(com|net))|"\n'
                                  '        #             '
                                  'r"microsoftonline\\.com|"\n'
                                  '        #             '
                                  'r"officeconfig\\.msocdn\\.com|"\n'
                                  '        #             '
                                  'r"config\\.office\\.com|"\n'
                                  '        #             '
                                  'r"graph\\.windows\\.net",\n'
                                  '        #             string,\n'
                                  '        #         )\n'
                                  '        #     ]\n'
                                  '        #     if found_domains:\n'
                                  '        #         domains += found_domains\n'
                                  '        #         for string in '
                                  'row.strings:\n'
                                  '        #             string = '
                                  'string.strip()\n'
                                  '        #             if '
                                  're.match(ipv4cidrRegex, string):\n'
                                  '        #                 '
                                  'ipv4cidrs.append(string)\n'
                                  '        #             elif '
                                  're.match(ipv4Regex, string):\n'
                                  '        #                 '
                                  'ipv4s.append(string)\n'
                                  '\n'
                                  '        # for domain in domains:\n'
                                  '        #     result.append(\n'
                                  '        #         {\n'
                                  '        #             "value": domain,\n'
                                  '        #             "type": '
                                  'FeedIndicatorType.DomainGlob if "*" in '
                                  'domain else FeedIndicatorType.Domain,\n'
                                  '        #             "FeedURL": '
                                  'self._base_url,\n'
                                  '        #         }\n'
                                  '        #     )\n'
                                  '        # for ipv4 in ipv4s:\n'
                                  '        #     result.append({"value": ipv4, '
                                  '"type": FeedIndicatorType.IP, "FeedURL": '
                                  'self._base_url})\n'
                                  '        # for cidr in ipv4cidrs:\n'
                                  '        #     result.append({"value": cidr, '
                                  '"type": FeedIndicatorType.CIDR, "FeedURL": '
                                  'self._base_url})\n'
                                  '\n'
                                  '        return r\n'
                                  '\n'
                                  '\n'
                                  'def test_module(client: Client, *_) -> '
                                  'Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Builds the iterator to check that '
                                  'the feed is accessible.\n'
                                  '    Args:\n'
                                  '        client: Client object.\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    client.build_iterator()\n'
                                  '    return "ok", {}, {}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators(client: Client, '
                                  'feed_tags: List = [], limit: int = -1) -> '
                                  'List[Dict]:\n'
                                  '    """Retrieves indicators from the feed\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client (Client): Client object with '
                                  'request\n'
                                  '        feed_tags (list): tags to assign '
                                  'fetched indicators\n'
                                  '        limit (int): limit the results\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    iterator = client.build_iterator()\n'
                                  '    indicators = []\n'
                                  '    if limit > 0:\n'
                                  '        iterator = iterator[:limit]\n'
                                  '    for item in iterator:\n'
                                  '        value = item.get("value")\n'
                                  '        type_ = item.get("type", '
                                  'FeedIndicatorType.Domain)\n'
                                  '        raw_data = {\n'
                                  '            "value": value,\n'
                                  '            "type": type_,\n'
                                  '        }\n'
                                  '        for key, val in item.items():\n'
                                  '            raw_data.update({key: val})\n'
                                  '        indicator_obj = {"value": value, '
                                  '"type": type_, "rawJSON": raw_data, '
                                  '"fields": {}}\n'
                                  '        if feed_tags:\n'
                                  '            indicator_obj["fields"]["tags"] '
                                  '= feed_tags\n'
                                  '        if client.tlp_color:\n'
                                  '            '
                                  'indicator_obj["fields"]["trafficlightprotocol"] '
                                  '= client.tlp_color\n'
                                  '\n'
                                  '        indicators.append(indicator_obj)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def get_indicators_command(\n'
                                  '    client: Client, params: Dict[str, str], '
                                  'args: Dict[str, str]\n'
                                  ') -> Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Wrapper for retrieving indicators '
                                  'from the feed to the war-room.\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '        args: demisto.args()\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    limit = int(args.get("limit", "10"))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'feed_tags, limit)\n'
                                  '    human_readable = tableToMarkdown(\n'
                                  '        "Indicators from Microsoft Intune '
                                  'Feed:", indicators, headers=["value", '
                                  '"type"], removeNull=True\n'
                                  '    )\n'
                                  '\n'
                                  '    return human_readable, {}, '
                                  '{"raw_response": indicators}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators_command(client: '
                                  'Client, params: Dict[str, str]) -> '
                                  'List[Dict]:\n'
                                  '    """Wrapper for fetching indicators from '
                                  'the feed to the Indicators tab.\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'feed_tags)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def main():\n'
                                  '    """\n'
                                  '    PARSE AND VALIDATE INTEGRATION PARAMS\n'
                                  '    """\n'
                                  '    params = demisto.params()\n'
                                  '    base_url = params.get("url")\n'
                                  '    access_token = '
                                  'params.get("access_token").get("password")\n'
                                  '    insecure = not params.get("insecure", '
                                  'False)\n'
                                  '    proxy = params.get("proxy", False)\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '\n'
                                  '    command = demisto.command()\n'
                                  '    demisto.info(f"Command being called is '
                                  '{command}")\n'
                                  '\n'
                                  '    try:\n'
                                  '        client = Client(base_url=base_url, '
                                  'access_token=access_token, verify=insecure, '
                                  'proxy=proxy, tlp_color=tlp_color)\n'
                                  '\n'
                                  '        commands: Dict[\n'
                                  '            str, Callable[[Client, '
                                  'Dict[str, str], Dict[str, str]], Tuple[str, '
                                  'Dict[Any, Any], Dict[Any, Any]]]\n'
                                  '        ] = {"test-module": test_module, '
                                  '"cyberint-get-indicators": '
                                  'get_indicators_command}\n'
                                  '        if command in commands:\n'
                                  '            '
                                  'return_outputs(*commands[command](client, '
                                  'demisto.params(), demisto.args()))\n'
                                  '\n'
                                  '        elif command == '
                                  '"fetch-indicators":\n'
                                  '            indicators = '
                                  'fetch_indicators_command(client, '
                                  'demisto.params())\n'
                                  '            for iter_ in batch(indicators, '
                                  'batch_size=2000):\n'
                                  '                '
                                  'demisto.createIndicators(iter_)\n'
                                  '\n'
                                  '        else:\n'
                                  '            raise '
                                  'NotImplementedError(f"Command {command} is '
                                  'not implemented.")\n'
                                  '\n'
                                  '    except Exception as err:\n'
                                  '        err_msg = f"Error in '
                                  '{INTEGRATION_NAME} Integration. [{err}]"\n'
                                  '        return_error(err_msg)\n'
                                  '\n'
                                  '\n'
                                  'if __name__ in ["__main__", "builtin", '
                                  '"builtins"]:\n'
                                  '    main()\n'
                                  '\n'
                                  "register_module_line('Cyberint Feed', "
                                  "'end', __line__())\n",
                        'subtype': 'python3',
                        'type': 'python'},
 'is_password_protected': None,
 'locked': None,
 'modified': datetime.datetime(2023, 11, 23, 11, 43, 51, 170426, tzinfo=tzoffset(None, 7200)),
 'name': 'Cyberint Feed',
 'path': None,
 'prev_name': 'Cyberint Feed',
 'propagation_labels': ['all'],
 'readonly': None,
 'script_not_visible': None,
 'should_commit': False,
 'sort_values': None,
 'source_module_id': None,
 'system': None,
 'vc_should_ignore': False,
 'version': 6}
[2023-11-23T11:43:52] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:43:52] - [MainThread] - [DEBUG] - uploader.py:287 - Uploaded Integration integration-FeedCyberint.yml successfully
[2023-11-23T11:43:52] - [MainThread] - [INFO] - uploader.py:389 - UPLOAD SUMMARY:

[2023-11-23T11:43:52] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:43:52] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:43:52] - [MainThread] - [INFO] - uploader.py:422 - SUCCESSFUL UPLOADS:
╒══════════════════╤═════════════╤═════════════╤════════════════╕
│ NAME             │ TYPE        │ PACK NAME   │ PACK VERSION   │
╞══════════════════╪═════════════╪═════════════╪════════════════╡
│ FeedCyberint.yml │ Integration │             │                │
╘══════════════════╧═════════════╧═════════════╧════════════════╛

[2023-11-23T11:47:25] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T11:47:25] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T11:47:25] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T11:47:25] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-11-23T11:47:25] - [MainThread] - [DEBUG] - connectionpool.py:1019 - Starting new HTTPS connection (1): pypi.org:443
[2023-11-23T11:47:26] - [MainThread] - [DEBUG] - connectionpool.py:474 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 42701
[2023-11-23T11:47:26] - [MainThread] - [INFO] - __main__.py:228 - You are using demisto-sdk 1.21.0.
[2023-11-23T11:47:26] - [MainThread] - [INFO] - __main__.py:230 - however version 1.23.0 is available.
To update, run pip3 install --upgrade demisto-sdk
[2023-11-23T11:47:26] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T11:47:26] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T11:47:26] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T11:47:26] - [MainThread] - [DEBUG] - tools.py:3784 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-11-23T11:47:26] - [MainThread] - [INFO] - uploader.py:210 - Uploading /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml to https://192.168.30.206...
[2023-11-23T11:47:26] - [MainThread] - [DEBUG] - base_content.py:169 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:47:26] - [MainThread] - [DEBUG] - content_item.py:98 - Parsing content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:47:26] - [MainThread] - [DEBUG] - content_item.py:137 - Parsed Integration:Cyberint Feed
[2023-11-23T11:47:26] - [MainThread] - [DEBUG] - base_content.py:204 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml as <class 'demisto_sdk.commands.content_graph.objects.integration.Integration'>
[2023-11-23T11:47:26] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:47:26] - [MainThread] - [DEBUG] - content_item.py:194 - preparing /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:47:26] - [MainThread] - [DEBUG] - integration_script_unifier.py:76 - Unifying /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:47:26] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-11-23T11:47:26] - [MainThread] - [WARNING] - integration_script_unifier.py:207 - Failed getting image data for '/home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint'.
[2023-11-23T11:47:26] - [MainThread] - [INFO] - integration_script_unifier.py:650 - Did not find README in /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint, not adding integration doc link
[2023-11-23T11:47:26] - [MainThread] - [DEBUG] - integration_script_unifier.py:132 - Created unified yml: FeedCyberint.yml
[2023-11-23T11:47:26] - [MainThread] - [DEBUG] - integration_script.py:64 - The docker_native_image_config.json file could not be found.
[2023-11-23T11:47:26] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:47:27] - [MainThread] - [DEBUG] - tools.py:39 - got the following response when uploading Integration /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml: {'beta': None,
 'brand': '',
 'can_get_samples': True,
 'category': 'Data Enrichment & Threat Intelligence',
 'cmdline': None,
 'commit_message': '',
 'configuration': [{'default_value': 'https://qmasters-integration.cyberint.io/ioc/api/v1/feed/daily/',
                    'display': 'The Cyberint IOC feed endpoint URL',
                    'hidden': False,
                    'info': '',
                    'name': 'url',
                    'options': None,
                    'required': True,
                    'type': 0},
                   {'default_value': '',
                    'display': 'API Key (Leave empty. Fill in the API Key in '
                               'the password field.)',
                    'hidden': False,
                    'info': '',
                    'name': 'access_token',
                    'options': None,
                    'required': True,
                    'type': 9},
                   {'default_value': 'true',
                    'display': 'Fetch indicators',
                    'hidden': False,
                    'info': '',
                    'name': 'feed',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': 'Good',
                    'display': 'Indicator Reputation',
                    'hidden': False,
                    'info': 'Indicators from this integration instance will be '
                            'marked with this reputation',
                    'name': 'feedReputation',
                    'options': ['None', 'Good', 'Suspicious', 'Bad'],
                    'required': False,
                    'type': 18},
                   {'default_value': 'F - Reliability cannot be judged',
                    'display': 'Source Reliability',
                    'hidden': False,
                    'info': 'Reliability of the source providing the '
                            'intelligence data',
                    'name': 'feedReliability',
                    'options': ['A - Completely reliable',
                                'B - Usually reliable',
                                'C - Fairly reliable',
                                'D - Not usually reliable',
                                'E - Unreliable',
                                'F - Reliability cannot be judged'],
                    'required': True,
                    'type': 15},
                   {'default_value': '',
                    'display': 'Traffic Light Protocol Color',
                    'hidden': False,
                    'info': 'The Traffic Light Protocol (TLP) designation to '
                            'apply to indicators fetched from the feed',
                    'name': 'tlp_color',
                    'options': ['RED', 'AMBER', 'GREEN', 'WHITE'],
                    'required': False,
                    'type': 15},
                   {'default_value': 'suddenDeath',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationPolicy',
                    'options': ['never',
                                'interval',
                                'indicatorType',
                                'suddenDeath'],
                    'required': False,
                    'type': 17},
                   {'default_value': '20160',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationInterval',
                    'options': None,
                    'required': False,
                    'type': 1},
                   {'default_value': '30',
                    'display': 'Feed Fetch Interval',
                    'hidden': False,
                    'info': '',
                    'name': 'feedFetchInterval',
                    'options': None,
                    'required': False,
                    'type': 19},
                   {'default_value': '',
                    'display': 'Tags',
                    'hidden': False,
                    'info': 'Supports CSV values.',
                    'name': 'feedTags',
                    'options': None,
                    'required': False,
                    'type': 0},
                   {'default_value': 'true',
                    'display': 'Bypass exclusion list',
                    'hidden': False,
                    'info': 'When selected, the exclusion list is ignored for '
                            'indicators from this feed. This means that if an '
                            'indicator from this feed is on the exclusion '
                            'list, the indicator might still be added to the '
                            'system.',
                    'name': 'feedBypassExclusionList',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Trust any certificate (not secure)',
                    'hidden': False,
                    'info': '',
                    'name': 'insecure',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Use system proxy settings',
                    'hidden': False,
                    'info': '',
                    'name': 'proxy',
                    'options': None,
                    'required': False,
                    'type': 8}],
 'deprecated': None,
 'description': 'Use the Cyberint Feed integration to get indicators from the '
                'feed.',
 'detailed_description': '### Partner Contributed Integration\n'
                         '#### Integration Author: Cyberint\n'
                         'Support and maintenance for this integration are '
                         'provided by the author. Please use the following '
                         'contact details:\n'
                         '- **Email**: '
                         '[support@cyberint.com](mailto:support@cyberint.com)\n'
                         '- **URL**: '
                         '[https://cyberint.com](https://cyberint.com)\n'
                         '***\n',
 'display': 'Cyberint Feed (Partner Contribution)',
 'executable': None,
 'hidden': False,
 'hide_engines': None,
 'icon': '',
 'id': 'Cyberint Feed',
 'image': None,
 'integration_script': {'commands': [{'arguments': [{'auto': None,
                                                     'default': False,
                                                     'default_value': '0',
                                                     'deprecated': False,
                                                     'description': 'The '
                                                                    'maximum '
                                                                    'number of '
                                                                    'results '
                                                                    'to '
                                                                    'return. '
                                                                    'The '
                                                                    'default '
                                                                    'value is '
                                                                    '10.',
                                                     'is_array': None,
                                                     'name': 'limit',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False}],
                                      'cartesian': False,
                                      'deprecated': False,
                                      'description': 'Gets indicators from the '
                                                     'feed.',
                                      'execution': False,
                                      'hidden': False,
                                      'important': None,
                                      'name': 'cyberint-get-indicators',
                                      'outputs': None,
                                      'permitted': False,
                                      'sensitive': False,
                                      'timeout': 0}],
                        'docker_image': 'demisto/btfl-soup:1.0.1.45563',
                        'feed': True,
                        'is_fetch': False,
                        'is_fetch_credentials': False,
                        'long_running': False,
                        'long_running_port_mapping': False,
                        'run_once': False,
                        'script': "register_module_line('Cyberint Feed', "
                                  "'start', __line__())\n"
                                  '### pack version: 1.1.3\n'
                                  'import re\n'
                                  'from typing import Any, Callable, Dict, '
                                  'List, Optional, Tuple\n'
                                  '\n'
                                  '\n'
                                  'import urllib3\n'
                                  'from bs4 import BeautifulSoup\n'
                                  '\n'
                                  '\n'
                                  '# disable insecure warnings\n'
                                  'urllib3.disable_warnings()\n'
                                  '\n'
                                  'INTEGRATION_NAME = "Microsoft Intune Feed"\n'
                                  '\n'
                                  '\n'
                                  'class Client(BaseClient):\n'
                                  '    """\n'
                                  '    Client to use in the Microsoft Intune '
                                  'Feed integration. Overrides BaseClient.\n'
                                  '    """\n'
                                  '\n'
                                  '    def __init__(\n'
                                  '        self,\n'
                                  '        base_url: str,\n'
                                  '        access_token: str,\n'
                                  '        verify: bool = False,\n'
                                  '        proxy: bool = False,\n'
                                  '        tlp_color: Optional[str] = None,\n'
                                  '    ):\n'
                                  '        """\n'
                                  '        Implements class for Microsoft '
                                  'Intune feeds.\n'
                                  '        :param url: the Intune endpoint '
                                  'URL\n'
                                  '        :verify: boolean, if *false* feed '
                                  'HTTPS server certificate is verified. '
                                  'Default: *false*\n'
                                  '        :param proxy: boolean, if *false* '
                                  'feed HTTPS server certificate will not use '
                                  'proxies. Default: *false*\n'
                                  '        :param tlp_color: Traffic Light '
                                  'Protocol color.\n'
                                  '        """\n'
                                  '        self._cookies = {"access_token": '
                                  'access_token}\n'
                                  '        super().__init__(base_url, '
                                  'verify=verify, proxy=proxy)\n'
                                  '        self.tlp_color = tlp_color\n'
                                  '\n'
                                  '    def build_iterator(self, date_time: str '
                                  '= None) -> List:\n'
                                  '        """Retrieves all entries from the '
                                  'feed.\n'
                                  '\n'
                                  '        Returns:\n'
                                  '            A list of objects, containing '
                                  'the indicators.\n'
                                  '        """\n'
                                  '        result = []  # type: list\n'
                                  '        domains = []  # type: list\n'
                                  '        ipv4s = []  # type: list\n'
                                  '        ipv4cidrs = []  # type: list\n'
                                  '        date_time = "2023-11-23"\n'
                                  '        r = self._http_request("GET", '
                                  'url_suffix=date_time, resp_type="text")\n'
                                  '        # soup = BeautifulSoup(r, '
                                  '"html.parser")\n'
                                  '\n'
                                  '        # table_rows = soup.select("tbody '
                                  'tr")\n'
                                  '        # for row in table_rows:\n'
                                  '        #     found_domains = [\n'
                                  '        #         string.strip()\n'
                                  '        #         for string in '
                                  'row.strings\n'
                                  '        #         if re.search(\n'
                                  '        #             '
                                  'r"(microsoft\\.(com|net))|"\n'
                                  '        #             '
                                  'r"microsoftonline\\.com|"\n'
                                  '        #             '
                                  'r"officeconfig\\.msocdn\\.com|"\n'
                                  '        #             '
                                  'r"config\\.office\\.com|"\n'
                                  '        #             '
                                  'r"graph\\.windows\\.net",\n'
                                  '        #             string,\n'
                                  '        #         )\n'
                                  '        #     ]\n'
                                  '        #     if found_domains:\n'
                                  '        #         domains += found_domains\n'
                                  '        #         for string in '
                                  'row.strings:\n'
                                  '        #             string = '
                                  'string.strip()\n'
                                  '        #             if '
                                  're.match(ipv4cidrRegex, string):\n'
                                  '        #                 '
                                  'ipv4cidrs.append(string)\n'
                                  '        #             elif '
                                  're.match(ipv4Regex, string):\n'
                                  '        #                 '
                                  'ipv4s.append(string)\n'
                                  '\n'
                                  '        # for domain in domains:\n'
                                  '        #     result.append(\n'
                                  '        #         {\n'
                                  '        #             "value": domain,\n'
                                  '        #             "type": '
                                  'FeedIndicatorType.DomainGlob if "*" in '
                                  'domain else FeedIndicatorType.Domain,\n'
                                  '        #             "FeedURL": '
                                  'self._base_url,\n'
                                  '        #         }\n'
                                  '        #     )\n'
                                  '        # for ipv4 in ipv4s:\n'
                                  '        #     result.append({"value": ipv4, '
                                  '"type": FeedIndicatorType.IP, "FeedURL": '
                                  'self._base_url})\n'
                                  '        # for cidr in ipv4cidrs:\n'
                                  '        #     result.append({"value": cidr, '
                                  '"type": FeedIndicatorType.CIDR, "FeedURL": '
                                  'self._base_url})\n'
                                  '\n'
                                  '        return r\n'
                                  '\n'
                                  '\n'
                                  'def test_module(client: Client, *_) -> '
                                  'Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Builds the iterator to check that '
                                  'the feed is accessible.\n'
                                  '    Args:\n'
                                  '        client: Client object.\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    client.build_iterator()\n'
                                  '    return "ok", {}, {}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators(client: Client, '
                                  'feed_tags: List = [], limit: int = -1) -> '
                                  'List[Dict]:\n'
                                  '    """Retrieves indicators from the feed\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client (Client): Client object with '
                                  'request\n'
                                  '        feed_tags (list): tags to assign '
                                  'fetched indicators\n'
                                  '        limit (int): limit the results\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    iterator = client.build_iterator()\n'
                                  '    indicators = []\n'
                                  '    if limit > 0:\n'
                                  '        iterator = iterator[:limit]\n'
                                  '    for item in iterator:\n'
                                  '        value = item.get("value")\n'
                                  '        type_ = item.get("type", '
                                  'FeedIndicatorType.Domain)\n'
                                  '        raw_data = {\n'
                                  '            "value": value,\n'
                                  '            "type": type_,\n'
                                  '        }\n'
                                  '        for key, val in item.items():\n'
                                  '            raw_data.update({key: val})\n'
                                  '        indicator_obj = {"value": value, '
                                  '"type": type_, "rawJSON": raw_data, '
                                  '"fields": {}}\n'
                                  '        if feed_tags:\n'
                                  '            indicator_obj["fields"]["tags"] '
                                  '= feed_tags\n'
                                  '        if client.tlp_color:\n'
                                  '            '
                                  'indicator_obj["fields"]["trafficlightprotocol"] '
                                  '= client.tlp_color\n'
                                  '\n'
                                  '        indicators.append(indicator_obj)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def get_indicators_command(\n'
                                  '    client: Client, params: Dict[str, str], '
                                  'args: Dict[str, str]\n'
                                  ') -> Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Wrapper for retrieving indicators '
                                  'from the feed to the war-room.\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '        args: demisto.args()\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    limit = int(args.get("limit", "10"))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'feed_tags, limit)\n'
                                  '    human_readable = tableToMarkdown(\n'
                                  '        "Indicators from Microsoft Intune '
                                  'Feed:", indicators, headers=["value", '
                                  '"type"], removeNull=True\n'
                                  '    )\n'
                                  '\n'
                                  '    return human_readable, {}, '
                                  '{"raw_response": indicators}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators_command(client: '
                                  'Client, params: Dict[str, str]) -> '
                                  'List[Dict]:\n'
                                  '    """Wrapper for fetching indicators from '
                                  'the feed to the Indicators tab.\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'feed_tags)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def main():\n'
                                  '    """\n'
                                  '    PARSE AND VALIDATE INTEGRATION PARAMS\n'
                                  '    """\n'
                                  '    params = demisto.params()\n'
                                  '    base_url = params.get("url")\n'
                                  '    access_token = '
                                  'params.get("access_token").get("password")\n'
                                  '    insecure = not params.get("insecure", '
                                  'False)\n'
                                  '    proxy = params.get("proxy", False)\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '\n'
                                  '    command = demisto.command()\n'
                                  '    demisto.info(f"Command being called is '
                                  '{command}")\n'
                                  '\n'
                                  '    try:\n'
                                  '        client = Client(base_url=base_url, '
                                  'access_token=access_token, verify=insecure, '
                                  'proxy=proxy, tlp_color=tlp_color)\n'
                                  '\n'
                                  '        commands: Dict[\n'
                                  '            str, Callable[[Client, '
                                  'Dict[str, str], Dict[str, str]], Tuple[str, '
                                  'Dict[Any, Any], Dict[Any, Any]]]\n'
                                  '        ] = {"test-module": test_module, '
                                  '"cyberint-get-indicators": '
                                  'get_indicators_command}\n'
                                  '        if command in commands:\n'
                                  '            '
                                  'return_outputs(*commands[command](client, '
                                  'demisto.params(), demisto.args()))\n'
                                  '\n'
                                  '        elif command == '
                                  '"fetch-indicators":\n'
                                  '            indicators = '
                                  'fetch_indicators_command(client, '
                                  'demisto.params())\n'
                                  '            for iter_ in batch(indicators, '
                                  'batch_size=2000):\n'
                                  '                '
                                  'demisto.createIndicators(iter_)\n'
                                  '\n'
                                  '        else:\n'
                                  '            raise '
                                  'NotImplementedError(f"Command {command} is '
                                  'not implemented.")\n'
                                  '\n'
                                  '    except Exception as err:\n'
                                  '        err_msg = f"Error in '
                                  '{INTEGRATION_NAME} Integration. [{err}]"\n'
                                  '        return_error(err_msg)\n'
                                  '\n'
                                  '\n'
                                  'if __name__ in ["__main__", "builtin", '
                                  '"builtins"]:\n'
                                  '    main()\n'
                                  '\n'
                                  "register_module_line('Cyberint Feed', "
                                  "'end', __line__())\n",
                        'subtype': 'python3',
                        'type': 'python'},
 'is_password_protected': None,
 'locked': None,
 'modified': datetime.datetime(2023, 11, 23, 11, 47, 26, 115417, tzinfo=tzoffset(None, 7200)),
 'name': 'Cyberint Feed',
 'path': None,
 'prev_name': 'Cyberint Feed',
 'propagation_labels': ['all'],
 'readonly': None,
 'script_not_visible': None,
 'should_commit': False,
 'sort_values': None,
 'source_module_id': None,
 'system': None,
 'vc_should_ignore': False,
 'version': 7}
[2023-11-23T11:47:27] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:47:27] - [MainThread] - [DEBUG] - uploader.py:287 - Uploaded Integration integration-FeedCyberint.yml successfully
[2023-11-23T11:47:27] - [MainThread] - [INFO] - uploader.py:389 - UPLOAD SUMMARY:

[2023-11-23T11:47:27] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:47:27] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:47:27] - [MainThread] - [INFO] - uploader.py:422 - SUCCESSFUL UPLOADS:
╒══════════════════╤═════════════╤═════════════╤════════════════╕
│ NAME             │ TYPE        │ PACK NAME   │ PACK VERSION   │
╞══════════════════╪═════════════╪═════════════╪════════════════╡
│ FeedCyberint.yml │ Integration │             │                │
╘══════════════════╧═════════════╧═════════════╧════════════════╛

[2023-11-23T11:48:09] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T11:48:09] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T11:48:09] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T11:48:09] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-11-23T11:48:09] - [MainThread] - [DEBUG] - connectionpool.py:1019 - Starting new HTTPS connection (1): pypi.org:443
[2023-11-23T11:48:09] - [MainThread] - [DEBUG] - connectionpool.py:474 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 42701
[2023-11-23T11:48:09] - [MainThread] - [INFO] - __main__.py:228 - You are using demisto-sdk 1.21.0.
[2023-11-23T11:48:09] - [MainThread] - [INFO] - __main__.py:230 - however version 1.23.0 is available.
To update, run pip3 install --upgrade demisto-sdk
[2023-11-23T11:48:09] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T11:48:09] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T11:48:09] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T11:48:09] - [MainThread] - [DEBUG] - tools.py:3784 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-11-23T11:48:10] - [MainThread] - [INFO] - uploader.py:210 - Uploading /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml to https://192.168.30.206...
[2023-11-23T11:48:10] - [MainThread] - [DEBUG] - base_content.py:169 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:48:10] - [MainThread] - [DEBUG] - content_item.py:98 - Parsing content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:48:10] - [MainThread] - [DEBUG] - content_item.py:137 - Parsed Integration:Cyberint Feed
[2023-11-23T11:48:10] - [MainThread] - [DEBUG] - base_content.py:204 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml as <class 'demisto_sdk.commands.content_graph.objects.integration.Integration'>
[2023-11-23T11:48:10] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:48:10] - [MainThread] - [DEBUG] - content_item.py:194 - preparing /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:48:10] - [MainThread] - [DEBUG] - integration_script_unifier.py:76 - Unifying /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:48:10] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-11-23T11:48:10] - [MainThread] - [WARNING] - integration_script_unifier.py:207 - Failed getting image data for '/home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint'.
[2023-11-23T11:48:10] - [MainThread] - [INFO] - integration_script_unifier.py:650 - Did not find README in /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint, not adding integration doc link
[2023-11-23T11:48:10] - [MainThread] - [DEBUG] - integration_script_unifier.py:132 - Created unified yml: FeedCyberint.yml
[2023-11-23T11:48:10] - [MainThread] - [DEBUG] - integration_script.py:64 - The docker_native_image_config.json file could not be found.
[2023-11-23T11:48:10] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:48:10] - [MainThread] - [DEBUG] - tools.py:39 - got the following response when uploading Integration /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml: {'beta': None,
 'brand': '',
 'can_get_samples': True,
 'category': 'Data Enrichment & Threat Intelligence',
 'cmdline': None,
 'commit_message': '',
 'configuration': [{'default_value': 'https://qmasters-integration.cyberint.io/ioc/api/v1/feed/daily/',
                    'display': 'The Cyberint IOC feed endpoint URL',
                    'hidden': False,
                    'info': '',
                    'name': 'url',
                    'options': None,
                    'required': True,
                    'type': 0},
                   {'default_value': '',
                    'display': 'API Key (Leave empty. Fill in the API Key in '
                               'the password field.)',
                    'hidden': False,
                    'info': '',
                    'name': 'access_token',
                    'options': None,
                    'required': True,
                    'type': 9},
                   {'default_value': 'true',
                    'display': 'Fetch indicators',
                    'hidden': False,
                    'info': '',
                    'name': 'feed',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': 'Good',
                    'display': 'Indicator Reputation',
                    'hidden': False,
                    'info': 'Indicators from this integration instance will be '
                            'marked with this reputation',
                    'name': 'feedReputation',
                    'options': ['None', 'Good', 'Suspicious', 'Bad'],
                    'required': False,
                    'type': 18},
                   {'default_value': 'F - Reliability cannot be judged',
                    'display': 'Source Reliability',
                    'hidden': False,
                    'info': 'Reliability of the source providing the '
                            'intelligence data',
                    'name': 'feedReliability',
                    'options': ['A - Completely reliable',
                                'B - Usually reliable',
                                'C - Fairly reliable',
                                'D - Not usually reliable',
                                'E - Unreliable',
                                'F - Reliability cannot be judged'],
                    'required': True,
                    'type': 15},
                   {'default_value': '',
                    'display': 'Traffic Light Protocol Color',
                    'hidden': False,
                    'info': 'The Traffic Light Protocol (TLP) designation to '
                            'apply to indicators fetched from the feed',
                    'name': 'tlp_color',
                    'options': ['RED', 'AMBER', 'GREEN', 'WHITE'],
                    'required': False,
                    'type': 15},
                   {'default_value': 'suddenDeath',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationPolicy',
                    'options': ['never',
                                'interval',
                                'indicatorType',
                                'suddenDeath'],
                    'required': False,
                    'type': 17},
                   {'default_value': '20160',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationInterval',
                    'options': None,
                    'required': False,
                    'type': 1},
                   {'default_value': '30',
                    'display': 'Feed Fetch Interval',
                    'hidden': False,
                    'info': '',
                    'name': 'feedFetchInterval',
                    'options': None,
                    'required': False,
                    'type': 19},
                   {'default_value': '',
                    'display': 'Tags',
                    'hidden': False,
                    'info': 'Supports CSV values.',
                    'name': 'feedTags',
                    'options': None,
                    'required': False,
                    'type': 0},
                   {'default_value': 'true',
                    'display': 'Bypass exclusion list',
                    'hidden': False,
                    'info': 'When selected, the exclusion list is ignored for '
                            'indicators from this feed. This means that if an '
                            'indicator from this feed is on the exclusion '
                            'list, the indicator might still be added to the '
                            'system.',
                    'name': 'feedBypassExclusionList',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Trust any certificate (not secure)',
                    'hidden': False,
                    'info': '',
                    'name': 'insecure',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Use system proxy settings',
                    'hidden': False,
                    'info': '',
                    'name': 'proxy',
                    'options': None,
                    'required': False,
                    'type': 8}],
 'deprecated': None,
 'description': 'Use the Cyberint Feed integration to get indicators from the '
                'feed.',
 'detailed_description': '### Partner Contributed Integration\n'
                         '#### Integration Author: Cyberint\n'
                         'Support and maintenance for this integration are '
                         'provided by the author. Please use the following '
                         'contact details:\n'
                         '- **Email**: '
                         '[support@cyberint.com](mailto:support@cyberint.com)\n'
                         '- **URL**: '
                         '[https://cyberint.com](https://cyberint.com)\n'
                         '***\n',
 'display': 'Cyberint Feed (Partner Contribution)',
 'executable': None,
 'hidden': False,
 'hide_engines': None,
 'icon': '',
 'id': 'Cyberint Feed',
 'image': None,
 'integration_script': {'commands': [{'arguments': [{'auto': None,
                                                     'default': False,
                                                     'default_value': '0',
                                                     'deprecated': False,
                                                     'description': 'The '
                                                                    'maximum '
                                                                    'number of '
                                                                    'results '
                                                                    'to '
                                                                    'return. '
                                                                    'The '
                                                                    'default '
                                                                    'value is '
                                                                    '10.',
                                                     'is_array': None,
                                                     'name': 'limit',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False}],
                                      'cartesian': False,
                                      'deprecated': False,
                                      'description': 'Gets indicators from the '
                                                     'feed.',
                                      'execution': False,
                                      'hidden': False,
                                      'important': None,
                                      'name': 'cyberint-get-indicators',
                                      'outputs': None,
                                      'permitted': False,
                                      'sensitive': False,
                                      'timeout': 0}],
                        'docker_image': 'demisto/btfl-soup:1.0.1.45563',
                        'feed': True,
                        'is_fetch': False,
                        'is_fetch_credentials': False,
                        'long_running': False,
                        'long_running_port_mapping': False,
                        'run_once': False,
                        'script': "register_module_line('Cyberint Feed', "
                                  "'start', __line__())\n"
                                  '### pack version: 1.1.3\n'
                                  'import re\n'
                                  'from typing import Any, Callable, Dict, '
                                  'List, Optional, Tuple\n'
                                  '\n'
                                  '\n'
                                  'import urllib3\n'
                                  'from bs4 import BeautifulSoup\n'
                                  '\n'
                                  '\n'
                                  '# disable insecure warnings\n'
                                  'urllib3.disable_warnings()\n'
                                  '\n'
                                  'INTEGRATION_NAME = "Microsoft Intune Feed"\n'
                                  '\n'
                                  '\n'
                                  'class Client(BaseClient):\n'
                                  '    """\n'
                                  '    Client to use in the Microsoft Intune '
                                  'Feed integration. Overrides BaseClient.\n'
                                  '    """\n'
                                  '\n'
                                  '    def __init__(\n'
                                  '        self,\n'
                                  '        base_url: str,\n'
                                  '        access_token: str,\n'
                                  '        verify: bool = False,\n'
                                  '        proxy: bool = False,\n'
                                  '        tlp_color: Optional[str] = None,\n'
                                  '    ):\n'
                                  '        """\n'
                                  '        Implements class for Microsoft '
                                  'Intune feeds.\n'
                                  '        :param url: the Intune endpoint '
                                  'URL\n'
                                  '        :verify: boolean, if *false* feed '
                                  'HTTPS server certificate is verified. '
                                  'Default: *false*\n'
                                  '        :param proxy: boolean, if *false* '
                                  'feed HTTPS server certificate will not use '
                                  'proxies. Default: *false*\n'
                                  '        :param tlp_color: Traffic Light '
                                  'Protocol color.\n'
                                  '        """\n'
                                  '        self._cookies = {"access_token": '
                                  'access_token}\n'
                                  '        super().__init__(base_url, '
                                  'verify=verify, proxy=proxy)\n'
                                  '        self.tlp_color = tlp_color\n'
                                  '\n'
                                  '    def build_iterator(self, date_time: str '
                                  '= None) -> List:\n'
                                  '        """Retrieves all entries from the '
                                  'feed.\n'
                                  '\n'
                                  '        Returns:\n'
                                  '            A list of objects, containing '
                                  'the indicators.\n'
                                  '        """\n'
                                  '        result = []  # type: list\n'
                                  '        domains = []  # type: list\n'
                                  '        ipv4s = []  # type: list\n'
                                  '        ipv4cidrs = []  # type: list\n'
                                  '        date_time = "2023-11-23"\n'
                                  '        r = self._http_request("GET", '
                                  'url_suffix=date_time, '
                                  'cookies=self._cookies, resp_type="text")\n'
                                  '        # soup = BeautifulSoup(r, '
                                  '"html.parser")\n'
                                  '\n'
                                  '        # table_rows = soup.select("tbody '
                                  'tr")\n'
                                  '        # for row in table_rows:\n'
                                  '        #     found_domains = [\n'
                                  '        #         string.strip()\n'
                                  '        #         for string in '
                                  'row.strings\n'
                                  '        #         if re.search(\n'
                                  '        #             '
                                  'r"(microsoft\\.(com|net))|"\n'
                                  '        #             '
                                  'r"microsoftonline\\.com|"\n'
                                  '        #             '
                                  'r"officeconfig\\.msocdn\\.com|"\n'
                                  '        #             '
                                  'r"config\\.office\\.com|"\n'
                                  '        #             '
                                  'r"graph\\.windows\\.net",\n'
                                  '        #             string,\n'
                                  '        #         )\n'
                                  '        #     ]\n'
                                  '        #     if found_domains:\n'
                                  '        #         domains += found_domains\n'
                                  '        #         for string in '
                                  'row.strings:\n'
                                  '        #             string = '
                                  'string.strip()\n'
                                  '        #             if '
                                  're.match(ipv4cidrRegex, string):\n'
                                  '        #                 '
                                  'ipv4cidrs.append(string)\n'
                                  '        #             elif '
                                  're.match(ipv4Regex, string):\n'
                                  '        #                 '
                                  'ipv4s.append(string)\n'
                                  '\n'
                                  '        # for domain in domains:\n'
                                  '        #     result.append(\n'
                                  '        #         {\n'
                                  '        #             "value": domain,\n'
                                  '        #             "type": '
                                  'FeedIndicatorType.DomainGlob if "*" in '
                                  'domain else FeedIndicatorType.Domain,\n'
                                  '        #             "FeedURL": '
                                  'self._base_url,\n'
                                  '        #         }\n'
                                  '        #     )\n'
                                  '        # for ipv4 in ipv4s:\n'
                                  '        #     result.append({"value": ipv4, '
                                  '"type": FeedIndicatorType.IP, "FeedURL": '
                                  'self._base_url})\n'
                                  '        # for cidr in ipv4cidrs:\n'
                                  '        #     result.append({"value": cidr, '
                                  '"type": FeedIndicatorType.CIDR, "FeedURL": '
                                  'self._base_url})\n'
                                  '\n'
                                  '        return r\n'
                                  '\n'
                                  '\n'
                                  'def test_module(client: Client, *_) -> '
                                  'Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Builds the iterator to check that '
                                  'the feed is accessible.\n'
                                  '    Args:\n'
                                  '        client: Client object.\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    client.build_iterator()\n'
                                  '    return "ok", {}, {}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators(client: Client, '
                                  'feed_tags: List = [], limit: int = -1) -> '
                                  'List[Dict]:\n'
                                  '    """Retrieves indicators from the feed\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client (Client): Client object with '
                                  'request\n'
                                  '        feed_tags (list): tags to assign '
                                  'fetched indicators\n'
                                  '        limit (int): limit the results\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    iterator = client.build_iterator()\n'
                                  '    indicators = []\n'
                                  '    if limit > 0:\n'
                                  '        iterator = iterator[:limit]\n'
                                  '    for item in iterator:\n'
                                  '        value = item.get("value")\n'
                                  '        type_ = item.get("type", '
                                  'FeedIndicatorType.Domain)\n'
                                  '        raw_data = {\n'
                                  '            "value": value,\n'
                                  '            "type": type_,\n'
                                  '        }\n'
                                  '        for key, val in item.items():\n'
                                  '            raw_data.update({key: val})\n'
                                  '        indicator_obj = {"value": value, '
                                  '"type": type_, "rawJSON": raw_data, '
                                  '"fields": {}}\n'
                                  '        if feed_tags:\n'
                                  '            indicator_obj["fields"]["tags"] '
                                  '= feed_tags\n'
                                  '        if client.tlp_color:\n'
                                  '            '
                                  'indicator_obj["fields"]["trafficlightprotocol"] '
                                  '= client.tlp_color\n'
                                  '\n'
                                  '        indicators.append(indicator_obj)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def get_indicators_command(\n'
                                  '    client: Client, params: Dict[str, str], '
                                  'args: Dict[str, str]\n'
                                  ') -> Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Wrapper for retrieving indicators '
                                  'from the feed to the war-room.\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '        args: demisto.args()\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    limit = int(args.get("limit", "10"))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'feed_tags, limit)\n'
                                  '    human_readable = tableToMarkdown(\n'
                                  '        "Indicators from Microsoft Intune '
                                  'Feed:", indicators, headers=["value", '
                                  '"type"], removeNull=True\n'
                                  '    )\n'
                                  '\n'
                                  '    return human_readable, {}, '
                                  '{"raw_response": indicators}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators_command(client: '
                                  'Client, params: Dict[str, str]) -> '
                                  'List[Dict]:\n'
                                  '    """Wrapper for fetching indicators from '
                                  'the feed to the Indicators tab.\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'feed_tags)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def main():\n'
                                  '    """\n'
                                  '    PARSE AND VALIDATE INTEGRATION PARAMS\n'
                                  '    """\n'
                                  '    params = demisto.params()\n'
                                  '    base_url = params.get("url")\n'
                                  '    access_token = '
                                  'params.get("access_token").get("password")\n'
                                  '    insecure = not params.get("insecure", '
                                  'False)\n'
                                  '    proxy = params.get("proxy", False)\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '\n'
                                  '    command = demisto.command()\n'
                                  '    demisto.info(f"Command being called is '
                                  '{command}")\n'
                                  '\n'
                                  '    try:\n'
                                  '        client = Client(base_url=base_url, '
                                  'access_token=access_token, verify=insecure, '
                                  'proxy=proxy, tlp_color=tlp_color)\n'
                                  '\n'
                                  '        commands: Dict[\n'
                                  '            str, Callable[[Client, '
                                  'Dict[str, str], Dict[str, str]], Tuple[str, '
                                  'Dict[Any, Any], Dict[Any, Any]]]\n'
                                  '        ] = {"test-module": test_module, '
                                  '"cyberint-get-indicators": '
                                  'get_indicators_command}\n'
                                  '        if command in commands:\n'
                                  '            '
                                  'return_outputs(*commands[command](client, '
                                  'demisto.params(), demisto.args()))\n'
                                  '\n'
                                  '        elif command == '
                                  '"fetch-indicators":\n'
                                  '            indicators = '
                                  'fetch_indicators_command(client, '
                                  'demisto.params())\n'
                                  '            for iter_ in batch(indicators, '
                                  'batch_size=2000):\n'
                                  '                '
                                  'demisto.createIndicators(iter_)\n'
                                  '\n'
                                  '        else:\n'
                                  '            raise '
                                  'NotImplementedError(f"Command {command} is '
                                  'not implemented.")\n'
                                  '\n'
                                  '    except Exception as err:\n'
                                  '        err_msg = f"Error in '
                                  '{INTEGRATION_NAME} Integration. [{err}]"\n'
                                  '        return_error(err_msg)\n'
                                  '\n'
                                  '\n'
                                  'if __name__ in ["__main__", "builtin", '
                                  '"builtins"]:\n'
                                  '    main()\n'
                                  '\n'
                                  "register_module_line('Cyberint Feed', "
                                  "'end', __line__())\n",
                        'subtype': 'python3',
                        'type': 'python'},
 'is_password_protected': None,
 'locked': None,
 'modified': datetime.datetime(2023, 11, 23, 11, 48, 9, 360940, tzinfo=tzoffset(None, 7200)),
 'name': 'Cyberint Feed',
 'path': None,
 'prev_name': 'Cyberint Feed',
 'propagation_labels': ['all'],
 'readonly': None,
 'script_not_visible': None,
 'should_commit': False,
 'sort_values': None,
 'source_module_id': None,
 'system': None,
 'vc_should_ignore': False,
 'version': 8}
[2023-11-23T11:48:10] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T11:48:10] - [MainThread] - [DEBUG] - uploader.py:287 - Uploaded Integration integration-FeedCyberint.yml successfully
[2023-11-23T11:48:10] - [MainThread] - [INFO] - uploader.py:389 - UPLOAD SUMMARY:

[2023-11-23T11:48:10] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:48:10] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T11:48:10] - [MainThread] - [INFO] - uploader.py:422 - SUCCESSFUL UPLOADS:
╒══════════════════╤═════════════╤═════════════╤════════════════╕
│ NAME             │ TYPE        │ PACK NAME   │ PACK VERSION   │
╞══════════════════╪═════════════╪═════════════╪════════════════╡
│ FeedCyberint.yml │ Integration │             │                │
╘══════════════════╧═════════════╧═════════════╧════════════════╛

[2023-11-23T13:42:03] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T13:42:03] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T13:42:03] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T13:42:03] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-11-23T13:42:03] - [MainThread] - [DEBUG] - connectionpool.py:1019 - Starting new HTTPS connection (1): pypi.org:443
[2023-11-23T13:42:13] - [MainThread] - [DEBUG] - connectionpool.py:474 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 42701
[2023-11-23T13:42:13] - [MainThread] - [INFO] - __main__.py:228 - You are using demisto-sdk 1.21.0.
[2023-11-23T13:42:13] - [MainThread] - [INFO] - __main__.py:230 - however version 1.23.0 is available.
To update, run pip3 install --upgrade demisto-sdk
[2023-11-23T13:42:13] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T13:42:13] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T13:42:13] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T13:42:13] - [MainThread] - [DEBUG] - tools.py:3784 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-11-23T13:42:14] - [MainThread] - [INFO] - uploader.py:210 - Uploading /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml to https://192.168.30.206...
[2023-11-23T13:42:14] - [MainThread] - [DEBUG] - base_content.py:169 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T13:42:14] - [MainThread] - [DEBUG] - content_item.py:98 - Parsing content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T13:42:14] - [MainThread] - [DEBUG] - content_item.py:137 - Parsed Integration:Cyberint Feed
[2023-11-23T13:42:14] - [MainThread] - [DEBUG] - base_content.py:204 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml as <class 'demisto_sdk.commands.content_graph.objects.integration.Integration'>
[2023-11-23T13:42:14] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T13:42:14] - [MainThread] - [DEBUG] - content_item.py:194 - preparing /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T13:42:14] - [MainThread] - [DEBUG] - integration_script_unifier.py:76 - Unifying /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T13:42:14] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-11-23T13:42:14] - [MainThread] - [WARNING] - integration_script_unifier.py:207 - Failed getting image data for '/home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint'.
[2023-11-23T13:42:14] - [MainThread] - [INFO] - integration_script_unifier.py:650 - Did not find README in /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint, not adding integration doc link
[2023-11-23T13:42:14] - [MainThread] - [DEBUG] - integration_script_unifier.py:132 - Created unified yml: FeedCyberint.yml
[2023-11-23T13:42:14] - [MainThread] - [DEBUG] - integration_script.py:64 - The docker_native_image_config.json file could not be found.
[2023-11-23T13:42:14] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T13:42:15] - [MainThread] - [DEBUG] - tools.py:39 - got the following response when uploading Integration /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml: {'beta': None,
 'brand': '',
 'can_get_samples': True,
 'category': 'Data Enrichment & Threat Intelligence',
 'cmdline': None,
 'commit_message': '',
 'configuration': [{'default_value': 'https://qmasters-integration.cyberint.io/ioc/api/v1/feed/daily/',
                    'display': 'The Cyberint IOC feed endpoint URL',
                    'hidden': False,
                    'info': '',
                    'name': 'url',
                    'options': None,
                    'required': True,
                    'type': 0},
                   {'default_value': '',
                    'display': 'API Key (Leave empty. Fill in the API Key in '
                               'the password field.)',
                    'hidden': False,
                    'info': '',
                    'name': 'access_token',
                    'options': None,
                    'required': True,
                    'type': 9},
                   {'default_value': 'true',
                    'display': 'Fetch indicators',
                    'hidden': False,
                    'info': '',
                    'name': 'feed',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': 'Good',
                    'display': 'Indicator Reputation',
                    'hidden': False,
                    'info': 'Indicators from this integration instance will be '
                            'marked with this reputation',
                    'name': 'feedReputation',
                    'options': ['None', 'Good', 'Suspicious', 'Bad'],
                    'required': False,
                    'type': 18},
                   {'default_value': 'F - Reliability cannot be judged',
                    'display': 'Source Reliability',
                    'hidden': False,
                    'info': 'Reliability of the source providing the '
                            'intelligence data',
                    'name': 'feedReliability',
                    'options': ['A - Completely reliable',
                                'B - Usually reliable',
                                'C - Fairly reliable',
                                'D - Not usually reliable',
                                'E - Unreliable',
                                'F - Reliability cannot be judged'],
                    'required': True,
                    'type': 15},
                   {'default_value': '',
                    'display': 'Traffic Light Protocol Color',
                    'hidden': False,
                    'info': 'The Traffic Light Protocol (TLP) designation to '
                            'apply to indicators fetched from the feed',
                    'name': 'tlp_color',
                    'options': ['RED', 'AMBER', 'GREEN', 'WHITE'],
                    'required': False,
                    'type': 15},
                   {'default_value': 'suddenDeath',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationPolicy',
                    'options': ['never',
                                'interval',
                                'indicatorType',
                                'suddenDeath'],
                    'required': False,
                    'type': 17},
                   {'default_value': '20160',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationInterval',
                    'options': None,
                    'required': False,
                    'type': 1},
                   {'default_value': '30',
                    'display': 'Feed Fetch Interval',
                    'hidden': False,
                    'info': '',
                    'name': 'feedFetchInterval',
                    'options': None,
                    'required': False,
                    'type': 19},
                   {'default_value': '',
                    'display': 'Tags',
                    'hidden': False,
                    'info': 'Supports CSV values.',
                    'name': 'feedTags',
                    'options': None,
                    'required': False,
                    'type': 0},
                   {'default_value': 'true',
                    'display': 'Bypass exclusion list',
                    'hidden': False,
                    'info': 'When selected, the exclusion list is ignored for '
                            'indicators from this feed. This means that if an '
                            'indicator from this feed is on the exclusion '
                            'list, the indicator might still be added to the '
                            'system.',
                    'name': 'feedBypassExclusionList',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Trust any certificate (not secure)',
                    'hidden': False,
                    'info': '',
                    'name': 'insecure',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Use system proxy settings',
                    'hidden': False,
                    'info': '',
                    'name': 'proxy',
                    'options': None,
                    'required': False,
                    'type': 8}],
 'deprecated': None,
 'description': 'Use the Cyberint Feed integration to get indicators from the '
                'feed.',
 'detailed_description': '### Partner Contributed Integration\n'
                         '#### Integration Author: Cyberint\n'
                         'Support and maintenance for this integration are '
                         'provided by the author. Please use the following '
                         'contact details:\n'
                         '- **Email**: '
                         '[support@cyberint.com](mailto:support@cyberint.com)\n'
                         '- **URL**: '
                         '[https://cyberint.com](https://cyberint.com)\n'
                         '***\n',
 'display': 'Cyberint Feed (Partner Contribution)',
 'executable': None,
 'hidden': False,
 'hide_engines': None,
 'icon': '',
 'id': 'Cyberint Feed',
 'image': None,
 'integration_script': {'commands': [{'arguments': [{'auto': None,
                                                     'default': False,
                                                     'default_value': '0',
                                                     'deprecated': False,
                                                     'description': 'The '
                                                                    'maximum '
                                                                    'number of '
                                                                    'results '
                                                                    'to '
                                                                    'return. '
                                                                    'The '
                                                                    'default '
                                                                    'value is '
                                                                    '10.',
                                                     'is_array': None,
                                                     'name': 'limit',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False}],
                                      'cartesian': False,
                                      'deprecated': False,
                                      'description': 'Gets indicators from the '
                                                     'feed.',
                                      'execution': False,
                                      'hidden': False,
                                      'important': None,
                                      'name': 'cyberint-get-indicators',
                                      'outputs': None,
                                      'permitted': False,
                                      'sensitive': False,
                                      'timeout': 0}],
                        'docker_image': 'demisto/btfl-soup:1.0.1.45563',
                        'feed': True,
                        'is_fetch': False,
                        'is_fetch_credentials': False,
                        'long_running': False,
                        'long_running_port_mapping': False,
                        'run_once': False,
                        'script': "register_module_line('Cyberint Feed', "
                                  "'start', __line__())\n"
                                  '### pack version: 1.1.3\n'
                                  'import re\n'
                                  'from typing import Any, Callable, Dict, '
                                  'List, Optional, Tuple\n'
                                  '\n'
                                  '\n'
                                  'import urllib3\n'
                                  'from bs4 import BeautifulSoup\n'
                                  '\n'
                                  '\n'
                                  '# disable insecure warnings\n'
                                  'urllib3.disable_warnings()\n'
                                  '\n'
                                  'INTEGRATION_NAME = "Microsoft Intune Feed"\n'
                                  '\n'
                                  '\n'
                                  'class Client(BaseClient):\n'
                                  '    """\n'
                                  '    Client to use in the Microsoft Intune '
                                  'Feed integration. Overrides BaseClient.\n'
                                  '    """\n'
                                  '\n'
                                  '    def __init__(\n'
                                  '        self,\n'
                                  '        base_url: str,\n'
                                  '        access_token: str,\n'
                                  '        verify: bool = False,\n'
                                  '        proxy: bool = False,\n'
                                  '    ):\n'
                                  '        self._cookies = {"access_token": '
                                  'access_token}\n'
                                  '        super().__init__(base_url, '
                                  'verify=verify, proxy=proxy)\n'
                                  '\n'
                                  '    def build_iterator(self, date_time: str '
                                  '= None) -> List:\n'
                                  '        """Retrieves all entries from the '
                                  'feed.\n'
                                  '\n'
                                  '        Returns:\n'
                                  '            A list of objects, containing '
                                  'the indicators.\n'
                                  '        """\n'
                                  '        result = []  # type: list\n'
                                  '        domains = []  # type: list\n'
                                  '        ipv4s = []  # type: list\n'
                                  '        files = []  # type: list\n'
                                  '        urls = []  # type: list\n'
                                  '\n'
                                  '        date_time = "2023-11-23"\n'
                                  '        response = '
                                  'self._http_request("GET", '
                                  'url_suffix=date_time, '
                                  'cookies=self._cookies, res_type="text")\n'
                                  '        feeds = '
                                  'response.strip().split("\\n")\n'
                                  '        ioc_feeds = [json.loads(feed) for '
                                  'feed in feeds]\n'
                                  '\n'
                                  '        for indicator in ioc_feeds:\n'
                                  '            # Infer the type of the '
                                  'indicator using '
                                  "'auto_detect_indicator_type(indicator)' "
                                  'function\n'
                                  '            # (defined in '
                                  'CommonServerPython).\n'
                                  '            if indicator_type := '
                                  'auto_detect_indicator_type(indicator["ioc_value"]):\n'
                                  '                result.append(\n'
                                  '                    {\n'
                                  '                        "value": '
                                  'indicator,\n'
                                  '                        "type": '
                                  'indicator_type,\n'
                                  '                        "FeedURL": '
                                  'self._base_url,\n'
                                  '                        "relations": [{}],\n'
                                  '                    }\n'
                                  '                )\n'
                                  '        # for ioc in ioc_feeds:\n'
                                  '        #     if ioc["ioc_type"] == '
                                  '"ipv4":\n'
                                  '        #         ipv4s.append(ioc)\n'
                                  '        #     if ioc["ioc_type"] == '
                                  '"file/sha256":\n'
                                  '        #         files.append(ioc)\n'
                                  '        #     if ioc["ioc_type"] == '
                                  '"domain":\n'
                                  '        #         domains.append(ioc)\n'
                                  '        #     if ioc["ioc_type"] == "url":\n'
                                  '        #         urls.append(ioc)\n'
                                  '\n'
                                  '        # for domain in domains:\n'
                                  '        #     result.append(\n'
                                  '        #         {\n'
                                  '        #             "value": domain,\n'
                                  '        #             "type": '
                                  'FeedIndicatorType.DomainGlob if "*" in '
                                  'domain else FeedIndicatorType.Domain,\n'
                                  '        #             "FeedURL": '
                                  'self._base_url,\n'
                                  '        #         }\n'
                                  '        #     )\n'
                                  '        # for ipv4 in ipv4s:\n'
                                  '        #     result.append({"value": ipv4, '
                                  '"type": FeedIndicatorType.IP, "FeedURL": '
                                  'self._base_url})\n'
                                  '        # for url in urls:\n'
                                  '        #     result.append({"value": url, '
                                  '"type": FeedIndicatorType.URL, "FeedURL": '
                                  'self._base_url})\n'
                                  '        # for file in files:\n'
                                  '        #     result.append({"value": file, '
                                  '"type": FeedIndicatorType.File, "FeedURL": '
                                  'self._base_url})\n'
                                  '\n'
                                  '        return result\n'
                                  '\n'
                                  '\n'
                                  'def test_module(client: Client, *_) -> '
                                  'Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Builds the iterator to check that '
                                  'the feed is accessible.\n'
                                  '    Args:\n'
                                  '        client: Client object.\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    client.build_iterator()\n'
                                  '    return "ok", {}, {}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators(\n'
                                  '    client: Client,\n'
                                  '    tlp_color: str,\n'
                                  '    feed_tags: List = [],\n'
                                  '    limit: int = -1,\n'
                                  ') -> List[Dict]:\n'
                                  '    """Retrieves indicators from the feed\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client (Client): Client object with '
                                  'request\n'
                                  '        feed_tags (list): tags to assign '
                                  'fetched indicators\n'
                                  '        limit (int): limit the results\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    iterator = client.build_iterator()\n'
                                  '    indicators = []\n'
                                  '    if limit > 0:\n'
                                  '        iterator = iterator[:limit]\n'
                                  '\n'
                                  '    # extract values from iterator\n'
                                  '    for item in iterator:\n'
                                  '        value_ = item.get("value")\n'
                                  '        type_ = item.get("type")\n'
                                  '        raw_data = {\n'
                                  '            "value": value_,\n'
                                  '            "type": type_,\n'
                                  '        }\n'
                                  '\n'
                                  '        # Create indicator object for each '
                                  'value.\n'
                                  '        # The object consists of a '
                                  'dictionary with required and optional keys '
                                  'and values, as described blow.\n'
                                  '        for key, value in item.items():\n'
                                  '            raw_data.update({key: value})\n'
                                  '        indicator_obj = {\n'
                                  '            # The indicator value.\n'
                                  '            "value": value_,\n'
                                  '            # The indicator type as defined '
                                  'in Cortex XSOAR.\n'
                                  '            # One can use the '
                                  'FeedIndicatorType class under '
                                  'CommonServerPython to populate this field.\n'
                                  '            "type": type_,\n'
                                  '            # The name of the service '
                                  'supplying this feed.\n'
                                  '            "service": "HelloWorld",\n'
                                  '            # A dictionary that maps values '
                                  'to existing indicator fields defined in '
                                  'Cortex XSOAR.\n'
                                  '            # One can use this section in '
                                  'order to map custom indicator fields '
                                  'previously defined\n'
                                  '            # in Cortex XSOAR to their '
                                  'values.\n'
                                  '            "fields": {},\n'
                                  '            # A dictionary of the raw data '
                                  'returned from the feed source about the '
                                  'indicator.\n'
                                  '            "rawJSON": raw_data,\n'
                                  '        }\n'
                                  '\n'
                                  '        if feed_tags:\n'
                                  '            indicator_obj["fields"]["tags"] '
                                  '= feed_tags\n'
                                  '\n'
                                  '        if tlp_color:\n'
                                  '            '
                                  'indicator_obj["fields"]["trafficlightprotocol"] '
                                  '= tlp_color\n'
                                  '\n'
                                  '        indicators.append(indicator_obj)\n'
                                  '\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def get_indicators_command(client: Client, '
                                  'params: Dict[str, str], args: Dict[str, '
                                  'str]) -> CommandResults:\n'
                                  '    """Wrapper for retrieving indicators '
                                  'from the feed to the war-room.\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '        args: demisto.args()\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    limit = int(args.get("limit", "10"))\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'tlp_color, feed_tags, limit)\n'
                                  '    human_readable = tableToMarkdown(\n'
                                  '        "Indicators from Cyberint Feed:",\n'
                                  '        indicators,\n'
                                  '        headers=["value", "type"],\n'
                                  '        '
                                  'headerTransform=string_to_table_header,\n'
                                  '        removeNull=True,\n'
                                  '    )\n'
                                  '    return CommandResults(\n'
                                  '        readable_output=human_readable,\n'
                                  '        outputs_prefix="",\n'
                                  '        outputs_key_field="",\n'
                                  '        raw_response=indicators,\n'
                                  '        outputs={},\n'
                                  '    )\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators_command(client: '
                                  'Client, params: Dict[str, str]) -> '
                                  'List[Dict]:\n'
                                  '    """Wrapper for fetching indicators from '
                                  'the feed to the Indicators tab.\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '\n'
                                  '    indicators = fetch_indicators(client, '
                                  'tlp_color, feed_tags)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def main():\n'
                                  '    """\n'
                                  '    PARSE AND VALIDATE INTEGRATION PARAMS\n'
                                  '    """\n'
                                  '    params = demisto.params()\n'
                                  '    base_url = params.get("url")\n'
                                  '    access_token = '
                                  'params.get("access_token").get("password")\n'
                                  '    insecure = not params.get("insecure", '
                                  'False)\n'
                                  '    proxy = params.get("proxy", False)\n'
                                  '\n'
                                  '    command = demisto.command()\n'
                                  '    demisto.info(f"Command being called is '
                                  '{command}")\n'
                                  '\n'
                                  '    try:\n'
                                  '        client = Client(\n'
                                  '            base_url=base_url,\n'
                                  '            access_token=access_token,\n'
                                  '            verify=insecure,\n'
                                  '            proxy=proxy,\n'
                                  '        )\n'
                                  '\n'
                                  '        if command == "test-module":\n'
                                  '            # This is the call made when '
                                  'pressing the integration Test button.\n'
                                  '            '
                                  'return_results(test_module(client))\n'
                                  '\n'
                                  '        elif command == '
                                  '"cyberint-get-indicators":\n'
                                  '            # This is the command that '
                                  'fetches a limited number of indicators from '
                                  'the feed source\n'
                                  '            # and displays them in the war '
                                  'room.\n'
                                  '            '
                                  'return_results(get_indicators_command(client, '
                                  'params, args))\n'
                                  '\n'
                                  '        elif command == '
                                  '"fetch-indicators":\n'
                                  '            # This is the command that '
                                  'initiates a request to the feed endpoint '
                                  'and create new indicators objects from\n'
                                  '            # the data fetched. If the '
                                  'integration instance is configured to fetch '
                                  'indicators, then this is the command\n'
                                  '            # that will be executed at the '
                                  'specified feed fetch interval.\n'
                                  '            indicators = '
                                  'fetch_indicators_command(client, params)\n'
                                  '            for iter_ in batch(indicators, '
                                  'batch_size=2000):\n'
                                  '                '
                                  'demisto.createIndicators(iter_)\n'
                                  '\n'
                                  '        else:\n'
                                  '            raise '
                                  'NotImplementedError(f"Command {command} is '
                                  'not implemented.")\n'
                                  '\n'
                                  '    # Log exceptions and return errors\n'
                                  '    except Exception as e:\n'
                                  '        return_error(f"Failed to execute '
                                  '{command} command.\\nError:\\n{str(e)}")\n'
                                  '\n'
                                  '\n'
                                  'if __name__ in ["__main__", "builtin", '
                                  '"builtins"]:\n'
                                  '    main()\n'
                                  '\n'
                                  "register_module_line('Cyberint Feed', "
                                  "'end', __line__())\n",
                        'subtype': 'python3',
                        'type': 'python'},
 'is_password_protected': None,
 'locked': None,
 'modified': datetime.datetime(2023, 11, 23, 13, 42, 13, 836569, tzinfo=tzoffset(None, 7200)),
 'name': 'Cyberint Feed',
 'path': None,
 'prev_name': 'Cyberint Feed',
 'propagation_labels': ['all'],
 'readonly': None,
 'script_not_visible': None,
 'should_commit': False,
 'sort_values': None,
 'source_module_id': None,
 'system': None,
 'vc_should_ignore': False,
 'version': 9}
[2023-11-23T13:42:15] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T13:42:15] - [MainThread] - [DEBUG] - uploader.py:287 - Uploaded Integration integration-FeedCyberint.yml successfully
[2023-11-23T13:42:15] - [MainThread] - [INFO] - uploader.py:389 - UPLOAD SUMMARY:

[2023-11-23T13:42:15] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T13:42:15] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T13:42:15] - [MainThread] - [INFO] - uploader.py:422 - SUCCESSFUL UPLOADS:
╒══════════════════╤═════════════╤═════════════╤════════════════╕
│ NAME             │ TYPE        │ PACK NAME   │ PACK VERSION   │
╞══════════════════╪═════════════╪═════════════╪════════════════╡
│ FeedCyberint.yml │ Integration │             │                │
╘══════════════════╧═════════════╧═════════════╧════════════════╛

[2023-11-23T13:43:46] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T13:43:46] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T13:43:46] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T13:43:46] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-11-23T13:43:46] - [MainThread] - [DEBUG] - connectionpool.py:1019 - Starting new HTTPS connection (1): pypi.org:443
[2023-11-23T13:43:46] - [MainThread] - [DEBUG] - connectionpool.py:474 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 42701
[2023-11-23T13:43:46] - [MainThread] - [INFO] - __main__.py:228 - You are using demisto-sdk 1.21.0.
[2023-11-23T13:43:46] - [MainThread] - [INFO] - __main__.py:230 - however version 1.23.0 is available.
To update, run pip3 install --upgrade demisto-sdk
[2023-11-23T13:43:46] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T13:43:46] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T13:43:46] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T13:43:46] - [MainThread] - [DEBUG] - tools.py:3784 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-11-23T13:43:47] - [MainThread] - [INFO] - uploader.py:210 - Uploading /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml to https://192.168.30.206...
[2023-11-23T13:43:47] - [MainThread] - [DEBUG] - base_content.py:169 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T13:43:47] - [MainThread] - [DEBUG] - content_item.py:98 - Parsing content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T13:43:47] - [MainThread] - [DEBUG] - content_item.py:137 - Parsed Integration:Cyberint Feed
[2023-11-23T13:43:47] - [MainThread] - [DEBUG] - base_content.py:204 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml as <class 'demisto_sdk.commands.content_graph.objects.integration.Integration'>
[2023-11-23T13:43:47] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T13:43:47] - [MainThread] - [DEBUG] - content_item.py:194 - preparing /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T13:43:47] - [MainThread] - [DEBUG] - integration_script_unifier.py:76 - Unifying /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T13:43:47] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-11-23T13:43:47] - [MainThread] - [WARNING] - integration_script_unifier.py:207 - Failed getting image data for '/home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint'.
[2023-11-23T13:43:47] - [MainThread] - [INFO] - integration_script_unifier.py:650 - Did not find README in /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint, not adding integration doc link
[2023-11-23T13:43:47] - [MainThread] - [DEBUG] - integration_script_unifier.py:132 - Created unified yml: FeedCyberint.yml
[2023-11-23T13:43:47] - [MainThread] - [DEBUG] - integration_script.py:64 - The docker_native_image_config.json file could not be found.
[2023-11-23T13:43:47] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T13:43:48] - [MainThread] - [DEBUG] - tools.py:39 - got the following response when uploading Integration /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml: {'beta': None,
 'brand': '',
 'can_get_samples': True,
 'category': 'Data Enrichment & Threat Intelligence',
 'cmdline': None,
 'commit_message': '',
 'configuration': [{'default_value': 'https://qmasters-integration.cyberint.io/ioc/api/v1/feed/daily/',
                    'display': 'The Cyberint IOC feed endpoint URL',
                    'hidden': False,
                    'info': '',
                    'name': 'url',
                    'options': None,
                    'required': True,
                    'type': 0},
                   {'default_value': '',
                    'display': 'API Key (Leave empty. Fill in the API Key in '
                               'the password field.)',
                    'hidden': False,
                    'info': '',
                    'name': 'access_token',
                    'options': None,
                    'required': True,
                    'type': 9},
                   {'default_value': 'true',
                    'display': 'Fetch indicators',
                    'hidden': False,
                    'info': '',
                    'name': 'feed',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': 'Good',
                    'display': 'Indicator Reputation',
                    'hidden': False,
                    'info': 'Indicators from this integration instance will be '
                            'marked with this reputation',
                    'name': 'feedReputation',
                    'options': ['None', 'Good', 'Suspicious', 'Bad'],
                    'required': False,
                    'type': 18},
                   {'default_value': 'F - Reliability cannot be judged',
                    'display': 'Source Reliability',
                    'hidden': False,
                    'info': 'Reliability of the source providing the '
                            'intelligence data',
                    'name': 'feedReliability',
                    'options': ['A - Completely reliable',
                                'B - Usually reliable',
                                'C - Fairly reliable',
                                'D - Not usually reliable',
                                'E - Unreliable',
                                'F - Reliability cannot be judged'],
                    'required': True,
                    'type': 15},
                   {'default_value': '',
                    'display': 'Traffic Light Protocol Color',
                    'hidden': False,
                    'info': 'The Traffic Light Protocol (TLP) designation to '
                            'apply to indicators fetched from the feed',
                    'name': 'tlp_color',
                    'options': ['RED', 'AMBER', 'GREEN', 'WHITE'],
                    'required': False,
                    'type': 15},
                   {'default_value': 'suddenDeath',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationPolicy',
                    'options': ['never',
                                'interval',
                                'indicatorType',
                                'suddenDeath'],
                    'required': False,
                    'type': 17},
                   {'default_value': '20160',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationInterval',
                    'options': None,
                    'required': False,
                    'type': 1},
                   {'default_value': '30',
                    'display': 'Feed Fetch Interval',
                    'hidden': False,
                    'info': '',
                    'name': 'feedFetchInterval',
                    'options': None,
                    'required': False,
                    'type': 19},
                   {'default_value': '',
                    'display': 'Tags',
                    'hidden': False,
                    'info': 'Supports CSV values.',
                    'name': 'feedTags',
                    'options': None,
                    'required': False,
                    'type': 0},
                   {'default_value': 'true',
                    'display': 'Bypass exclusion list',
                    'hidden': False,
                    'info': 'When selected, the exclusion list is ignored for '
                            'indicators from this feed. This means that if an '
                            'indicator from this feed is on the exclusion '
                            'list, the indicator might still be added to the '
                            'system.',
                    'name': 'feedBypassExclusionList',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Trust any certificate (not secure)',
                    'hidden': False,
                    'info': '',
                    'name': 'insecure',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Use system proxy settings',
                    'hidden': False,
                    'info': '',
                    'name': 'proxy',
                    'options': None,
                    'required': False,
                    'type': 8}],
 'deprecated': None,
 'description': 'Use the Cyberint Feed integration to get indicators from the '
                'feed.',
 'detailed_description': '### Partner Contributed Integration\n'
                         '#### Integration Author: Cyberint\n'
                         'Support and maintenance for this integration are '
                         'provided by the author. Please use the following '
                         'contact details:\n'
                         '- **Email**: '
                         '[support@cyberint.com](mailto:support@cyberint.com)\n'
                         '- **URL**: '
                         '[https://cyberint.com](https://cyberint.com)\n'
                         '***\n',
 'display': 'Cyberint Feed (Partner Contribution)',
 'executable': None,
 'hidden': False,
 'hide_engines': None,
 'icon': '',
 'id': 'Cyberint Feed',
 'image': None,
 'integration_script': {'commands': [{'arguments': [{'auto': None,
                                                     'default': False,
                                                     'default_value': '0',
                                                     'deprecated': False,
                                                     'description': 'The '
                                                                    'maximum '
                                                                    'number of '
                                                                    'results '
                                                                    'to '
                                                                    'return. '
                                                                    'The '
                                                                    'default '
                                                                    'value is '
                                                                    '10.',
                                                     'is_array': None,
                                                     'name': 'limit',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False}],
                                      'cartesian': False,
                                      'deprecated': False,
                                      'description': 'Gets indicators from the '
                                                     'feed.',
                                      'execution': False,
                                      'hidden': False,
                                      'important': None,
                                      'name': 'cyberint-get-indicators',
                                      'outputs': None,
                                      'permitted': False,
                                      'sensitive': False,
                                      'timeout': 0}],
                        'docker_image': 'demisto/btfl-soup:1.0.1.45563',
                        'feed': True,
                        'is_fetch': False,
                        'is_fetch_credentials': False,
                        'long_running': False,
                        'long_running_port_mapping': False,
                        'run_once': False,
                        'script': "register_module_line('Cyberint Feed', "
                                  "'start', __line__())\n"
                                  '### pack version: 1.1.3\n'
                                  'import re\n'
                                  'from typing import Any, Callable, Dict, '
                                  'List, Optional, Tuple\n'
                                  '\n'
                                  '\n'
                                  'import urllib3\n'
                                  'from bs4 import BeautifulSoup\n'
                                  '\n'
                                  '\n'
                                  '# disable insecure warnings\n'
                                  'urllib3.disable_warnings()\n'
                                  '\n'
                                  'INTEGRATION_NAME = "Microsoft Intune Feed"\n'
                                  '\n'
                                  '\n'
                                  'class Client(BaseClient):\n'
                                  '    """\n'
                                  '    Client to use in the Microsoft Intune '
                                  'Feed integration. Overrides BaseClient.\n'
                                  '    """\n'
                                  '\n'
                                  '    def __init__(\n'
                                  '        self,\n'
                                  '        base_url: str,\n'
                                  '        access_token: str,\n'
                                  '        verify: bool = False,\n'
                                  '        proxy: bool = False,\n'
                                  '    ):\n'
                                  '        self._cookies = {"access_token": '
                                  'access_token}\n'
                                  '        super().__init__(base_url, '
                                  'verify=verify, proxy=proxy)\n'
                                  '\n'
                                  '    def build_iterator(self, date_time: str '
                                  '= None) -> List:\n'
                                  '        """Retrieves all entries from the '
                                  'feed.\n'
                                  '\n'
                                  '        Returns:\n'
                                  '            A list of objects, containing '
                                  'the indicators.\n'
                                  '        """\n'
                                  '        result = []  # type: list\n'
                                  '        domains = []  # type: list\n'
                                  '        ipv4s = []  # type: list\n'
                                  '        files = []  # type: list\n'
                                  '        urls = []  # type: list\n'
                                  '\n'
                                  '        date_time = "2023-11-23"\n'
                                  '        response = '
                                  'self._http_request("GET", '
                                  'url_suffix=date_time, '
                                  'cookies=self._cookies, res_type="text")\n'
                                  '        feeds = '
                                  'response.strip().split("\\n")\n'
                                  '        ioc_feeds = [json.loads(feed) for '
                                  'feed in feeds]\n'
                                  '\n'
                                  '        for indicator in ioc_feeds:\n'
                                  '            # Infer the type of the '
                                  'indicator using '
                                  "'auto_detect_indicator_type(indicator)' "
                                  'function\n'
                                  '            # (defined in '
                                  'CommonServerPython).\n'
                                  '            if indicator_type := '
                                  'auto_detect_indicator_type(indicator["ioc_value"]):\n'
                                  '                result.append(\n'
                                  '                    {\n'
                                  '                        "value": '
                                  'indicator,\n'
                                  '                        "type": '
                                  'indicator_type,\n'
                                  '                        "FeedURL": '
                                  'self._base_url,\n'
                                  '                        "relations": [{}],\n'
                                  '                    }\n'
                                  '                )\n'
                                  '        # for ioc in ioc_feeds:\n'
                                  '        #     if ioc["ioc_type"] == '
                                  '"ipv4":\n'
                                  '        #         ipv4s.append(ioc)\n'
                                  '        #     if ioc["ioc_type"] == '
                                  '"file/sha256":\n'
                                  '        #         files.append(ioc)\n'
                                  '        #     if ioc["ioc_type"] == '
                                  '"domain":\n'
                                  '        #         domains.append(ioc)\n'
                                  '        #     if ioc["ioc_type"] == "url":\n'
                                  '        #         urls.append(ioc)\n'
                                  '\n'
                                  '        # for domain in domains:\n'
                                  '        #     result.append(\n'
                                  '        #         {\n'
                                  '        #             "value": domain,\n'
                                  '        #             "type": '
                                  'FeedIndicatorType.DomainGlob if "*" in '
                                  'domain else FeedIndicatorType.Domain,\n'
                                  '        #             "FeedURL": '
                                  'self._base_url,\n'
                                  '        #         }\n'
                                  '        #     )\n'
                                  '        # for ipv4 in ipv4s:\n'
                                  '        #     result.append({"value": ipv4, '
                                  '"type": FeedIndicatorType.IP, "FeedURL": '
                                  'self._base_url})\n'
                                  '        # for url in urls:\n'
                                  '        #     result.append({"value": url, '
                                  '"type": FeedIndicatorType.URL, "FeedURL": '
                                  'self._base_url})\n'
                                  '        # for file in files:\n'
                                  '        #     result.append({"value": file, '
                                  '"type": FeedIndicatorType.File, "FeedURL": '
                                  'self._base_url})\n'
                                  '\n'
                                  '        return result\n'
                                  '\n'
                                  '\n'
                                  'def test_module(client: Client, *_) -> '
                                  'Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Builds the iterator to check that '
                                  'the feed is accessible.\n'
                                  '    Args:\n'
                                  '        client: Client object.\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    client.build_iterator()\n'
                                  '    return "ok", {}, {}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators(\n'
                                  '    client: Client,\n'
                                  '    tlp_color: str,\n'
                                  '    feed_tags: List = [],\n'
                                  '    limit: int = -1,\n'
                                  ') -> List[Dict]:\n'
                                  '    """Retrieves indicators from the feed\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client (Client): Client object with '
                                  'request\n'
                                  '        feed_tags (list): tags to assign '
                                  'fetched indicators\n'
                                  '        limit (int): limit the results\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    iterator = client.build_iterator()\n'
                                  '    indicators = []\n'
                                  '    if limit > 0:\n'
                                  '        iterator = iterator[:limit]\n'
                                  '\n'
                                  '    # extract values from iterator\n'
                                  '    for item in iterator:\n'
                                  '        value_ = item.get("value")\n'
                                  '        type_ = item.get("type")\n'
                                  '        raw_data = {\n'
                                  '            "value": value_,\n'
                                  '            "type": type_,\n'
                                  '        }\n'
                                  '\n'
                                  '        # Create indicator object for each '
                                  'value.\n'
                                  '        # The object consists of a '
                                  'dictionary with required and optional keys '
                                  'and values, as described blow.\n'
                                  '        for key, value in item.items():\n'
                                  '            raw_data.update({key: value})\n'
                                  '        indicator_obj = {\n'
                                  '            # The indicator value.\n'
                                  '            "value": value_,\n'
                                  '            # The indicator type as defined '
                                  'in Cortex XSOAR.\n'
                                  '            # One can use the '
                                  'FeedIndicatorType class under '
                                  'CommonServerPython to populate this field.\n'
                                  '            "type": type_,\n'
                                  '            # The name of the service '
                                  'supplying this feed.\n'
                                  '            "service": "HelloWorld",\n'
                                  '            # A dictionary that maps values '
                                  'to existing indicator fields defined in '
                                  'Cortex XSOAR.\n'
                                  '            # One can use this section in '
                                  'order to map custom indicator fields '
                                  'previously defined\n'
                                  '            # in Cortex XSOAR to their '
                                  'values.\n'
                                  '            "fields": {},\n'
                                  '            # A dictionary of the raw data '
                                  'returned from the feed source about the '
                                  'indicator.\n'
                                  '            "rawJSON": raw_data,\n'
                                  '        }\n'
                                  '\n'
                                  '        if feed_tags:\n'
                                  '            indicator_obj["fields"]["tags"] '
                                  '= feed_tags\n'
                                  '\n'
                                  '        if tlp_color:\n'
                                  '            '
                                  'indicator_obj["fields"]["trafficlightprotocol"] '
                                  '= tlp_color\n'
                                  '\n'
                                  '        indicators.append(indicator_obj)\n'
                                  '\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def get_indicators_command(client: Client, '
                                  'params: Dict[str, str], args: Dict[str, '
                                  'str]) -> CommandResults:\n'
                                  '    """Wrapper for retrieving indicators '
                                  'from the feed to the war-room.\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '        args: demisto.args()\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    limit = int(args.get("limit", "10"))\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'tlp_color, feed_tags, limit)\n'
                                  '    human_readable = tableToMarkdown(\n'
                                  '        "Indicators from Cyberint Feed:",\n'
                                  '        indicators,\n'
                                  '        headers=["value", "type"],\n'
                                  '        '
                                  'headerTransform=string_to_table_header,\n'
                                  '        removeNull=True,\n'
                                  '    )\n'
                                  '    return CommandResults(\n'
                                  '        readable_output=human_readable,\n'
                                  '        outputs_prefix="",\n'
                                  '        outputs_key_field="",\n'
                                  '        raw_response=indicators,\n'
                                  '        outputs={},\n'
                                  '    )\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators_command(client: '
                                  'Client, params: Dict[str, str]) -> '
                                  'List[Dict]:\n'
                                  '    """Wrapper for fetching indicators from '
                                  'the feed to the Indicators tab.\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '\n'
                                  '    indicators = fetch_indicators(client, '
                                  'tlp_color, feed_tags)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def main():\n'
                                  '    """\n'
                                  '    PARSE AND VALIDATE INTEGRATION PARAMS\n'
                                  '    """\n'
                                  '    params = demisto.params()\n'
                                  '    args = demisto.args()\n'
                                  '    base_url = params.get("url")\n'
                                  '    access_token = '
                                  'params.get("access_token").get("password")\n'
                                  '    insecure = not params.get("insecure", '
                                  'False)\n'
                                  '    proxy = params.get("proxy", False)\n'
                                  '\n'
                                  '    command = demisto.command()\n'
                                  '    demisto.info(f"Command being called is '
                                  '{command}")\n'
                                  '\n'
                                  '    try:\n'
                                  '        client = Client(\n'
                                  '            base_url=base_url,\n'
                                  '            access_token=access_token,\n'
                                  '            verify=insecure,\n'
                                  '            proxy=proxy,\n'
                                  '        )\n'
                                  '\n'
                                  '        if command == "test-module":\n'
                                  '            # This is the call made when '
                                  'pressing the integration Test button.\n'
                                  '            '
                                  'return_results(test_module(client))\n'
                                  '\n'
                                  '        elif command == '
                                  '"cyberint-get-indicators":\n'
                                  '            # This is the command that '
                                  'fetches a limited number of indicators from '
                                  'the feed source\n'
                                  '            # and displays them in the war '
                                  'room.\n'
                                  '            '
                                  'return_results(get_indicators_command(client, '
                                  'params, args))\n'
                                  '\n'
                                  '        elif command == '
                                  '"fetch-indicators":\n'
                                  '            # This is the command that '
                                  'initiates a request to the feed endpoint '
                                  'and create new indicators objects from\n'
                                  '            # the data fetched. If the '
                                  'integration instance is configured to fetch '
                                  'indicators, then this is the command\n'
                                  '            # that will be executed at the '
                                  'specified feed fetch interval.\n'
                                  '            indicators = '
                                  'fetch_indicators_command(client, params)\n'
                                  '            for iter_ in batch(indicators, '
                                  'batch_size=2000):\n'
                                  '                '
                                  'demisto.createIndicators(iter_)\n'
                                  '\n'
                                  '        else:\n'
                                  '            raise '
                                  'NotImplementedError(f"Command {command} is '
                                  'not implemented.")\n'
                                  '\n'
                                  '    # Log exceptions and return errors\n'
                                  '    except Exception as e:\n'
                                  '        return_error(f"Failed to execute '
                                  '{command} command.\\nError:\\n{str(e)}")\n'
                                  '\n'
                                  '\n'
                                  'if __name__ in ["__main__", "builtin", '
                                  '"builtins"]:\n'
                                  '    main()\n'
                                  '\n'
                                  "register_module_line('Cyberint Feed', "
                                  "'end', __line__())\n",
                        'subtype': 'python3',
                        'type': 'python'},
 'is_password_protected': None,
 'locked': None,
 'modified': datetime.datetime(2023, 11, 23, 13, 43, 46, 744357, tzinfo=tzoffset(None, 7200)),
 'name': 'Cyberint Feed',
 'path': None,
 'prev_name': 'Cyberint Feed',
 'propagation_labels': ['all'],
 'readonly': None,
 'script_not_visible': None,
 'should_commit': False,
 'sort_values': None,
 'source_module_id': None,
 'system': None,
 'vc_should_ignore': False,
 'version': 10}
[2023-11-23T13:43:48] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T13:43:48] - [MainThread] - [DEBUG] - uploader.py:287 - Uploaded Integration integration-FeedCyberint.yml successfully
[2023-11-23T13:43:48] - [MainThread] - [INFO] - uploader.py:389 - UPLOAD SUMMARY:

[2023-11-23T13:43:48] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T13:43:48] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T13:43:48] - [MainThread] - [INFO] - uploader.py:422 - SUCCESSFUL UPLOADS:
╒══════════════════╤═════════════╤═════════════╤════════════════╕
│ NAME             │ TYPE        │ PACK NAME   │ PACK VERSION   │
╞══════════════════╪═════════════╪═════════════╪════════════════╡
│ FeedCyberint.yml │ Integration │             │                │
╘══════════════════╧═════════════╧═════════════╧════════════════╛

[2023-11-23T13:43:57] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T13:43:57] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T13:43:57] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T13:43:57] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-11-23T13:43:57] - [MainThread] - [DEBUG] - connectionpool.py:1019 - Starting new HTTPS connection (1): pypi.org:443
[2023-11-23T13:43:57] - [MainThread] - [DEBUG] - connectionpool.py:474 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 42701
[2023-11-23T13:43:58] - [MainThread] - [INFO] - __main__.py:228 - You are using demisto-sdk 1.21.0.
[2023-11-23T13:43:58] - [MainThread] - [INFO] - __main__.py:230 - however version 1.23.0 is available.
To update, run pip3 install --upgrade demisto-sdk
[2023-11-23T13:43:58] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-11-23T13:43:58] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-11-23T13:43:58] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-11-23T13:43:58] - [MainThread] - [DEBUG] - tools.py:3784 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-11-23T13:43:58] - [MainThread] - [INFO] - uploader.py:210 - Uploading /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml to https://192.168.30.206...
[2023-11-23T13:43:58] - [MainThread] - [DEBUG] - base_content.py:169 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T13:43:58] - [MainThread] - [DEBUG] - content_item.py:98 - Parsing content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T13:43:58] - [MainThread] - [DEBUG] - content_item.py:137 - Parsed Integration:Cyberint Feed
[2023-11-23T13:43:58] - [MainThread] - [DEBUG] - base_content.py:204 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml as <class 'demisto_sdk.commands.content_graph.objects.integration.Integration'>
[2023-11-23T13:43:58] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T13:43:58] - [MainThread] - [DEBUG] - content_item.py:194 - preparing /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T13:43:58] - [MainThread] - [DEBUG] - integration_script_unifier.py:76 - Unifying /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T13:43:58] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-11-23T13:43:58] - [MainThread] - [WARNING] - integration_script_unifier.py:207 - Failed getting image data for '/home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint'.
[2023-11-23T13:43:58] - [MainThread] - [INFO] - integration_script_unifier.py:650 - Did not find README in /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint, not adding integration doc link
[2023-11-23T13:43:58] - [MainThread] - [DEBUG] - integration_script_unifier.py:132 - Created unified yml: FeedCyberint.yml
[2023-11-23T13:43:58] - [MainThread] - [DEBUG] - integration_script.py:64 - The docker_native_image_config.json file could not be found.
[2023-11-23T13:43:58] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T13:43:59] - [MainThread] - [DEBUG] - tools.py:39 - got the following response when uploading Integration /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml: {'beta': None,
 'brand': '',
 'can_get_samples': True,
 'category': 'Data Enrichment & Threat Intelligence',
 'cmdline': None,
 'commit_message': '',
 'configuration': [{'default_value': 'https://qmasters-integration.cyberint.io/ioc/api/v1/feed/daily/',
                    'display': 'The Cyberint IOC feed endpoint URL',
                    'hidden': False,
                    'info': '',
                    'name': 'url',
                    'options': None,
                    'required': True,
                    'type': 0},
                   {'default_value': '',
                    'display': 'API Key (Leave empty. Fill in the API Key in '
                               'the password field.)',
                    'hidden': False,
                    'info': '',
                    'name': 'access_token',
                    'options': None,
                    'required': True,
                    'type': 9},
                   {'default_value': 'true',
                    'display': 'Fetch indicators',
                    'hidden': False,
                    'info': '',
                    'name': 'feed',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': 'Good',
                    'display': 'Indicator Reputation',
                    'hidden': False,
                    'info': 'Indicators from this integration instance will be '
                            'marked with this reputation',
                    'name': 'feedReputation',
                    'options': ['None', 'Good', 'Suspicious', 'Bad'],
                    'required': False,
                    'type': 18},
                   {'default_value': 'F - Reliability cannot be judged',
                    'display': 'Source Reliability',
                    'hidden': False,
                    'info': 'Reliability of the source providing the '
                            'intelligence data',
                    'name': 'feedReliability',
                    'options': ['A - Completely reliable',
                                'B - Usually reliable',
                                'C - Fairly reliable',
                                'D - Not usually reliable',
                                'E - Unreliable',
                                'F - Reliability cannot be judged'],
                    'required': True,
                    'type': 15},
                   {'default_value': '',
                    'display': 'Traffic Light Protocol Color',
                    'hidden': False,
                    'info': 'The Traffic Light Protocol (TLP) designation to '
                            'apply to indicators fetched from the feed',
                    'name': 'tlp_color',
                    'options': ['RED', 'AMBER', 'GREEN', 'WHITE'],
                    'required': False,
                    'type': 15},
                   {'default_value': 'suddenDeath',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationPolicy',
                    'options': ['never',
                                'interval',
                                'indicatorType',
                                'suddenDeath'],
                    'required': False,
                    'type': 17},
                   {'default_value': '20160',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationInterval',
                    'options': None,
                    'required': False,
                    'type': 1},
                   {'default_value': '30',
                    'display': 'Feed Fetch Interval',
                    'hidden': False,
                    'info': '',
                    'name': 'feedFetchInterval',
                    'options': None,
                    'required': False,
                    'type': 19},
                   {'default_value': '',
                    'display': 'Tags',
                    'hidden': False,
                    'info': 'Supports CSV values.',
                    'name': 'feedTags',
                    'options': None,
                    'required': False,
                    'type': 0},
                   {'default_value': 'true',
                    'display': 'Bypass exclusion list',
                    'hidden': False,
                    'info': 'When selected, the exclusion list is ignored for '
                            'indicators from this feed. This means that if an '
                            'indicator from this feed is on the exclusion '
                            'list, the indicator might still be added to the '
                            'system.',
                    'name': 'feedBypassExclusionList',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Trust any certificate (not secure)',
                    'hidden': False,
                    'info': '',
                    'name': 'insecure',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Use system proxy settings',
                    'hidden': False,
                    'info': '',
                    'name': 'proxy',
                    'options': None,
                    'required': False,
                    'type': 8}],
 'deprecated': None,
 'description': 'Use the Cyberint Feed integration to get indicators from the '
                'feed.',
 'detailed_description': '### Partner Contributed Integration\n'
                         '#### Integration Author: Cyberint\n'
                         'Support and maintenance for this integration are '
                         'provided by the author. Please use the following '
                         'contact details:\n'
                         '- **Email**: '
                         '[support@cyberint.com](mailto:support@cyberint.com)\n'
                         '- **URL**: '
                         '[https://cyberint.com](https://cyberint.com)\n'
                         '***\n',
 'display': 'Cyberint Feed (Partner Contribution)',
 'executable': None,
 'hidden': False,
 'hide_engines': None,
 'icon': '',
 'id': 'Cyberint Feed',
 'image': None,
 'integration_script': {'commands': [{'arguments': [{'auto': None,
                                                     'default': False,
                                                     'default_value': '0',
                                                     'deprecated': False,
                                                     'description': 'The '
                                                                    'maximum '
                                                                    'number of '
                                                                    'results '
                                                                    'to '
                                                                    'return. '
                                                                    'The '
                                                                    'default '
                                                                    'value is '
                                                                    '10.',
                                                     'is_array': None,
                                                     'name': 'limit',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False}],
                                      'cartesian': False,
                                      'deprecated': False,
                                      'description': 'Gets indicators from the '
                                                     'feed.',
                                      'execution': False,
                                      'hidden': False,
                                      'important': None,
                                      'name': 'cyberint-get-indicators',
                                      'outputs': None,
                                      'permitted': False,
                                      'sensitive': False,
                                      'timeout': 0}],
                        'docker_image': 'demisto/btfl-soup:1.0.1.45563',
                        'feed': True,
                        'is_fetch': False,
                        'is_fetch_credentials': False,
                        'long_running': False,
                        'long_running_port_mapping': False,
                        'run_once': False,
                        'script': "register_module_line('Cyberint Feed', "
                                  "'start', __line__())\n"
                                  '### pack version: 1.1.3\n'
                                  'import re\n'
                                  'from typing import Any, Callable, Dict, '
                                  'List, Optional, Tuple\n'
                                  '\n'
                                  '\n'
                                  'import urllib3\n'
                                  'from bs4 import BeautifulSoup\n'
                                  '\n'
                                  '\n'
                                  '# disable insecure warnings\n'
                                  'urllib3.disable_warnings()\n'
                                  '\n'
                                  'INTEGRATION_NAME = "Microsoft Intune Feed"\n'
                                  '\n'
                                  '\n'
                                  'class Client(BaseClient):\n'
                                  '    """\n'
                                  '    Client to use in the Microsoft Intune '
                                  'Feed integration. Overrides BaseClient.\n'
                                  '    """\n'
                                  '\n'
                                  '    def __init__(\n'
                                  '        self,\n'
                                  '        base_url: str,\n'
                                  '        access_token: str,\n'
                                  '        verify: bool = False,\n'
                                  '        proxy: bool = False,\n'
                                  '    ):\n'
                                  '        self._cookies = {"access_token": '
                                  'access_token}\n'
                                  '        super().__init__(base_url, '
                                  'verify=verify, proxy=proxy)\n'
                                  '\n'
                                  '    def build_iterator(self, date_time: str '
                                  '= None) -> List:\n'
                                  '        """Retrieves all entries from the '
                                  'feed.\n'
                                  '\n'
                                  '        Returns:\n'
                                  '            A list of objects, containing '
                                  'the indicators.\n'
                                  '        """\n'
                                  '        result = []  # type: list\n'
                                  '        domains = []  # type: list\n'
                                  '        ipv4s = []  # type: list\n'
                                  '        files = []  # type: list\n'
                                  '        urls = []  # type: list\n'
                                  '\n'
                                  '        date_time = "2023-11-23"\n'
                                  '        response = '
                                  'self._http_request("GET", '
                                  'url_suffix=date_time, '
                                  'cookies=self._cookies, resp_type="text")\n'
                                  '        feeds = '
                                  'response.strip().split("\\n")\n'
                                  '        ioc_feeds = [json.loads(feed) for '
                                  'feed in feeds]\n'
                                  '\n'
                                  '        for indicator in ioc_feeds:\n'
                                  '            # Infer the type of the '
                                  'indicator using '
                                  "'auto_detect_indicator_type(indicator)' "
                                  'function\n'
                                  '            # (defined in '
                                  'CommonServerPython).\n'
                                  '            if indicator_type := '
                                  'auto_detect_indicator_type(indicator["ioc_value"]):\n'
                                  '                result.append(\n'
                                  '                    {\n'
                                  '                        "value": '
                                  'indicator,\n'
                                  '                        "type": '
                                  'indicator_type,\n'
                                  '                        "FeedURL": '
                                  'self._base_url,\n'
                                  '                        "relations": [{}],\n'
                                  '                    }\n'
                                  '                )\n'
                                  '        # for ioc in ioc_feeds:\n'
                                  '        #     if ioc["ioc_type"] == '
                                  '"ipv4":\n'
                                  '        #         ipv4s.append(ioc)\n'
                                  '        #     if ioc["ioc_type"] == '
                                  '"file/sha256":\n'
                                  '        #         files.append(ioc)\n'
                                  '        #     if ioc["ioc_type"] == '
                                  '"domain":\n'
                                  '        #         domains.append(ioc)\n'
                                  '        #     if ioc["ioc_type"] == "url":\n'
                                  '        #         urls.append(ioc)\n'
                                  '\n'
                                  '        # for domain in domains:\n'
                                  '        #     result.append(\n'
                                  '        #         {\n'
                                  '        #             "value": domain,\n'
                                  '        #             "type": '
                                  'FeedIndicatorType.DomainGlob if "*" in '
                                  'domain else FeedIndicatorType.Domain,\n'
                                  '        #             "FeedURL": '
                                  'self._base_url,\n'
                                  '        #         }\n'
                                  '        #     )\n'
                                  '        # for ipv4 in ipv4s:\n'
                                  '        #     result.append({"value": ipv4, '
                                  '"type": FeedIndicatorType.IP, "FeedURL": '
                                  'self._base_url})\n'
                                  '        # for url in urls:\n'
                                  '        #     result.append({"value": url, '
                                  '"type": FeedIndicatorType.URL, "FeedURL": '
                                  'self._base_url})\n'
                                  '        # for file in files:\n'
                                  '        #     result.append({"value": file, '
                                  '"type": FeedIndicatorType.File, "FeedURL": '
                                  'self._base_url})\n'
                                  '\n'
                                  '        return result\n'
                                  '\n'
                                  '\n'
                                  'def test_module(client: Client, *_) -> '
                                  'Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Builds the iterator to check that '
                                  'the feed is accessible.\n'
                                  '    Args:\n'
                                  '        client: Client object.\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    client.build_iterator()\n'
                                  '    return "ok", {}, {}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators(\n'
                                  '    client: Client,\n'
                                  '    tlp_color: str,\n'
                                  '    feed_tags: List = [],\n'
                                  '    limit: int = -1,\n'
                                  ') -> List[Dict]:\n'
                                  '    """Retrieves indicators from the feed\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client (Client): Client object with '
                                  'request\n'
                                  '        feed_tags (list): tags to assign '
                                  'fetched indicators\n'
                                  '        limit (int): limit the results\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    iterator = client.build_iterator()\n'
                                  '    indicators = []\n'
                                  '    if limit > 0:\n'
                                  '        iterator = iterator[:limit]\n'
                                  '\n'
                                  '    # extract values from iterator\n'
                                  '    for item in iterator:\n'
                                  '        value_ = item.get("value")\n'
                                  '        type_ = item.get("type")\n'
                                  '        raw_data = {\n'
                                  '            "value": value_,\n'
                                  '            "type": type_,\n'
                                  '        }\n'
                                  '\n'
                                  '        # Create indicator object for each '
                                  'value.\n'
                                  '        # The object consists of a '
                                  'dictionary with required and optional keys '
                                  'and values, as described blow.\n'
                                  '        for key, value in item.items():\n'
                                  '            raw_data.update({key: value})\n'
                                  '        indicator_obj = {\n'
                                  '            # The indicator value.\n'
                                  '            "value": value_,\n'
                                  '            # The indicator type as defined '
                                  'in Cortex XSOAR.\n'
                                  '            # One can use the '
                                  'FeedIndicatorType class under '
                                  'CommonServerPython to populate this field.\n'
                                  '            "type": type_,\n'
                                  '            # The name of the service '
                                  'supplying this feed.\n'
                                  '            "service": "HelloWorld",\n'
                                  '            # A dictionary that maps values '
                                  'to existing indicator fields defined in '
                                  'Cortex XSOAR.\n'
                                  '            # One can use this section in '
                                  'order to map custom indicator fields '
                                  'previously defined\n'
                                  '            # in Cortex XSOAR to their '
                                  'values.\n'
                                  '            "fields": {},\n'
                                  '            # A dictionary of the raw data '
                                  'returned from the feed source about the '
                                  'indicator.\n'
                                  '            "rawJSON": raw_data,\n'
                                  '        }\n'
                                  '\n'
                                  '        if feed_tags:\n'
                                  '            indicator_obj["fields"]["tags"] '
                                  '= feed_tags\n'
                                  '\n'
                                  '        if tlp_color:\n'
                                  '            '
                                  'indicator_obj["fields"]["trafficlightprotocol"] '
                                  '= tlp_color\n'
                                  '\n'
                                  '        indicators.append(indicator_obj)\n'
                                  '\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def get_indicators_command(client: Client, '
                                  'params: Dict[str, str], args: Dict[str, '
                                  'str]) -> CommandResults:\n'
                                  '    """Wrapper for retrieving indicators '
                                  'from the feed to the war-room.\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '        args: demisto.args()\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    limit = int(args.get("limit", "10"))\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'tlp_color, feed_tags, limit)\n'
                                  '    human_readable = tableToMarkdown(\n'
                                  '        "Indicators from Cyberint Feed:",\n'
                                  '        indicators,\n'
                                  '        headers=["value", "type"],\n'
                                  '        '
                                  'headerTransform=string_to_table_header,\n'
                                  '        removeNull=True,\n'
                                  '    )\n'
                                  '    return CommandResults(\n'
                                  '        readable_output=human_readable,\n'
                                  '        outputs_prefix="",\n'
                                  '        outputs_key_field="",\n'
                                  '        raw_response=indicators,\n'
                                  '        outputs={},\n'
                                  '    )\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators_command(client: '
                                  'Client, params: Dict[str, str]) -> '
                                  'List[Dict]:\n'
                                  '    """Wrapper for fetching indicators from '
                                  'the feed to the Indicators tab.\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '\n'
                                  '    indicators = fetch_indicators(client, '
                                  'tlp_color, feed_tags)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def main():\n'
                                  '    """\n'
                                  '    PARSE AND VALIDATE INTEGRATION PARAMS\n'
                                  '    """\n'
                                  '    params = demisto.params()\n'
                                  '    args = demisto.args()\n'
                                  '    base_url = params.get("url")\n'
                                  '    access_token = '
                                  'params.get("access_token").get("password")\n'
                                  '    insecure = not params.get("insecure", '
                                  'False)\n'
                                  '    proxy = params.get("proxy", False)\n'
                                  '\n'
                                  '    command = demisto.command()\n'
                                  '    demisto.info(f"Command being called is '
                                  '{command}")\n'
                                  '\n'
                                  '    try:\n'
                                  '        client = Client(\n'
                                  '            base_url=base_url,\n'
                                  '            access_token=access_token,\n'
                                  '            verify=insecure,\n'
                                  '            proxy=proxy,\n'
                                  '        )\n'
                                  '\n'
                                  '        if command == "test-module":\n'
                                  '            # This is the call made when '
                                  'pressing the integration Test button.\n'
                                  '            '
                                  'return_results(test_module(client))\n'
                                  '\n'
                                  '        elif command == '
                                  '"cyberint-get-indicators":\n'
                                  '            # This is the command that '
                                  'fetches a limited number of indicators from '
                                  'the feed source\n'
                                  '            # and displays them in the war '
                                  'room.\n'
                                  '            '
                                  'return_results(get_indicators_command(client, '
                                  'params, args))\n'
                                  '\n'
                                  '        elif command == '
                                  '"fetch-indicators":\n'
                                  '            # This is the command that '
                                  'initiates a request to the feed endpoint '
                                  'and create new indicators objects from\n'
                                  '            # the data fetched. If the '
                                  'integration instance is configured to fetch '
                                  'indicators, then this is the command\n'
                                  '            # that will be executed at the '
                                  'specified feed fetch interval.\n'
                                  '            indicators = '
                                  'fetch_indicators_command(client, params)\n'
                                  '            for iter_ in batch(indicators, '
                                  'batch_size=2000):\n'
                                  '                '
                                  'demisto.createIndicators(iter_)\n'
                                  '\n'
                                  '        else:\n'
                                  '            raise '
                                  'NotImplementedError(f"Command {command} is '
                                  'not implemented.")\n'
                                  '\n'
                                  '    # Log exceptions and return errors\n'
                                  '    except Exception as e:\n'
                                  '        return_error(f"Failed to execute '
                                  '{command} command.\\nError:\\n{str(e)}")\n'
                                  '\n'
                                  '\n'
                                  'if __name__ in ["__main__", "builtin", '
                                  '"builtins"]:\n'
                                  '    main()\n'
                                  '\n'
                                  "register_module_line('Cyberint Feed', "
                                  "'end', __line__())\n",
                        'subtype': 'python3',
                        'type': 'python'},
 'is_password_protected': None,
 'locked': None,
 'modified': datetime.datetime(2023, 11, 23, 13, 43, 57, 860032, tzinfo=tzoffset(None, 7200)),
 'name': 'Cyberint Feed',
 'path': None,
 'prev_name': 'Cyberint Feed',
 'propagation_labels': ['all'],
 'readonly': None,
 'script_not_visible': None,
 'should_commit': False,
 'sort_values': None,
 'source_module_id': None,
 'system': None,
 'vc_should_ignore': False,
 'version': 11}
[2023-11-23T13:43:59] - [MainThread] - [DEBUG] - content_item.py:270 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-11-23T13:43:59] - [MainThread] - [DEBUG] - uploader.py:287 - Uploaded Integration integration-FeedCyberint.yml successfully
[2023-11-23T13:43:59] - [MainThread] - [INFO] - uploader.py:389 - UPLOAD SUMMARY:

[2023-11-23T13:43:59] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T13:43:59] - [MainThread] - [WARNING] - content_item.py:98 - Could not find pack for content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-11-23T13:43:59] - [MainThread] - [INFO] - uploader.py:422 - SUCCESSFUL UPLOADS:
╒══════════════════╤═════════════╤═════════════╤════════════════╕
│ NAME             │ TYPE        │ PACK NAME   │ PACK VERSION   │
╞══════════════════╪═════════════╪═════════════╪════════════════╡
│ FeedCyberint.yml │ Integration │             │                │
╘══════════════════╧═════════════╧═════════════╧════════════════╛

[2023-12-26T13:37:31] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T13:37:31] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T13:37:31] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T13:37:31] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-12-26T13:37:31] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): pypi.org:443
[2023-12-26T13:37:31] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 43312
[2023-12-26T13:37:31] - [MainThread] - [INFO] - __main__.py:231 - You are using demisto-sdk 1.25.0.
[2023-12-26T13:37:31] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T13:37:31] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T13:37:31] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T13:37:31] - [MainThread] - [DEBUG] - tools.py:3836 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-12-26T13:37:31] - [MainThread] - [DEBUG] - tools.py:2588 - Failed to fetch server version. Error: (401)
Reason: Unauthorized
HTTP response body: {"id":"unauthorized","status":401,"title":"Unauthorized","detail":"The request requires authorization","error":"http: named cookie not present","encrypted":false,"multires":null}


[2023-12-26T13:37:31] - [MainThread] - [WARNING] - tools.py:2589 - Could not parse server version, please make sure the environment is properly configured.
[2023-12-26T13:37:31] - [MainThread] - [INFO] - uploader.py:191 - Could not connect to the server. Try checking your connection configurations.
[2023-12-26T13:37:44] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T13:37:44] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T13:37:44] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T13:37:44] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-12-26T13:37:44] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): pypi.org:443
[2023-12-26T13:37:44] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 43312
[2023-12-26T13:37:44] - [MainThread] - [INFO] - __main__.py:231 - You are using demisto-sdk 1.25.0.
[2023-12-26T13:37:44] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T13:37:44] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T13:37:44] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T13:37:44] - [MainThread] - [DEBUG] - tools.py:3836 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-12-26T13:37:44] - [MainThread] - [DEBUG] - tools.py:2588 - Failed to fetch server version. Error: (401)
Reason: Unauthorized
HTTP response body: {"id":"unauthorized","status":401,"title":"Unauthorized","detail":"The request requires authorization","error":"http: named cookie not present","encrypted":false,"multires":null}


[2023-12-26T13:37:44] - [MainThread] - [WARNING] - tools.py:2589 - Could not parse server version, please make sure the environment is properly configured.
[2023-12-26T13:37:44] - [MainThread] - [INFO] - uploader.py:191 - Could not connect to the server. Try checking your connection configurations.
[2023-12-26T13:39:34] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T13:39:34] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T13:39:34] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T13:39:34] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-12-26T13:39:34] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): pypi.org:443
[2023-12-26T13:39:34] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 43312
[2023-12-26T13:39:35] - [MainThread] - [INFO] - __main__.py:231 - You are using demisto-sdk 1.25.0.
[2023-12-26T13:39:35] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T13:39:35] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T13:39:35] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T13:39:35] - [MainThread] - [DEBUG] - tools.py:3836 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-12-26T13:39:35] - [MainThread] - [DEBUG] - tools.py:2588 - Failed to fetch server version. Error: (401)
Reason: Unauthorized
HTTP response body: {"id":"unauthorized","status":401,"title":"Unauthorized","detail":"The request requires authorization","error":"http: named cookie not present","encrypted":false,"multires":null}


[2023-12-26T13:39:35] - [MainThread] - [WARNING] - tools.py:2589 - Could not parse server version, please make sure the environment is properly configured.
[2023-12-26T13:39:35] - [MainThread] - [INFO] - uploader.py:191 - Could not connect to the server. Try checking your connection configurations.
[2023-12-26T13:39:43] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T13:39:43] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T13:39:43] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T13:39:43] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-12-26T13:39:43] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): pypi.org:443
[2023-12-26T13:39:43] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 43312
[2023-12-26T13:39:43] - [MainThread] - [INFO] - __main__.py:231 - You are using demisto-sdk 1.25.0.
[2023-12-26T13:39:43] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T13:39:43] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T13:39:43] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T13:39:43] - [MainThread] - [DEBUG] - tools.py:3836 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-12-26T13:39:43] - [MainThread] - [WARNING] - connectionpool.py:812 - Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate (_ssl.c:997)'))': /about
[2023-12-26T13:39:43] - [MainThread] - [WARNING] - connectionpool.py:812 - Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate (_ssl.c:997)'))': /about
[2023-12-26T13:39:44] - [MainThread] - [WARNING] - connectionpool.py:812 - Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate (_ssl.c:997)'))': /about
[2023-12-26T13:39:44] - [MainThread] - [DEBUG] - tools.py:2588 - Failed to fetch server version. Error: HTTPSConnectionPool(host='192.168.30.206', port=443): Max retries exceeded with url: /about (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate (_ssl.c:997)')))
[2023-12-26T13:39:44] - [MainThread] - [WARNING] - tools.py:2589 - Could not parse server version, please make sure the environment is properly configured.
[2023-12-26T13:39:44] - [MainThread] - [INFO] - uploader.py:191 - Could not connect to the server. Try checking your connection configurations.
[2023-12-26T13:39:48] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T13:39:48] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T13:39:48] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T13:39:48] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-12-26T13:39:48] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): pypi.org:443
[2023-12-26T13:39:48] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 43312
[2023-12-26T13:39:48] - [MainThread] - [INFO] - __main__.py:231 - You are using demisto-sdk 1.25.0.
[2023-12-26T13:39:48] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T13:39:48] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T13:39:48] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T13:39:48] - [MainThread] - [DEBUG] - tools.py:3836 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-12-26T13:39:49] - [MainThread] - [DEBUG] - tools.py:2588 - Failed to fetch server version. Error: (401)
Reason: Unauthorized
HTTP response body: {"id":"unauthorized","status":401,"title":"Unauthorized","detail":"The request requires authorization","error":"http: named cookie not present","encrypted":false,"multires":null}


[2023-12-26T13:39:49] - [MainThread] - [WARNING] - tools.py:2589 - Could not parse server version, please make sure the environment is properly configured.
[2023-12-26T13:39:49] - [MainThread] - [INFO] - uploader.py:191 - Could not connect to the server. Try checking your connection configurations.
[2023-12-26T13:41:43] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T13:41:43] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T13:41:43] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T13:41:43] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-12-26T13:41:43] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): pypi.org:443
[2023-12-26T13:41:43] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 43312
[2023-12-26T13:41:43] - [MainThread] - [INFO] - __main__.py:231 - You are using demisto-sdk 1.25.0.
[2023-12-26T13:41:43] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T13:41:43] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T13:41:43] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T13:41:43] - [MainThread] - [DEBUG] - tools.py:3836 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-12-26T13:41:44] - [MainThread] - [INFO] - uploader.py:211 - Uploading /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml to https://192.168.30.206...
[2023-12-26T13:41:44] - [MainThread] - [DEBUG] - base_content.py:240 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-26T13:41:44] - [MainThread] - [DEBUG] - content_item.py:104 - Parsing content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-26T13:41:44] - [MainThread] - [ERROR] - tools.py:890 - /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml has a structure issue of file type .yml
while constructing a mapping
  in "<file>", line 99, column 3
found duplicate key "script" with value "-" (original value: "")
  in "<file>", line 111, column 3

To suppress this check see:
    http://yaml.readthedocs.io/en/latest/api.html#duplicate-keys

[2023-12-26T13:41:44] - [MainThread] - [ERROR] - content_item.py:130 - Failed to parse /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint: None
[2023-12-26T13:41:44] - [MainThread] - [ERROR] - base_content.py:280 - Invalid content path provided: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml. Please provide a valid content item or pack path.
[2023-12-26T13:41:44] - [MainThread] - [ERROR] - uploader.py:235 - Nothing to upload: the input path should point to one of the following:
	1. A Pack
	2. A content entity directory that is inside a pack, e.g. Integrations
	3. A valid content item file, that can be imported to Cortex XSOAR manually.
[2023-12-26T13:42:01] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T13:42:01] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T13:42:01] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T13:42:01] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-12-26T13:42:01] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): pypi.org:443
[2023-12-26T13:42:01] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 43312
[2023-12-26T13:42:02] - [MainThread] - [INFO] - __main__.py:231 - You are using demisto-sdk 1.25.0.
[2023-12-26T13:42:02] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T13:42:02] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T13:42:02] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T13:42:02] - [MainThread] - [DEBUG] - tools.py:3836 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-12-26T13:42:02] - [MainThread] - [INFO] - uploader.py:211 - Uploading /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml to https://192.168.30.206...
[2023-12-26T13:42:02] - [MainThread] - [DEBUG] - base_content.py:240 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-26T13:42:02] - [MainThread] - [DEBUG] - content_item.py:104 - Parsing content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-26T13:42:02] - [MainThread] - [DEBUG] - content_item.py:144 - Parsed Integration:Cyberint Feed
[2023-12-26T13:42:02] - [MainThread] - [DEBUG] - base_content.py:286 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml as <class 'demisto_sdk.commands.content_graph.objects.integration.Integration'>
[2023-12-26T13:42:02] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-12-26T13:42:02] - [MainThread] - [DEBUG] - content_item.py:232 - preparing /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-26T13:42:02] - [MainThread] - [DEBUG] - integration_script_unifier.py:76 - Unifying /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-26T13:42:02] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-12-26T13:42:02] - [MainThread] - [WARNING] - integration_script_unifier.py:207 - Failed getting image data for '/home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint'.
[2023-12-26T13:42:02] - [MainThread] - [INFO] - integration_script_unifier.py:650 - Did not find README in /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint, not adding integration doc link
[2023-12-26T13:42:02] - [MainThread] - [DEBUG] - integration_script_unifier.py:132 - Created unified yml: FeedCyberint.yml
[2023-12-26T13:42:02] - [MainThread] - [DEBUG] - integration_script.py:76 - The docker_native_image_config.json file could not be found.
[2023-12-26T13:42:02] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-12-26T13:42:02] - [MainThread] - [DEBUG] - tools.py:39 - got the following response when uploading Integration /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml: {'beta': None,
 'brand': '',
 'can_get_samples': True,
 'category': 'Data Enrichment & Threat Intelligence',
 'cmdline': None,
 'commit_message': '',
 'configuration': [{'default_value': 'https://qmasters-integration.cyberint.io/ioc/api/v1/feed/daily/',
                    'display': 'The Cyberint IOC feed endpoint URL',
                    'hidden': False,
                    'info': '',
                    'name': 'url',
                    'options': None,
                    'required': True,
                    'type': 0},
                   {'default_value': '',
                    'display': 'API Key (Leave empty. Fill in the API Key in '
                               'the password field.)',
                    'hidden': False,
                    'info': '',
                    'name': 'access_token',
                    'options': None,
                    'required': True,
                    'type': 9},
                   {'default_value': 'true',
                    'display': 'Fetch indicators',
                    'hidden': False,
                    'info': '',
                    'name': 'feed',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': 'Good',
                    'display': 'Indicator Reputation',
                    'hidden': False,
                    'info': 'Indicators from this integration instance will be '
                            'marked with this reputation',
                    'name': 'feedReputation',
                    'options': ['None', 'Good', 'Suspicious', 'Bad'],
                    'required': False,
                    'type': 18},
                   {'default_value': 'F - Reliability cannot be judged',
                    'display': 'Source Reliability',
                    'hidden': False,
                    'info': 'Reliability of the source providing the '
                            'intelligence data',
                    'name': 'feedReliability',
                    'options': ['A - Completely reliable',
                                'B - Usually reliable',
                                'C - Fairly reliable',
                                'D - Not usually reliable',
                                'E - Unreliable',
                                'F - Reliability cannot be judged'],
                    'required': True,
                    'type': 15},
                   {'default_value': '',
                    'display': 'Traffic Light Protocol Color',
                    'hidden': False,
                    'info': 'The Traffic Light Protocol (TLP) designation to '
                            'apply to indicators fetched from the feed',
                    'name': 'tlp_color',
                    'options': ['RED', 'AMBER', 'GREEN', 'WHITE'],
                    'required': False,
                    'type': 15},
                   {'default_value': 'suddenDeath',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationPolicy',
                    'options': ['never',
                                'interval',
                                'indicatorType',
                                'suddenDeath'],
                    'required': False,
                    'type': 17},
                   {'default_value': '20160',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationInterval',
                    'options': None,
                    'required': False,
                    'type': 1},
                   {'default_value': '30',
                    'display': 'Feed Fetch Interval',
                    'hidden': False,
                    'info': '',
                    'name': 'feedFetchInterval',
                    'options': None,
                    'required': False,
                    'type': 19},
                   {'default_value': '',
                    'display': 'Tags',
                    'hidden': False,
                    'info': 'Supports CSV values.',
                    'name': 'feedTags',
                    'options': None,
                    'required': False,
                    'type': 0},
                   {'default_value': 'true',
                    'display': 'Bypass exclusion list',
                    'hidden': False,
                    'info': 'When selected, the exclusion list is ignored for '
                            'indicators from this feed. This means that if an '
                            'indicator from this feed is on the exclusion '
                            'list, the indicator might still be added to the '
                            'system.',
                    'name': 'feedBypassExclusionList',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Trust any certificate (not secure)',
                    'hidden': False,
                    'info': '',
                    'name': 'insecure',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Use system proxy settings',
                    'hidden': False,
                    'info': '',
                    'name': 'proxy',
                    'options': None,
                    'required': False,
                    'type': 8}],
 'deprecated': None,
 'description': 'Use the Cyberint Feed integration to get indicators from the '
                'feed.',
 'detailed_description': '### Partner Contributed Integration\n'
                         '#### Integration Author: Cyberint\n'
                         'Support and maintenance for this integration are '
                         'provided by the author. Please use the following '
                         'contact details:\n'
                         '- **Email**: '
                         '[support@cyberint.com](mailto:support@cyberint.com)\n'
                         '- **URL**: '
                         '[https://cyberint.com](https://cyberint.com)\n'
                         '***\n',
 'display': 'Cyberint Feed (Partner Contribution)',
 'executable': None,
 'hidden': False,
 'hide_engines': None,
 'icon': '',
 'id': 'Cyberint Feed',
 'image': None,
 'integration_script': {'commands': [{'arguments': [{'auto': None,
                                                     'default': False,
                                                     'default_value': '10',
                                                     'deprecated': False,
                                                     'description': 'The '
                                                                    'maximum '
                                                                    'number of '
                                                                    'results '
                                                                    'to '
                                                                    'return. '
                                                                    'The '
                                                                    'default '
                                                                    'value is '
                                                                    '10.',
                                                     'is_array': None,
                                                     'name': 'limit',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False}],
                                      'cartesian': False,
                                      'deprecated': False,
                                      'description': 'Gets indicators from the '
                                                     'feed.',
                                      'execution': False,
                                      'hidden': False,
                                      'important': None,
                                      'name': 'cyberint-get-indicators',
                                      'outputs': None,
                                      'permitted': False,
                                      'sensitive': False,
                                      'timeout': 0}],
                        'docker_image': 'demisto/btfl-soup:1.0.1.45563',
                        'feed': True,
                        'is_fetch': False,
                        'is_fetch_credentials': False,
                        'long_running': False,
                        'long_running_port_mapping': False,
                        'run_once': False,
                        'script': "register_module_line('Cyberint Feed', "
                                  "'start', __line__())\n"
                                  '### pack version: 1.1.3\n'
                                  'import re\n'
                                  'from typing import Any, Callable, Dict, '
                                  'List, Optional, Tuple\n'
                                  '\n'
                                  '\n'
                                  'import urllib3\n'
                                  'from bs4 import BeautifulSoup\n'
                                  '\n'
                                  '\n'
                                  '# disable insecure warnings\n'
                                  'urllib3.disable_warnings()\n'
                                  '\n'
                                  'INTEGRATION_NAME = "Microsoft Intune Feed"\n'
                                  '\n'
                                  '\n'
                                  'class Client(BaseClient):\n'
                                  '    """\n'
                                  '    Client to use in the Microsoft Intune '
                                  'Feed integration. Overrides BaseClient.\n'
                                  '    """\n'
                                  '\n'
                                  '    def __init__(\n'
                                  '        self,\n'
                                  '        base_url: str,\n'
                                  '        access_token: str,\n'
                                  '        verify: bool = False,\n'
                                  '        proxy: bool = False,\n'
                                  '    ):\n'
                                  '        self._cookies = {"access_token": '
                                  'access_token}\n'
                                  '        super().__init__(base_url, '
                                  'verify=verify, proxy=proxy)\n'
                                  '\n'
                                  '    def build_iterator(self, date_time: str '
                                  '= None) -> List:\n'
                                  '        """Retrieves all entries from the '
                                  'feed.\n'
                                  '\n'
                                  '        Returns:\n'
                                  '            A list of objects, containing '
                                  'the indicators.\n'
                                  '        """\n'
                                  '        result = []  # type: list\n'
                                  '        domains = []  # type: list\n'
                                  '        ipv4s = []  # type: list\n'
                                  '        files = []  # type: list\n'
                                  '        urls = []  # type: list\n'
                                  '\n'
                                  '        date_time = "2023-11-23"\n'
                                  '        response = '
                                  'self._http_request("GET", '
                                  'url_suffix=date_time, '
                                  'cookies=self._cookies, resp_type="text")\n'
                                  '        feeds = '
                                  'response.strip().split("\\n")\n'
                                  '        ioc_feeds = [json.loads(feed) for '
                                  'feed in feeds]\n'
                                  '\n'
                                  '        for indicator in ioc_feeds:\n'
                                  '            # Infer the type of the '
                                  'indicator using '
                                  "'auto_detect_indicator_type(indicator)' "
                                  'function\n'
                                  '            # (defined in '
                                  'CommonServerPython).\n'
                                  '            if indicator_type := '
                                  'auto_detect_indicator_type(indicator["ioc_value"]):\n'
                                  '                result.append(\n'
                                  '                    {\n'
                                  '                        "value": '
                                  'indicator,\n'
                                  '                        "type": '
                                  'indicator_type,\n'
                                  '                        "FeedURL": '
                                  'self._base_url,\n'
                                  '                        "relations": [{}],\n'
                                  '                    }\n'
                                  '                )\n'
                                  '        # for ioc in ioc_feeds:\n'
                                  '        #     if ioc["ioc_type"] == '
                                  '"ipv4":\n'
                                  '        #         ipv4s.append(ioc)\n'
                                  '        #     if ioc["ioc_type"] == '
                                  '"file/sha256":\n'
                                  '        #         files.append(ioc)\n'
                                  '        #     if ioc["ioc_type"] == '
                                  '"domain":\n'
                                  '        #         domains.append(ioc)\n'
                                  '        #     if ioc["ioc_type"] == "url":\n'
                                  '        #         urls.append(ioc)\n'
                                  '\n'
                                  '        # for domain in domains:\n'
                                  '        #     result.append(\n'
                                  '        #         {\n'
                                  '        #             "value": domain,\n'
                                  '        #             "type": '
                                  'FeedIndicatorType.DomainGlob if "*" in '
                                  'domain else FeedIndicatorType.Domain,\n'
                                  '        #             "FeedURL": '
                                  'self._base_url,\n'
                                  '        #         }\n'
                                  '        #     )\n'
                                  '        # for ipv4 in ipv4s:\n'
                                  '        #     result.append({"value": ipv4, '
                                  '"type": FeedIndicatorType.IP, "FeedURL": '
                                  'self._base_url})\n'
                                  '        # for url in urls:\n'
                                  '        #     result.append({"value": url, '
                                  '"type": FeedIndicatorType.URL, "FeedURL": '
                                  'self._base_url})\n'
                                  '        # for file in files:\n'
                                  '        #     result.append({"value": file, '
                                  '"type": FeedIndicatorType.File, "FeedURL": '
                                  'self._base_url})\n'
                                  '\n'
                                  '        return result\n'
                                  '\n'
                                  '\n'
                                  'def test_module(client: Client, *_) -> '
                                  'Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Builds the iterator to check that '
                                  'the feed is accessible.\n'
                                  '    Args:\n'
                                  '        client: Client object.\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    client.build_iterator()\n'
                                  '    return "ok", {}, {}\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators(\n'
                                  '    client: Client,\n'
                                  '    tlp_color: str,\n'
                                  '    feed_tags: List = [],\n'
                                  '    limit: int = -1,\n'
                                  ') -> List[Dict]:\n'
                                  '    """Retrieves indicators from the feed\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client (Client): Client object with '
                                  'request\n'
                                  '        feed_tags (list): tags to assign '
                                  'fetched indicators\n'
                                  '        limit (int): limit the results\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    iterator = client.build_iterator()\n'
                                  '    indicators = []\n'
                                  '    if limit > 0:\n'
                                  '        iterator = iterator[:limit]\n'
                                  '\n'
                                  '    # extract values from iterator\n'
                                  '    for item in iterator:\n'
                                  '        value_ = item.get("value")\n'
                                  '        type_ = item.get("type")\n'
                                  '        raw_data = {\n'
                                  '            "value": value_,\n'
                                  '            "type": type_,\n'
                                  '        }\n'
                                  '\n'
                                  '        # Create indicator object for each '
                                  'value.\n'
                                  '        # The object consists of a '
                                  'dictionary with required and optional keys '
                                  'and values, as described blow.\n'
                                  '        for key, value in item.items():\n'
                                  '            raw_data.update({key: value})\n'
                                  '        indicator_obj = {\n'
                                  '            # The indicator value.\n'
                                  '            "value": value_,\n'
                                  '            # The indicator type as defined '
                                  'in Cortex XSOAR.\n'
                                  '            # One can use the '
                                  'FeedIndicatorType class under '
                                  'CommonServerPython to populate this field.\n'
                                  '            "type": type_,\n'
                                  '            # The name of the service '
                                  'supplying this feed.\n'
                                  '            "service": "Cyberint",\n'
                                  '            # A dictionary that maps values '
                                  'to existing indicator fields defined in '
                                  'Cortex XSOAR.\n'
                                  '            # One can use this section in '
                                  'order to map custom indicator fields '
                                  'previously defined\n'
                                  '            # in Cortex XSOAR to their '
                                  'values.\n'
                                  '            "fields": {},\n'
                                  '            # A dictionary of the raw data '
                                  'returned from the feed source about the '
                                  'indicator.\n'
                                  '            "rawJSON": raw_data,\n'
                                  '        }\n'
                                  '\n'
                                  '        if feed_tags:\n'
                                  '            indicator_obj["fields"]["tags"] '
                                  '= feed_tags\n'
                                  '\n'
                                  '        if tlp_color:\n'
                                  '            '
                                  'indicator_obj["fields"]["trafficlightprotocol"] '
                                  '= tlp_color\n'
                                  '\n'
                                  '        indicators.append(indicator_obj)\n'
                                  '\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def get_indicators_command(client: Client, '
                                  'params: Dict[str, str], args: Dict[str, '
                                  'str]) -> CommandResults:\n'
                                  '    """Wrapper for retrieving indicators '
                                  'from the feed to the war-room.\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '        args: demisto.args()\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    limit = int(args.get("limit", "10"))\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'tlp_color, feed_tags, limit)\n'
                                  '    human_readable = tableToMarkdown(\n'
                                  '        "Indicators from Cyberint Feed:",\n'
                                  '        indicators,\n'
                                  '        headers=["value", "type"],\n'
                                  '        '
                                  'headerTransform=string_to_table_header,\n'
                                  '        removeNull=True,\n'
                                  '    )\n'
                                  '    return CommandResults(\n'
                                  '        readable_output=human_readable,\n'
                                  '        outputs_prefix="",\n'
                                  '        outputs_key_field="",\n'
                                  '        raw_response=indicators,\n'
                                  '        outputs={},\n'
                                  '    )\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators_command(client: '
                                  'Client, params: Dict[str, str]) -> '
                                  'List[Dict]:\n'
                                  '    """Wrapper for fetching indicators from '
                                  'the feed to the Indicators tab.\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '\n'
                                  '    indicators = fetch_indicators(client, '
                                  'tlp_color, feed_tags)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def main():\n'
                                  '    """\n'
                                  '    PARSE AND VALIDATE INTEGRATION PARAMS\n'
                                  '    """\n'
                                  '    params = demisto.params()\n'
                                  '    args = demisto.args()\n'
                                  '    base_url = params.get("url")\n'
                                  '    access_token = '
                                  'params.get("access_token").get("password")\n'
                                  '    insecure = not params.get("insecure", '
                                  'False)\n'
                                  '    proxy = params.get("proxy", False)\n'
                                  '\n'
                                  '    command = demisto.command()\n'
                                  '    demisto.info(f"Command being called is '
                                  '{command}")\n'
                                  '\n'
                                  '    try:\n'
                                  '        client = Client(\n'
                                  '            base_url=base_url,\n'
                                  '            access_token=access_token,\n'
                                  '            verify=insecure,\n'
                                  '            proxy=proxy,\n'
                                  '        )\n'
                                  '\n'
                                  '        if command == "test-module":\n'
                                  '            # This is the call made when '
                                  'pressing the integration Test button.\n'
                                  '            '
                                  'return_results(test_module(client))\n'
                                  '\n'
                                  '        elif command == '
                                  '"cyberint-get-indicators":\n'
                                  '            # This is the command that '
                                  'fetches a limited number of indicators from '
                                  'the feed source\n'
                                  '            # and displays them in the war '
                                  'room.\n'
                                  '            '
                                  'return_results(get_indicators_command(client, '
                                  'params, args))\n'
                                  '\n'
                                  '        elif command == '
                                  '"fetch-indicators":\n'
                                  '            # This is the command that '
                                  'initiates a request to the feed endpoint '
                                  'and create new indicators objects from\n'
                                  '            # the data fetched. If the '
                                  'integration instance is configured to fetch '
                                  'indicators, then this is the command\n'
                                  '            # that will be executed at the '
                                  'specified feed fetch interval.\n'
                                  '            indicators = '
                                  'fetch_indicators_command(client, params)\n'
                                  '            for iter_ in batch(indicators, '
                                  'batch_size=2000):\n'
                                  '                '
                                  'demisto.createIndicators(iter_)\n'
                                  '\n'
                                  '        else:\n'
                                  '            raise '
                                  'NotImplementedError(f"Command {command} is '
                                  'not implemented.")\n'
                                  '\n'
                                  '    # Log exceptions and return errors\n'
                                  '    except Exception as e:\n'
                                  '        return_error(f"Failed to execute '
                                  '{command} command.\\nError:\\n{str(e)}")\n'
                                  '\n'
                                  '\n'
                                  'if __name__ in ["__main__", "builtin", '
                                  '"builtins"]:\n'
                                  '    main()\n'
                                  '\n'
                                  "register_module_line('Cyberint Feed', "
                                  "'end', __line__())\n",
                        'subtype': 'python3',
                        'type': 'python'},
 'is_password_protected': None,
 'locked': None,
 'modified': datetime.datetime(2023, 12, 26, 13, 41, 22, 635660, tzinfo=tzoffset(None, 7200)),
 'name': 'Cyberint Feed',
 'path': None,
 'prev_name': 'Cyberint Feed',
 'propagation_labels': ['all'],
 'readonly': None,
 'script_not_visible': None,
 'should_commit': False,
 'sort_values': None,
 'source_module_id': None,
 'system': None,
 'vc_should_ignore': False,
 'version': 1}
[2023-12-26T13:42:02] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-12-26T13:42:02] - [MainThread] - [DEBUG] - uploader.py:295 - Uploaded Integration integration-FeedCyberint.yml successfully
[2023-12-26T13:42:02] - [MainThread] - [INFO] - uploader.py:397 - UPLOAD SUMMARY:

[2023-12-26T13:42:02] - [MainThread] - [INFO] - uploader.py:430 - SUCCESSFUL UPLOADS:
╒══════════════════╤═════════════╤═════════════╤════════════════╕
│ NAME             │ TYPE        │ PACK NAME   │ PACK VERSION   │
╞══════════════════╪═════════════╪═════════════╪════════════════╡
│ FeedCyberint.yml │ Integration │             │                │
╘══════════════════╧═════════════╧═════════════╧════════════════╛

[2023-12-26T13:51:01] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T13:51:01] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T13:51:01] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T13:51:01] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-12-26T13:51:01] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): pypi.org:443
[2023-12-26T13:51:02] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 43312
[2023-12-26T13:51:02] - [MainThread] - [INFO] - __main__.py:231 - You are using demisto-sdk 1.25.0.
[2023-12-26T13:51:02] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T13:51:02] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T13:51:02] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T13:51:02] - [MainThread] - [DEBUG] - tools.py:3836 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-12-26T13:51:02] - [MainThread] - [INFO] - uploader.py:211 - Uploading /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml to https://192.168.30.206...
[2023-12-26T13:51:02] - [MainThread] - [DEBUG] - base_content.py:240 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-26T13:51:02] - [MainThread] - [DEBUG] - content_item.py:104 - Parsing content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-26T13:51:02] - [MainThread] - [DEBUG] - content_item.py:144 - Parsed Integration:Cyberint Feed
[2023-12-26T13:51:02] - [MainThread] - [DEBUG] - base_content.py:286 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml as <class 'demisto_sdk.commands.content_graph.objects.integration.Integration'>
[2023-12-26T13:51:02] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-12-26T13:51:02] - [MainThread] - [DEBUG] - content_item.py:232 - preparing /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-26T13:51:02] - [MainThread] - [DEBUG] - integration_script_unifier.py:76 - Unifying /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-26T13:51:02] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-12-26T13:51:02] - [MainThread] - [WARNING] - integration_script_unifier.py:207 - Failed getting image data for '/home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint'.
[2023-12-26T13:51:02] - [MainThread] - [INFO] - integration_script_unifier.py:650 - Did not find README in /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint, not adding integration doc link
[2023-12-26T13:51:02] - [MainThread] - [DEBUG] - integration_script_unifier.py:132 - Created unified yml: FeedCyberint.yml
[2023-12-26T13:51:02] - [MainThread] - [DEBUG] - integration_script.py:76 - The docker_native_image_config.json file could not be found.
[2023-12-26T13:51:02] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-12-26T13:51:02] - [MainThread] - [DEBUG] - tools.py:39 - got the following response when uploading Integration /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml: {'beta': None,
 'brand': '',
 'can_get_samples': True,
 'category': 'Data Enrichment & Threat Intelligence',
 'cmdline': None,
 'commit_message': '',
 'configuration': [{'default_value': 'https://qmasters-integration.cyberint.io/ioc/api/v1/feed/daily/',
                    'display': 'The Cyberint IOC feed endpoint URL',
                    'hidden': False,
                    'info': '',
                    'name': 'url',
                    'options': None,
                    'required': True,
                    'type': 0},
                   {'default_value': '',
                    'display': 'API Key (Leave empty. Fill in the API Key in '
                               'the password field.)',
                    'hidden': False,
                    'info': '',
                    'name': 'access_token',
                    'options': None,
                    'required': True,
                    'type': 9},
                   {'default_value': 'true',
                    'display': 'Fetch indicators',
                    'hidden': False,
                    'info': '',
                    'name': 'feed',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': 'Good',
                    'display': 'Indicator Reputation',
                    'hidden': False,
                    'info': 'Indicators from this integration instance will be '
                            'marked with this reputation',
                    'name': 'feedReputation',
                    'options': ['None', 'Good', 'Suspicious', 'Bad'],
                    'required': False,
                    'type': 18},
                   {'default_value': 'F - Reliability cannot be judged',
                    'display': 'Source Reliability',
                    'hidden': False,
                    'info': 'Reliability of the source providing the '
                            'intelligence data',
                    'name': 'feedReliability',
                    'options': ['A - Completely reliable',
                                'B - Usually reliable',
                                'C - Fairly reliable',
                                'D - Not usually reliable',
                                'E - Unreliable',
                                'F - Reliability cannot be judged'],
                    'required': True,
                    'type': 15},
                   {'default_value': '',
                    'display': 'Traffic Light Protocol Color',
                    'hidden': False,
                    'info': 'The Traffic Light Protocol (TLP) designation to '
                            'apply to indicators fetched from the feed',
                    'name': 'tlp_color',
                    'options': ['RED', 'AMBER', 'GREEN', 'WHITE'],
                    'required': False,
                    'type': 15},
                   {'default_value': 'suddenDeath',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationPolicy',
                    'options': ['never',
                                'interval',
                                'indicatorType',
                                'suddenDeath'],
                    'required': False,
                    'type': 17},
                   {'default_value': '20160',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationInterval',
                    'options': None,
                    'required': False,
                    'type': 1},
                   {'default_value': '30',
                    'display': 'Feed Fetch Interval',
                    'hidden': False,
                    'info': '',
                    'name': 'feedFetchInterval',
                    'options': None,
                    'required': False,
                    'type': 19},
                   {'default_value': '',
                    'display': 'Tags',
                    'hidden': False,
                    'info': 'Supports CSV values.',
                    'name': 'feedTags',
                    'options': None,
                    'required': False,
                    'type': 0},
                   {'default_value': 'true',
                    'display': 'Bypass exclusion list',
                    'hidden': False,
                    'info': 'When selected, the exclusion list is ignored for '
                            'indicators from this feed. This means that if an '
                            'indicator from this feed is on the exclusion '
                            'list, the indicator might still be added to the '
                            'system.',
                    'name': 'feedBypassExclusionList',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Trust any certificate (not secure)',
                    'hidden': False,
                    'info': '',
                    'name': 'insecure',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Use system proxy settings',
                    'hidden': False,
                    'info': '',
                    'name': 'proxy',
                    'options': None,
                    'required': False,
                    'type': 8}],
 'deprecated': None,
 'description': 'Use the Cyberint Feed integration to get indicators from the '
                'feed.',
 'detailed_description': '### Partner Contributed Integration\n'
                         '#### Integration Author: Cyberint\n'
                         'Support and maintenance for this integration are '
                         'provided by the author. Please use the following '
                         'contact details:\n'
                         '- **Email**: '
                         '[support@cyberint.com](mailto:support@cyberint.com)\n'
                         '- **URL**: '
                         '[https://cyberint.com](https://cyberint.com)\n'
                         '***\n',
 'display': 'Cyberint Feed (Partner Contribution)',
 'executable': None,
 'hidden': False,
 'hide_engines': None,
 'icon': '',
 'id': 'Cyberint Feed',
 'image': None,
 'integration_script': {'commands': [{'arguments': [{'auto': None,
                                                     'default': False,
                                                     'default_value': '10',
                                                     'deprecated': False,
                                                     'description': 'The '
                                                                    'maximum '
                                                                    'number of '
                                                                    'results '
                                                                    'to '
                                                                    'return. '
                                                                    'The '
                                                                    'default '
                                                                    'value is '
                                                                    '10.',
                                                     'is_array': None,
                                                     'name': 'limit',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False}],
                                      'cartesian': False,
                                      'deprecated': False,
                                      'description': 'Gets indicators from the '
                                                     'feed.',
                                      'execution': False,
                                      'hidden': False,
                                      'important': None,
                                      'name': 'cyberint-get-indicators',
                                      'outputs': None,
                                      'permitted': False,
                                      'sensitive': False,
                                      'timeout': 0}],
                        'docker_image': 'demisto/btfl-soup:1.0.1.45563',
                        'feed': True,
                        'is_fetch': False,
                        'is_fetch_credentials': False,
                        'long_running': False,
                        'long_running_port_mapping': False,
                        'run_once': False,
                        'script': "register_module_line('Cyberint Feed', "
                                  "'start', __line__())\n"
                                  '### pack version: 1.1.3\n'
                                  'import re\n'
                                  'from typing import Any, Callable, Dict, '
                                  'List, Optional, Tuple\n'
                                  '\n'
                                  '\n'
                                  'import urllib3\n'
                                  'from bs4 import BeautifulSoup\n'
                                  '\n'
                                  '\n'
                                  '# disable insecure warnings\n'
                                  'urllib3.disable_warnings()\n'
                                  '\n'
                                  'INTEGRATION_NAME = "Microsoft Intune Feed"\n'
                                  '\n'
                                  '\n'
                                  'class Client(BaseClient):\n'
                                  '    """\n'
                                  '    Client to use in the Microsoft Intune '
                                  'Feed integration. Overrides BaseClient.\n'
                                  '    """\n'
                                  '\n'
                                  '    def __init__(\n'
                                  '        self,\n'
                                  '        base_url: str,\n'
                                  '        access_token: str,\n'
                                  '        verify: bool = False,\n'
                                  '        proxy: bool = False,\n'
                                  '    ):\n'
                                  '        self._cookies = {"access_token": '
                                  'access_token}\n'
                                  '        super().__init__(base_url, '
                                  'verify=verify, proxy=proxy)\n'
                                  '\n'
                                  '    def build_iterator(self, date_time: str '
                                  '= None) -> List:\n'
                                  '        """Retrieves all entries from the '
                                  'feed.\n'
                                  '\n'
                                  '        Returns:\n'
                                  '            A list of objects, containing '
                                  'the indicators.\n'
                                  '        """\n'
                                  '        result = []  # type: list\n'
                                  '        domains = []  # type: list\n'
                                  '        ipv4s = []  # type: list\n'
                                  '        files = []  # type: list\n'
                                  '        urls = []  # type: list\n'
                                  '\n'
                                  '        date_time = "2023-11-23"\n'
                                  '        response = '
                                  'self._http_request("GET", '
                                  'url_suffix=date_time, '
                                  'cookies=self._cookies, resp_type="text")\n'
                                  '        feeds = '
                                  'response.strip().split("\\n")\n'
                                  '        ioc_feeds = [json.loads(feed) for '
                                  'feed in feeds]\n'
                                  '\n'
                                  '        for indicator in ioc_feeds:\n'
                                  '            # Infer the type of the '
                                  'indicator using '
                                  "'auto_detect_indicator_type(indicator)' "
                                  'function\n'
                                  '            # (defined in '
                                  'CommonServerPython).\n'
                                  '            if indicator_type := '
                                  'auto_detect_indicator_type(indicator["ioc_value"]):\n'
                                  '                result.append(\n'
                                  '                    {\n'
                                  '                        "value": '
                                  'indicator,\n'
                                  '                        "type": '
                                  'indicator_type,\n'
                                  '                        "FeedURL": '
                                  'self._base_url,\n'
                                  '                        "relations": [{}],\n'
                                  '                    }\n'
                                  '                )\n'
                                  '        # for ioc in ioc_feeds:\n'
                                  '        #     if ioc["ioc_type"] == '
                                  '"ipv4":\n'
                                  '        #         ipv4s.append(ioc)\n'
                                  '        #     if ioc["ioc_type"] == '
                                  '"file/sha256":\n'
                                  '        #         files.append(ioc)\n'
                                  '        #     if ioc["ioc_type"] == '
                                  '"domain":\n'
                                  '        #         domains.append(ioc)\n'
                                  '        #     if ioc["ioc_type"] == "url":\n'
                                  '        #         urls.append(ioc)\n'
                                  '\n'
                                  '        # for domain in domains:\n'
                                  '        #     result.append(\n'
                                  '        #         {\n'
                                  '        #             "value": domain,\n'
                                  '        #             "type": '
                                  'FeedIndicatorType.DomainGlob if "*" in '
                                  'domain else FeedIndicatorType.Domain,\n'
                                  '        #             "FeedURL": '
                                  'self._base_url,\n'
                                  '        #         }\n'
                                  '        #     )\n'
                                  '        # for ipv4 in ipv4s:\n'
                                  '        #     result.append({"value": ipv4, '
                                  '"type": FeedIndicatorType.IP, "FeedURL": '
                                  'self._base_url})\n'
                                  '        # for url in urls:\n'
                                  '        #     result.append({"value": url, '
                                  '"type": FeedIndicatorType.URL, "FeedURL": '
                                  'self._base_url})\n'
                                  '        # for file in files:\n'
                                  '        #     result.append({"value": file, '
                                  '"type": FeedIndicatorType.File, "FeedURL": '
                                  'self._base_url})\n'
                                  '\n'
                                  '        return result\n'
                                  '\n'
                                  '\n'
                                  'def test_module(client: Client, *_) -> '
                                  'Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Builds the iterator to check that '
                                  'the feed is accessible.\n'
                                  '    Args:\n'
                                  '        client: Client object.\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    client.build_iterator()\n'
                                  '    return "ok"\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators(\n'
                                  '    client: Client,\n'
                                  '    tlp_color: str,\n'
                                  '    feed_tags: List = [],\n'
                                  '    limit: int = -1,\n'
                                  ') -> List[Dict]:\n'
                                  '    """Retrieves indicators from the feed\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client (Client): Client object with '
                                  'request\n'
                                  '        feed_tags (list): tags to assign '
                                  'fetched indicators\n'
                                  '        limit (int): limit the results\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    iterator = client.build_iterator()\n'
                                  '    indicators = []\n'
                                  '    if limit > 0:\n'
                                  '        iterator = iterator[:limit]\n'
                                  '\n'
                                  '    # extract values from iterator\n'
                                  '    for item in iterator:\n'
                                  '        value_ = item.get("value")\n'
                                  '        type_ = item.get("type")\n'
                                  '        raw_data = {\n'
                                  '            "value": value_,\n'
                                  '            "type": type_,\n'
                                  '        }\n'
                                  '\n'
                                  '        # Create indicator object for each '
                                  'value.\n'
                                  '        # The object consists of a '
                                  'dictionary with required and optional keys '
                                  'and values, as described blow.\n'
                                  '        for key, value in item.items():\n'
                                  '            raw_data.update({key: value})\n'
                                  '        indicator_obj = {\n'
                                  '            # The indicator value.\n'
                                  '            "value": value_,\n'
                                  '            # The indicator type as defined '
                                  'in Cortex XSOAR.\n'
                                  '            # One can use the '
                                  'FeedIndicatorType class under '
                                  'CommonServerPython to populate this field.\n'
                                  '            "type": type_,\n'
                                  '            # The name of the service '
                                  'supplying this feed.\n'
                                  '            "service": "Cyberint",\n'
                                  '            # A dictionary that maps values '
                                  'to existing indicator fields defined in '
                                  'Cortex XSOAR.\n'
                                  '            # One can use this section in '
                                  'order to map custom indicator fields '
                                  'previously defined\n'
                                  '            # in Cortex XSOAR to their '
                                  'values.\n'
                                  '            "fields": {},\n'
                                  '            # A dictionary of the raw data '
                                  'returned from the feed source about the '
                                  'indicator.\n'
                                  '            "rawJSON": raw_data,\n'
                                  '        }\n'
                                  '\n'
                                  '        if feed_tags:\n'
                                  '            indicator_obj["fields"]["tags"] '
                                  '= feed_tags\n'
                                  '\n'
                                  '        if tlp_color:\n'
                                  '            '
                                  'indicator_obj["fields"]["trafficlightprotocol"] '
                                  '= tlp_color\n'
                                  '\n'
                                  '        indicators.append(indicator_obj)\n'
                                  '\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def get_indicators_command(client: Client, '
                                  'params: Dict[str, str], args: Dict[str, '
                                  'str]) -> CommandResults:\n'
                                  '    """Wrapper for retrieving indicators '
                                  'from the feed to the war-room.\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '        args: demisto.args()\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    limit = int(args.get("limit", "10"))\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'tlp_color, feed_tags, limit)\n'
                                  '    human_readable = tableToMarkdown(\n'
                                  '        "Indicators from Cyberint Feed:",\n'
                                  '        indicators,\n'
                                  '        headers=["value", "type"],\n'
                                  '        '
                                  'headerTransform=string_to_table_header,\n'
                                  '        removeNull=True,\n'
                                  '    )\n'
                                  '    return CommandResults(\n'
                                  '        readable_output=human_readable,\n'
                                  '        outputs_prefix="",\n'
                                  '        outputs_key_field="",\n'
                                  '        raw_response=indicators,\n'
                                  '        outputs={},\n'
                                  '    )\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators_command(client: '
                                  'Client, params: Dict[str, str]) -> '
                                  'List[Dict]:\n'
                                  '    """Wrapper for fetching indicators from '
                                  'the feed to the Indicators tab.\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '\n'
                                  '    indicators = fetch_indicators(client, '
                                  'tlp_color, feed_tags)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def main():\n'
                                  '    """\n'
                                  '    PARSE AND VALIDATE INTEGRATION PARAMS\n'
                                  '    """\n'
                                  '    params = demisto.params()\n'
                                  '    args = demisto.args()\n'
                                  '    base_url = params.get("url")\n'
                                  '    access_token = '
                                  'params.get("access_token").get("password")\n'
                                  '    insecure = not params.get("insecure", '
                                  'False)\n'
                                  '    proxy = params.get("proxy", False)\n'
                                  '\n'
                                  '    command = demisto.command()\n'
                                  '    demisto.info(f"Command being called is '
                                  '{command}")\n'
                                  '\n'
                                  '    try:\n'
                                  '        client = Client(\n'
                                  '            base_url=base_url,\n'
                                  '            access_token=access_token,\n'
                                  '            verify=insecure,\n'
                                  '            proxy=proxy,\n'
                                  '        )\n'
                                  '\n'
                                  '        if command == "test-module":\n'
                                  '            # This is the call made when '
                                  'pressing the integration Test button.\n'
                                  '            '
                                  'return_results(test_module(client))\n'
                                  '\n'
                                  '        elif command == '
                                  '"cyberint-get-indicators":\n'
                                  '            # This is the command that '
                                  'fetches a limited number of indicators from '
                                  'the feed source\n'
                                  '            # and displays them in the war '
                                  'room.\n'
                                  '            '
                                  'return_results(get_indicators_command(client, '
                                  'params, args))\n'
                                  '\n'
                                  '        elif command == '
                                  '"fetch-indicators":\n'
                                  '            # This is the command that '
                                  'initiates a request to the feed endpoint '
                                  'and create new indicators objects from\n'
                                  '            # the data fetched. If the '
                                  'integration instance is configured to fetch '
                                  'indicators, then this is the command\n'
                                  '            # that will be executed at the '
                                  'specified feed fetch interval.\n'
                                  '            indicators = '
                                  'fetch_indicators_command(client, params)\n'
                                  '            for iter_ in batch(indicators, '
                                  'batch_size=2000):\n'
                                  '                '
                                  'demisto.createIndicators(iter_)\n'
                                  '\n'
                                  '        else:\n'
                                  '            raise '
                                  'NotImplementedError(f"Command {command} is '
                                  'not implemented.")\n'
                                  '\n'
                                  '    # Log exceptions and return errors\n'
                                  '    except Exception as e:\n'
                                  '        return_error(f"Failed to execute '
                                  '{command} command.\\nError:\\n{str(e)}")\n'
                                  '\n'
                                  '\n'
                                  'if __name__ in ["__main__", "builtin", '
                                  '"builtins"]:\n'
                                  '    main()\n'
                                  '\n'
                                  "register_module_line('Cyberint Feed', "
                                  "'end', __line__())\n",
                        'subtype': 'python3',
                        'type': 'python'},
 'is_password_protected': None,
 'locked': None,
 'modified': datetime.datetime(2023, 12, 26, 13, 50, 23, 66271, tzinfo=tzoffset(None, 7200)),
 'name': 'Cyberint Feed',
 'path': None,
 'prev_name': 'Cyberint Feed',
 'propagation_labels': ['all'],
 'readonly': None,
 'script_not_visible': None,
 'should_commit': False,
 'sort_values': None,
 'source_module_id': None,
 'system': None,
 'vc_should_ignore': False,
 'version': 2}
[2023-12-26T13:51:02] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-12-26T13:51:02] - [MainThread] - [DEBUG] - uploader.py:295 - Uploaded Integration integration-FeedCyberint.yml successfully
[2023-12-26T13:51:02] - [MainThread] - [INFO] - uploader.py:397 - UPLOAD SUMMARY:

[2023-12-26T13:51:03] - [MainThread] - [INFO] - uploader.py:430 - SUCCESSFUL UPLOADS:
╒══════════════════╤═════════════╤═════════════╤════════════════╕
│ NAME             │ TYPE        │ PACK NAME   │ PACK VERSION   │
╞══════════════════╪═════════════╪═════════════╪════════════════╡
│ FeedCyberint.yml │ Integration │             │                │
╘══════════════════╧═════════════╧═════════════╧════════════════╛

[2023-12-26T14:27:42] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T14:27:42] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T14:27:42] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T14:27:42] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-12-26T14:27:42] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): pypi.org:443
[2023-12-26T14:27:43] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 43312
[2023-12-26T14:27:43] - [MainThread] - [INFO] - __main__.py:231 - You are using demisto-sdk 1.25.0.
[2023-12-26T14:27:43] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T14:27:43] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T14:27:43] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T14:27:43] - [MainThread] - [DEBUG] - tools.py:3836 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-12-26T14:28:21] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T14:28:21] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T14:28:21] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T14:28:21] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-12-26T14:28:21] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): pypi.org:443
[2023-12-26T14:28:22] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 43312
[2023-12-26T14:28:22] - [MainThread] - [INFO] - __main__.py:231 - You are using demisto-sdk 1.25.0.
[2023-12-26T14:28:22] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-26T14:28:22] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-26T14:28:22] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-26T14:28:22] - [MainThread] - [DEBUG] - tools.py:3836 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-12-26T14:28:22] - [MainThread] - [INFO] - uploader.py:211 - Uploading /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml to https://192.168.30.206...
[2023-12-26T14:28:22] - [MainThread] - [DEBUG] - base_content.py:240 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-26T14:28:22] - [MainThread] - [DEBUG] - content_item.py:104 - Parsing content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-26T14:28:22] - [MainThread] - [DEBUG] - content_item.py:144 - Parsed Integration:Cyberint Feed
[2023-12-26T14:28:22] - [MainThread] - [DEBUG] - base_content.py:286 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml as <class 'demisto_sdk.commands.content_graph.objects.integration.Integration'>
[2023-12-26T14:28:22] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-12-26T14:28:22] - [MainThread] - [DEBUG] - content_item.py:232 - preparing /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-26T14:28:22] - [MainThread] - [DEBUG] - integration_script_unifier.py:76 - Unifying /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-26T14:28:22] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-12-26T14:28:22] - [MainThread] - [WARNING] - integration_script_unifier.py:207 - Failed getting image data for '/home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint'.
[2023-12-26T14:28:22] - [MainThread] - [INFO] - integration_script_unifier.py:650 - Did not find README in /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint, not adding integration doc link
[2023-12-26T14:28:22] - [MainThread] - [DEBUG] - integration_script_unifier.py:132 - Created unified yml: FeedCyberint.yml
[2023-12-26T14:28:22] - [MainThread] - [DEBUG] - integration_script.py:76 - The docker_native_image_config.json file could not be found.
[2023-12-26T14:28:22] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-12-26T14:28:22] - [MainThread] - [DEBUG] - tools.py:39 - got the following response when uploading Integration /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml: {'beta': None,
 'brand': '',
 'can_get_samples': True,
 'category': 'Data Enrichment & Threat Intelligence',
 'cmdline': None,
 'commit_message': '',
 'configuration': [{'default_value': 'https://qmasters-integration.cyberint.io/ioc/api/v1/feed/daily/',
                    'display': 'The Cyberint IOC feed endpoint URL',
                    'hidden': False,
                    'info': '',
                    'name': 'url',
                    'options': None,
                    'required': True,
                    'type': 0},
                   {'default_value': '',
                    'display': 'API Key (Leave empty. Fill in the API Key in '
                               'the password field.)',
                    'hidden': False,
                    'info': '',
                    'name': 'access_token',
                    'options': None,
                    'required': True,
                    'type': 9},
                   {'default_value': 'true',
                    'display': 'Fetch indicators',
                    'hidden': False,
                    'info': '',
                    'name': 'feed',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': 'Good',
                    'display': 'Indicator Reputation',
                    'hidden': False,
                    'info': 'Indicators from this integration instance will be '
                            'marked with this reputation',
                    'name': 'feedReputation',
                    'options': ['None', 'Good', 'Suspicious', 'Bad'],
                    'required': False,
                    'type': 18},
                   {'default_value': 'F - Reliability cannot be judged',
                    'display': 'Source Reliability',
                    'hidden': False,
                    'info': 'Reliability of the source providing the '
                            'intelligence data',
                    'name': 'feedReliability',
                    'options': ['A - Completely reliable',
                                'B - Usually reliable',
                                'C - Fairly reliable',
                                'D - Not usually reliable',
                                'E - Unreliable',
                                'F - Reliability cannot be judged'],
                    'required': True,
                    'type': 15},
                   {'default_value': '',
                    'display': 'Traffic Light Protocol Color',
                    'hidden': False,
                    'info': 'The Traffic Light Protocol (TLP) designation to '
                            'apply to indicators fetched from the feed',
                    'name': 'tlp_color',
                    'options': ['RED', 'AMBER', 'GREEN', 'WHITE'],
                    'required': False,
                    'type': 15},
                   {'default_value': 'suddenDeath',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationPolicy',
                    'options': ['never',
                                'interval',
                                'indicatorType',
                                'suddenDeath'],
                    'required': False,
                    'type': 17},
                   {'default_value': '20160',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationInterval',
                    'options': None,
                    'required': False,
                    'type': 1},
                   {'default_value': '30',
                    'display': 'Feed Fetch Interval',
                    'hidden': False,
                    'info': '',
                    'name': 'feedFetchInterval',
                    'options': None,
                    'required': False,
                    'type': 19},
                   {'default_value': '',
                    'display': 'Tags',
                    'hidden': False,
                    'info': 'Supports CSV values.',
                    'name': 'feedTags',
                    'options': None,
                    'required': False,
                    'type': 0},
                   {'default_value': 'true',
                    'display': 'Bypass exclusion list',
                    'hidden': False,
                    'info': 'When selected, the exclusion list is ignored for '
                            'indicators from this feed. This means that if an '
                            'indicator from this feed is on the exclusion '
                            'list, the indicator might still be added to the '
                            'system.',
                    'name': 'feedBypassExclusionList',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Trust any certificate (not secure)',
                    'hidden': False,
                    'info': '',
                    'name': 'insecure',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Use system proxy settings',
                    'hidden': False,
                    'info': '',
                    'name': 'proxy',
                    'options': None,
                    'required': False,
                    'type': 8}],
 'deprecated': None,
 'description': 'Use the Cyberint Feed integration to get indicators from the '
                'feed.',
 'detailed_description': '### Partner Contributed Integration\n'
                         '#### Integration Author: Cyberint\n'
                         'Support and maintenance for this integration are '
                         'provided by the author. Please use the following '
                         'contact details:\n'
                         '- **Email**: '
                         '[support@cyberint.com](mailto:support@cyberint.com)\n'
                         '- **URL**: '
                         '[https://cyberint.com](https://cyberint.com)\n'
                         '***\n',
 'display': 'Cyberint Feed (Partner Contribution)',
 'executable': None,
 'hidden': False,
 'hide_engines': None,
 'icon': '',
 'id': 'Cyberint Feed',
 'image': None,
 'integration_script': {'commands': [{'arguments': [{'auto': None,
                                                     'default': False,
                                                     'default_value': '10',
                                                     'deprecated': False,
                                                     'description': 'The '
                                                                    'maximum '
                                                                    'number of '
                                                                    'results '
                                                                    'to '
                                                                    'return. '
                                                                    'The '
                                                                    'default '
                                                                    'value is '
                                                                    '10.',
                                                     'is_array': None,
                                                     'name': 'limit',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False},
                                                    {'auto': None,
                                                     'default': False,
                                                     'default_value': None,
                                                     'deprecated': False,
                                                     'description': 'The '
                                                                    'indicator '
                                                                    'value.',
                                                     'is_array': None,
                                                     'name': '',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False},
                                                    {'auto': None,
                                                     'default': False,
                                                     'default_value': None,
                                                     'deprecated': False,
                                                     'description': 'The '
                                                                    'indicator '
                                                                    'type.',
                                                     'is_array': None,
                                                     'name': '',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False},
                                                    {'auto': None,
                                                     'default': False,
                                                     'default_value': None,
                                                     'deprecated': False,
                                                     'description': 'Tags that '
                                                                    'are '
                                                                    'associated '
                                                                    'with the '
                                                                    'indicator.',
                                                     'is_array': None,
                                                     'name': '',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False},
                                                    {'auto': None,
                                                     'default': False,
                                                     'default_value': None,
                                                     'deprecated': False,
                                                     'description': 'The feed '
                                                                    'description.',
                                                     'is_array': None,
                                                     'name': '',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False},
                                                    {'auto': None,
                                                     'default': False,
                                                     'default_value': None,
                                                     'deprecated': False,
                                                     'description': 'The feed '
                                                                    'detected '
                                                                    'activity.',
                                                     'is_array': None,
                                                     'name': '',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False},
                                                    {'auto': None,
                                                     'default': False,
                                                     'default_value': None,
                                                     'deprecated': False,
                                                     'description': 'The feed '
                                                                    'observation '
                                                                    'date.',
                                                     'is_array': None,
                                                     'name': '',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False},
                                                    {'auto': None,
                                                     'default': False,
                                                     'default_value': None,
                                                     'deprecated': False,
                                                     'description': 'The feed '
                                                                    'severity '
                                                                    'score.',
                                                     'is_array': None,
                                                     'name': '',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False},
                                                    {'auto': None,
                                                     'default': False,
                                                     'default_value': None,
                                                     'deprecated': False,
                                                     'description': 'The feed '
                                                                    'confidence.',
                                                     'is_array': None,
                                                     'name': '',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False}],
                                      'cartesian': False,
                                      'deprecated': False,
                                      'description': 'Gets indicators from the '
                                                     'feed.',
                                      'execution': False,
                                      'hidden': False,
                                      'important': None,
                                      'name': 'cyberint-get-indicators',
                                      'outputs': None,
                                      'permitted': False,
                                      'sensitive': False,
                                      'timeout': 0}],
                        'docker_image': 'demisto/btfl-soup:1.0.1.45563',
                        'feed': True,
                        'is_fetch': False,
                        'is_fetch_credentials': False,
                        'long_running': False,
                        'long_running_port_mapping': False,
                        'run_once': False,
                        'script': "register_module_line('Cyberint Feed', "
                                  "'start', __line__())\n"
                                  '### pack version: 1.1.3\n'
                                  'import re\n'
                                  'from typing import Any, Callable, Dict, '
                                  'List, Optional, Tuple\n'
                                  '\n'
                                  '\n'
                                  'import urllib3\n'
                                  'from bs4 import BeautifulSoup\n'
                                  '\n'
                                  '\n'
                                  '# disable insecure warnings\n'
                                  'urllib3.disable_warnings()\n'
                                  '\n'
                                  'INTEGRATION_NAME = "Microsoft Intune Feed"\n'
                                  '\n'
                                  '\n'
                                  'class Client(BaseClient):\n'
                                  '    """\n'
                                  '    Client to use in the Microsoft Intune '
                                  'Feed integration. Overrides BaseClient.\n'
                                  '    """\n'
                                  '\n'
                                  '    def __init__(\n'
                                  '        self,\n'
                                  '        base_url: str,\n'
                                  '        access_token: str,\n'
                                  '        verify: bool = False,\n'
                                  '        proxy: bool = False,\n'
                                  '    ):\n'
                                  '        self._cookies = {"access_token": '
                                  'access_token}\n'
                                  '        super().__init__(base_url, '
                                  'verify=verify, proxy=proxy)\n'
                                  '\n'
                                  '    def build_iterator(self, date_time: str '
                                  '= None) -> List:\n'
                                  '        """Retrieves all entries from the '
                                  'feed.\n'
                                  '\n'
                                  '        Returns:\n'
                                  '            A list of objects, containing '
                                  'the indicators.\n'
                                  '        """\n'
                                  '        result = []  # type: list\n'
                                  '        domains = []  # type: list\n'
                                  '        ipv4s = []  # type: list\n'
                                  '        files = []  # type: list\n'
                                  '        urls = []  # type: list\n'
                                  '\n'
                                  '        date_time = "2023-11-23"\n'
                                  '        response = '
                                  'self._http_request("GET", '
                                  'url_suffix=date_time, '
                                  'cookies=self._cookies, resp_type="text")\n'
                                  '        feeds = '
                                  'response.strip().split("\\n")\n'
                                  '        ioc_feeds = [json.loads(feed) for '
                                  'feed in feeds]\n'
                                  '\n'
                                  '        for indicator in ioc_feeds:\n'
                                  '            # Infer the type of the '
                                  'indicator using '
                                  "'auto_detect_indicator_type(indicator)' "
                                  'function\n'
                                  '            # (defined in '
                                  'CommonServerPython).\n'
                                  '            if indicator_type := '
                                  'auto_detect_indicator_type(indicator["ioc_value"]):\n'
                                  '                result.append(\n'
                                  '                    {\n'
                                  '                        "value": '
                                  'indicator,\n'
                                  '                        "type": '
                                  'indicator_type,\n'
                                  '                        "FeedURL": '
                                  'self._base_url,\n'
                                  '                        "relations": [{}],\n'
                                  '                    }\n'
                                  '                )\n'
                                  '        # for ioc in ioc_feeds:\n'
                                  '        #     if ioc["ioc_type"] == '
                                  '"ipv4":\n'
                                  '        #         ipv4s.append(ioc)\n'
                                  '        #     if ioc["ioc_type"] == '
                                  '"file/sha256":\n'
                                  '        #         files.append(ioc)\n'
                                  '        #     if ioc["ioc_type"] == '
                                  '"domain":\n'
                                  '        #         domains.append(ioc)\n'
                                  '        #     if ioc["ioc_type"] == "url":\n'
                                  '        #         urls.append(ioc)\n'
                                  '\n'
                                  '        # for domain in domains:\n'
                                  '        #     result.append(\n'
                                  '        #         {\n'
                                  '        #             "value": domain,\n'
                                  '        #             "type": '
                                  'FeedIndicatorType.DomainGlob if "*" in '
                                  'domain else FeedIndicatorType.Domain,\n'
                                  '        #             "FeedURL": '
                                  'self._base_url,\n'
                                  '        #         }\n'
                                  '        #     )\n'
                                  '        # for ipv4 in ipv4s:\n'
                                  '        #     result.append({"value": ipv4, '
                                  '"type": FeedIndicatorType.IP, "FeedURL": '
                                  'self._base_url})\n'
                                  '        # for url in urls:\n'
                                  '        #     result.append({"value": url, '
                                  '"type": FeedIndicatorType.URL, "FeedURL": '
                                  'self._base_url})\n'
                                  '        # for file in files:\n'
                                  '        #     result.append({"value": file, '
                                  '"type": FeedIndicatorType.File, "FeedURL": '
                                  'self._base_url})\n'
                                  '\n'
                                  '        return result\n'
                                  '\n'
                                  '\n'
                                  'def test_module(client: Client, *_) -> '
                                  'Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Builds the iterator to check that '
                                  'the feed is accessible.\n'
                                  '    Args:\n'
                                  '        client: Client object.\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    client.build_iterator()\n'
                                  '    return "ok"\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators(\n'
                                  '    client: Client,\n'
                                  '    tlp_color: str,\n'
                                  '    feed_tags: List = [],\n'
                                  '    limit: int = -1,\n'
                                  ') -> List[Dict]:\n'
                                  '    """Retrieves indicators from the feed\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client (Client): Client object with '
                                  'request\n'
                                  '        feed_tags (list): tags to assign '
                                  'fetched indicators\n'
                                  '        limit (int): limit the results\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    iterator = client.build_iterator()\n'
                                  '    indicators = []\n'
                                  '    if limit > 0:\n'
                                  '        iterator = iterator[:limit]\n'
                                  '\n'
                                  '    # extract values from iterator\n'
                                  '    for item in iterator:\n'
                                  '        value_ = item.get("value")\n'
                                  '        type_ = item.get("type")\n'
                                  '        raw_data = {\n'
                                  '            "value": value_,\n'
                                  '            "type": type_,\n'
                                  '        }\n'
                                  '\n'
                                  '        # Create indicator object for each '
                                  'value.\n'
                                  '        # The object consists of a '
                                  'dictionary with required and optional keys '
                                  'and values, as described blow.\n'
                                  '        for key, value in item.items():\n'
                                  '            raw_data.update({key: value})\n'
                                  '        indicator_obj = {\n'
                                  '            # The indicator value.\n'
                                  '            "value": value_,\n'
                                  '            # The indicator type as defined '
                                  'in Cortex XSOAR.\n'
                                  '            # One can use the '
                                  'FeedIndicatorType class under '
                                  'CommonServerPython to populate this field.\n'
                                  '            "type": type_,\n'
                                  '            # The name of the service '
                                  'supplying this feed.\n'
                                  '            "service": "Cyberint",\n'
                                  '            # A dictionary that maps values '
                                  'to existing indicator fields defined in '
                                  'Cortex XSOAR.\n'
                                  '            # One can use this section in '
                                  'order to map custom indicator fields '
                                  'previously defined\n'
                                  '            # in Cortex XSOAR to their '
                                  'values.\n'
                                  '            "fields": {},\n'
                                  '            # A dictionary of the raw data '
                                  'returned from the feed source about the '
                                  'indicator.\n'
                                  '            "rawJSON": raw_data,\n'
                                  '        }\n'
                                  '\n'
                                  '        if feed_tags:\n'
                                  '            indicator_obj["fields"]["tags"] '
                                  '= feed_tags\n'
                                  '\n'
                                  '        if tlp_color:\n'
                                  '            '
                                  'indicator_obj["fields"]["trafficlightprotocol"] '
                                  '= tlp_color\n'
                                  '\n'
                                  '        indicators.append(indicator_obj)\n'
                                  '\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def get_indicators_command(client: Client, '
                                  'params: Dict[str, str], args: Dict[str, '
                                  'str]) -> CommandResults:\n'
                                  '    """Wrapper for retrieving indicators '
                                  'from the feed to the war-room.\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '        args: demisto.args()\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    limit = int(args.get("limit", "10"))\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'tlp_color, feed_tags, limit)\n'
                                  '    human_readable = tableToMarkdown(\n'
                                  '        "Indicators from Cyberint Feed:",\n'
                                  '        indicators,\n'
                                  '        headers=["value", "type"],\n'
                                  '        '
                                  'headerTransform=string_to_table_header,\n'
                                  '        removeNull=True,\n'
                                  '    )\n'
                                  '    return CommandResults(\n'
                                  '        readable_output=human_readable,\n'
                                  '        outputs_prefix="",\n'
                                  '        outputs_key_field="",\n'
                                  '        raw_response=indicators,\n'
                                  '        outputs={},\n'
                                  '    )\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators_command(client: '
                                  'Client, params: Dict[str, str]) -> '
                                  'List[Dict]:\n'
                                  '    """Wrapper for fetching indicators from '
                                  'the feed to the Indicators tab.\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '\n'
                                  '    indicators = fetch_indicators(client, '
                                  'tlp_color, feed_tags)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def main():\n'
                                  '    """\n'
                                  '    PARSE AND VALIDATE INTEGRATION PARAMS\n'
                                  '    """\n'
                                  '    params = demisto.params()\n'
                                  '    args = demisto.args()\n'
                                  '    base_url = params.get("url")\n'
                                  '    access_token = '
                                  'params.get("access_token").get("password")\n'
                                  '    insecure = not params.get("insecure", '
                                  'False)\n'
                                  '    proxy = params.get("proxy", False)\n'
                                  '\n'
                                  '    command = demisto.command()\n'
                                  '    demisto.info(f"Command being called is '
                                  '{command}")\n'
                                  '\n'
                                  '    try:\n'
                                  '        client = Client(\n'
                                  '            base_url=base_url,\n'
                                  '            access_token=access_token,\n'
                                  '            verify=insecure,\n'
                                  '            proxy=proxy,\n'
                                  '        )\n'
                                  '\n'
                                  '        if command == "test-module":\n'
                                  '            # This is the call made when '
                                  'pressing the integration Test button.\n'
                                  '            '
                                  'return_results(test_module(client))\n'
                                  '\n'
                                  '        elif command == '
                                  '"cyberint-get-indicators":\n'
                                  '            # This is the command that '
                                  'fetches a limited number of indicators from '
                                  'the feed source\n'
                                  '            # and displays them in the war '
                                  'room.\n'
                                  '            '
                                  'return_results(get_indicators_command(client, '
                                  'params, args))\n'
                                  '\n'
                                  '        elif command == '
                                  '"fetch-indicators":\n'
                                  '            # This is the command that '
                                  'initiates a request to the feed endpoint '
                                  'and create new indicators objects from\n'
                                  '            # the data fetched. If the '
                                  'integration instance is configured to fetch '
                                  'indicators, then this is the command\n'
                                  '            # that will be executed at the '
                                  'specified feed fetch interval.\n'
                                  '            indicators = '
                                  'fetch_indicators_command(client, params)\n'
                                  '            for iter_ in batch(indicators, '
                                  'batch_size=2000):\n'
                                  '                '
                                  'demisto.createIndicators(iter_)\n'
                                  '\n'
                                  '        else:\n'
                                  '            raise '
                                  'NotImplementedError(f"Command {command} is '
                                  'not implemented.")\n'
                                  '\n'
                                  '    # Log exceptions and return errors\n'
                                  '    except Exception as e:\n'
                                  '        return_error(f"Failed to execute '
                                  '{command} command.\\nError:\\n{str(e)}")\n'
                                  '\n'
                                  '\n'
                                  'if __name__ in ["__main__", "builtin", '
                                  '"builtins"]:\n'
                                  '    main()\n'
                                  '\n'
                                  "register_module_line('Cyberint Feed', "
                                  "'end', __line__())\n",
                        'subtype': 'python3',
                        'type': 'python'},
 'is_password_protected': None,
 'locked': None,
 'modified': datetime.datetime(2023, 12, 26, 14, 27, 43, 6414, tzinfo=tzoffset(None, 7200)),
 'name': 'Cyberint Feed',
 'path': None,
 'prev_name': 'Cyberint Feed',
 'propagation_labels': ['all'],
 'readonly': None,
 'script_not_visible': None,
 'should_commit': False,
 'sort_values': None,
 'source_module_id': None,
 'system': None,
 'vc_should_ignore': False,
 'version': 3}
[2023-12-26T14:28:22] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-12-26T14:28:22] - [MainThread] - [DEBUG] - uploader.py:295 - Uploaded Integration integration-FeedCyberint.yml successfully
[2023-12-26T14:28:22] - [MainThread] - [INFO] - uploader.py:397 - UPLOAD SUMMARY:

[2023-12-26T14:28:22] - [MainThread] - [INFO] - uploader.py:430 - SUCCESSFUL UPLOADS:
╒══════════════════╤═════════════╤═════════════╤════════════════╕
│ NAME             │ TYPE        │ PACK NAME   │ PACK VERSION   │
╞══════════════════╪═════════════╪═════════════╪════════════════╡
│ FeedCyberint.yml │ Integration │             │                │
╘══════════════════╧═════════════╧═════════════╧════════════════╛

[2023-12-27T09:58:16] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-27T09:58:16] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-27T09:58:16] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-27T09:58:16] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-12-27T09:58:16] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): pypi.org:443
[2023-12-27T09:58:16] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 43312
[2023-12-27T09:58:16] - [MainThread] - [INFO] - __main__.py:231 - You are using demisto-sdk 1.25.0.
[2023-12-27T09:58:16] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-27T09:58:16] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-27T09:58:16] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-27T09:58:16] - [MainThread] - [DEBUG] - tools.py:3836 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-27T09:59:30] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): pypi.org:443
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 43312
[2023-12-27T09:59:30] - [MainThread] - [INFO] - __main__.py:231 - You are using demisto-sdk 1.25.0.
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - tools.py:3836 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-12-27T09:59:30] - [MainThread] - [INFO] - uploader.py:211 - Uploading /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml to https://192.168.30.206...
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - base_content.py:240 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - content_item.py:104 - Parsing content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - content_item.py:144 - Parsed Integration:Cyberint Feed
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - base_content.py:286 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml as <class 'demisto_sdk.commands.content_graph.objects.integration.Integration'>
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - content_item.py:232 - preparing /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - integration_script_unifier.py:76 - Unifying /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-12-27T09:59:30] - [MainThread] - [WARNING] - integration_script_unifier.py:207 - Failed getting image data for '/home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint'.
[2023-12-27T09:59:30] - [MainThread] - [INFO] - integration_script_unifier.py:650 - Did not find README in /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint, not adding integration doc link
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - integration_script_unifier.py:132 - Created unified yml: FeedCyberint.yml
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - integration_script.py:76 - The docker_native_image_config.json file could not be found.
[2023-12-27T09:59:30] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-12-27T09:59:31] - [MainThread] - [DEBUG] - tools.py:39 - got the following response when uploading Integration /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml: {'beta': None,
 'brand': '',
 'can_get_samples': True,
 'category': 'Data Enrichment & Threat Intelligence',
 'cmdline': None,
 'commit_message': '',
 'configuration': [{'default_value': 'https://qmasters-integration.cyberint.io/ioc/api/v1/feed/daily/',
                    'display': 'The Cyberint IOC feed endpoint URL',
                    'hidden': False,
                    'info': '',
                    'name': 'url',
                    'options': None,
                    'required': True,
                    'type': 0},
                   {'default_value': '',
                    'display': 'API Key (Leave empty. Fill in the API Key in '
                               'the password field.)',
                    'hidden': False,
                    'info': '',
                    'name': 'access_token',
                    'options': None,
                    'required': True,
                    'type': 9},
                   {'default_value': 'true',
                    'display': 'Fetch indicators',
                    'hidden': False,
                    'info': '',
                    'name': 'feed',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': 'Good',
                    'display': 'Indicator Reputation',
                    'hidden': False,
                    'info': 'Indicators from this integration instance will be '
                            'marked with this reputation',
                    'name': 'feedReputation',
                    'options': ['None', 'Good', 'Suspicious', 'Bad'],
                    'required': False,
                    'type': 18},
                   {'default_value': 'F - Reliability cannot be judged',
                    'display': 'Source Reliability',
                    'hidden': False,
                    'info': 'Reliability of the source providing the '
                            'intelligence data',
                    'name': 'feedReliability',
                    'options': ['A - Completely reliable',
                                'B - Usually reliable',
                                'C - Fairly reliable',
                                'D - Not usually reliable',
                                'E - Unreliable',
                                'F - Reliability cannot be judged'],
                    'required': True,
                    'type': 15},
                   {'default_value': '',
                    'display': 'Traffic Light Protocol Color',
                    'hidden': False,
                    'info': 'The Traffic Light Protocol (TLP) designation to '
                            'apply to indicators fetched from the feed',
                    'name': 'tlp_color',
                    'options': ['RED', 'AMBER', 'GREEN', 'WHITE'],
                    'required': False,
                    'type': 15},
                   {'default_value': 'suddenDeath',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationPolicy',
                    'options': ['never',
                                'interval',
                                'indicatorType',
                                'suddenDeath'],
                    'required': False,
                    'type': 17},
                   {'default_value': '20160',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationInterval',
                    'options': None,
                    'required': False,
                    'type': 1},
                   {'default_value': '30',
                    'display': 'Feed Fetch Interval',
                    'hidden': False,
                    'info': '',
                    'name': 'feedFetchInterval',
                    'options': None,
                    'required': False,
                    'type': 19},
                   {'default_value': '',
                    'display': 'Tags',
                    'hidden': False,
                    'info': 'Supports CSV values.',
                    'name': 'feedTags',
                    'options': None,
                    'required': False,
                    'type': 0},
                   {'default_value': 'true',
                    'display': 'Bypass exclusion list',
                    'hidden': False,
                    'info': 'When selected, the exclusion list is ignored for '
                            'indicators from this feed. This means that if an '
                            'indicator from this feed is on the exclusion '
                            'list, the indicator might still be added to the '
                            'system.',
                    'name': 'feedBypassExclusionList',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Trust any certificate (not secure)',
                    'hidden': False,
                    'info': '',
                    'name': 'insecure',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Use system proxy settings',
                    'hidden': False,
                    'info': '',
                    'name': 'proxy',
                    'options': None,
                    'required': False,
                    'type': 8}],
 'deprecated': None,
 'description': 'Use the Cyberint Feed integration to get indicators from the '
                'feed.',
 'detailed_description': '### Partner Contributed Integration\n'
                         '#### Integration Author: Cyberint\n'
                         'Support and maintenance for this integration are '
                         'provided by the author. Please use the following '
                         'contact details:\n'
                         '- **Email**: '
                         '[support@cyberint.com](mailto:support@cyberint.com)\n'
                         '- **URL**: '
                         '[https://cyberint.com](https://cyberint.com)\n'
                         '***\n',
 'display': 'Cyberint Feed (Partner Contribution)',
 'executable': None,
 'hidden': False,
 'hide_engines': None,
 'icon': '',
 'id': 'Cyberint Feed',
 'image': None,
 'integration_script': {'commands': [{'arguments': [{'auto': None,
                                                     'default': False,
                                                     'default_value': '10',
                                                     'deprecated': False,
                                                     'description': 'The '
                                                                    'maximum '
                                                                    'number of '
                                                                    'results '
                                                                    'to '
                                                                    'return. '
                                                                    'The '
                                                                    'default '
                                                                    'value is '
                                                                    '10.',
                                                     'is_array': None,
                                                     'name': 'limit',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False}],
                                      'cartesian': False,
                                      'deprecated': False,
                                      'description': 'Gets indicators from the '
                                                     'feed.',
                                      'execution': False,
                                      'hidden': False,
                                      'important': None,
                                      'name': 'cyberint-get-indicators',
                                      'outputs': [{'content_path': '',
                                                   'context_path': 'Cyberint.value',
                                                   'description': 'The '
                                                                  'indicator '
                                                                  'value.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.type',
                                                   'description': 'The '
                                                                  'indicator '
                                                                  'type.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.Tags',
                                                   'description': 'Tags that '
                                                                  'are '
                                                                  'associated '
                                                                  'with the '
                                                                  'indicator.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.description',
                                                   'description': 'The feed '
                                                                  'description.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.detected_activity',
                                                   'description': 'The feed '
                                                                  'detected '
                                                                  'activity.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.observation_date',
                                                   'description': 'The feed '
                                                                  'observation '
                                                                  'date.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.severity_score',
                                                   'description': 'The feed '
                                                                  'severity '
                                                                  'score.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.confidence',
                                                   'description': 'The feed '
                                                                  'confidence.',
                                                   'type': 'String'}],
                                      'permitted': False,
                                      'sensitive': False,
                                      'timeout': 0}],
                        'docker_image': 'demisto/btfl-soup:1.0.1.45563',
                        'feed': True,
                        'is_fetch': False,
                        'is_fetch_credentials': False,
                        'long_running': False,
                        'long_running_port_mapping': False,
                        'run_once': False,
                        'script': "register_module_line('Cyberint Feed', "
                                  "'start', __line__())\n"
                                  '### pack version: 1.1.3\n'
                                  'import re\n'
                                  'from typing import Any, Callable, Dict, '
                                  'List, Optional, Tuple\n'
                                  '\n'
                                  '\n'
                                  'import urllib3\n'
                                  'from bs4 import BeautifulSoup\n'
                                  '\n'
                                  '\n'
                                  '# disable insecure warnings\n'
                                  'urllib3.disable_warnings()\n'
                                  '\n'
                                  'INTEGRATION_NAME = "Microsoft Intune Feed"\n'
                                  '\n'
                                  '\n'
                                  'class Client(BaseClient):\n'
                                  '    """\n'
                                  '    Client to use in the Microsoft Intune '
                                  'Feed integration. Overrides BaseClient.\n'
                                  '    """\n'
                                  '\n'
                                  '    def __init__(\n'
                                  '        self,\n'
                                  '        base_url: str,\n'
                                  '        access_token: str,\n'
                                  '        verify: bool = False,\n'
                                  '        proxy: bool = False,\n'
                                  '    ):\n'
                                  '        self._cookies = {"access_token": '
                                  'access_token}\n'
                                  '        super().__init__(base_url, '
                                  'verify=verify, proxy=proxy)\n'
                                  '\n'
                                  '    def build_iterator(self, date_time: str '
                                  '= None) -> List:\n'
                                  '        """Retrieves all entries from the '
                                  'feed.\n'
                                  '\n'
                                  '        Returns:\n'
                                  '            A list of objects, containing '
                                  'the indicators.\n'
                                  '        """\n'
                                  '        result = []\n'
                                  '\n'
                                  '        date_time = "2023-11-23"\n'
                                  '        response = self._http_request(\n'
                                  '            method="GET",\n'
                                  '            url_suffix=date_time,\n'
                                  '            cookies=self._cookies,\n'
                                  '            resp_type="text",\n'
                                  '            timeout=70,\n'
                                  '        )\n'
                                  '        feeds = '
                                  'response.strip().split("\\n")\n'
                                  '        ioc_feeds = [json.loads(feed) for '
                                  'feed in feeds]\n'
                                  '\n'
                                  '        for indicator in ioc_feeds:\n'
                                  '            indicator_value = '
                                  'indicator["ioc_value"]\n'
                                  '            if indicator_type := '
                                  'auto_detect_indicator_type(indicator_value):\n'
                                  '                result.append(\n'
                                  '                    {\n'
                                  '                        "value": '
                                  'indicator_value,\n'
                                  '                        "type": '
                                  'indicator_type,\n'
                                  '                        "FeedURL": '
                                  'self._base_url,\n'
                                  '                        "rawJSON": '
                                  'indicator,\n'
                                  '                    }\n'
                                  '                )\n'
                                  '\n'
                                  '        return result\n'
                                  '\n'
                                  '\n'
                                  'def test_module(client: Client, *_) -> '
                                  'Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Builds the iterator to check that '
                                  'the feed is accessible.\n'
                                  '    Args:\n'
                                  '        client: Client object.\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    client.build_iterator()\n'
                                  '    return "ok"\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators(\n'
                                  '    client: Client,\n'
                                  '    tlp_color: str,\n'
                                  '    feed_tags: List = [],\n'
                                  '    limit: int = -1,\n'
                                  ') -> List[Dict]:\n'
                                  '    """Retrieves indicators from the feed\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client (Client): Client object with '
                                  'request\n'
                                  '        feed_tags (list): tags to assign '
                                  'fetched indicators\n'
                                  '        limit (int): limit the results\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    iterator = client.build_iterator()\n'
                                  '    indicators = []\n'
                                  '    if limit > 0:\n'
                                  '        iterator = iterator[:limit]\n'
                                  '\n'
                                  '    for item in iterator:\n'
                                  '        value_ = item.get("value")\n'
                                  '        type_ = item.get("type")\n'
                                  '        raw_data = item.get("rawJSON")\n'
                                  '\n'
                                  '        indicator_obj = {\n'
                                  '            "value": value_,\n'
                                  '            "type": type_,\n'
                                  '            "service": "Cyberint",\n'
                                  '            "rawJSON": raw_data,\n'
                                  '            "fields": {\n'
                                  '                "reportedby": "Cyberint",\n'
                                  '                "Description": '
                                  'item.get("description"),\n'
                                  '                "FirstSeenBySource": '
                                  'item.get("observation_date"),\n'
                                  '            },\n'
                                  '        }\n'
                                  '\n'
                                  '        if feed_tags:\n'
                                  '            indicator_obj["fields"]["tags"] '
                                  '= feed_tags\n'
                                  '\n'
                                  '        if tlp_color:\n'
                                  '            '
                                  'indicator_obj["fields"]["trafficlightprotocol"] '
                                  '= tlp_color\n'
                                  '\n'
                                  '        indicators.append(indicator_obj)\n'
                                  '\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def get_indicators_command(client: Client, '
                                  'params: Dict[str, str], args: Dict[str, '
                                  'str]) -> CommandResults:\n'
                                  '    """Wrapper for retrieving indicators '
                                  'from the feed to the war-room.\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '        args: demisto.args()\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    limit = int(args.get("limit", "10"))\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'tlp_color, feed_tags, limit)\n'
                                  '    human_readable = tableToMarkdown(\n'
                                  '        "Indicators from Cyberint Feed:",\n'
                                  '        indicators,\n'
                                  '        headers=["value", "type"],\n'
                                  '        '
                                  'headerTransform=string_to_table_header,\n'
                                  '        removeNull=True,\n'
                                  '    )\n'
                                  '    return CommandResults(\n'
                                  '        readable_output=human_readable,\n'
                                  '        outputs_prefix="Cyberint",\n'
                                  '        outputs_key_field="value",\n'
                                  '        raw_response=indicators,\n'
                                  '        outputs=indicators,\n'
                                  '    )\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators_command(client: '
                                  'Client, params: Dict[str, str]) -> '
                                  'List[Dict]:\n'
                                  '    """Wrapper for fetching indicators from '
                                  'the feed to the Indicators tab.\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '\n'
                                  '    indicators = fetch_indicators(client, '
                                  'tlp_color, feed_tags)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def main():\n'
                                  '    """\n'
                                  '    PARSE AND VALIDATE INTEGRATION PARAMS\n'
                                  '    """\n'
                                  '    params = demisto.params()\n'
                                  '    args = demisto.args()\n'
                                  '    base_url = params.get("url")\n'
                                  '    access_token = '
                                  'params.get("access_token").get("password")\n'
                                  '    insecure = not params.get("insecure", '
                                  'False)\n'
                                  '    proxy = params.get("proxy", False)\n'
                                  '\n'
                                  '    command = demisto.command()\n'
                                  '    demisto.info(f"Command being called is '
                                  '{command}")\n'
                                  '\n'
                                  '    try:\n'
                                  '        client = Client(\n'
                                  '            base_url=base_url,\n'
                                  '            access_token=access_token,\n'
                                  '            verify=insecure,\n'
                                  '            proxy=proxy,\n'
                                  '        )\n'
                                  '\n'
                                  '        if command == "test-module":\n'
                                  '            # This is the call made when '
                                  'pressing the integration Test button.\n'
                                  '            '
                                  'return_results(test_module(client))\n'
                                  '\n'
                                  '        elif command == '
                                  '"cyberint-get-indicators":\n'
                                  '            # This is the command that '
                                  'fetches a limited number of indicators from '
                                  'the feed source\n'
                                  '            # and displays them in the war '
                                  'room.\n'
                                  '            '
                                  'return_results(get_indicators_command(client, '
                                  'params, args))\n'
                                  '\n'
                                  '        elif command == '
                                  '"fetch-indicators":\n'
                                  '            # This is the command that '
                                  'initiates a request to the feed endpoint '
                                  'and create new indicators objects from\n'
                                  '            # the data fetched. If the '
                                  'integration instance is configured to fetch '
                                  'indicators, then this is the command\n'
                                  '            # that will be executed at the '
                                  'specified feed fetch interval.\n'
                                  '            indicators = '
                                  'fetch_indicators_command(client, params)\n'
                                  '            for iter_ in batch(indicators, '
                                  'batch_size=2000):\n'
                                  '                '
                                  'demisto.createIndicators(iter_)\n'
                                  '\n'
                                  '        else:\n'
                                  '            raise '
                                  'NotImplementedError(f"Command {command} is '
                                  'not implemented.")\n'
                                  '\n'
                                  '    # Log exceptions and return errors\n'
                                  '    except Exception as e:\n'
                                  '        return_error(f"Failed to execute '
                                  '{command} command.\\nError:\\n{str(e)}")\n'
                                  '\n'
                                  '\n'
                                  'if __name__ in ["__main__", "builtin", '
                                  '"builtins"]:\n'
                                  '    main()\n'
                                  '\n'
                                  "register_module_line('Cyberint Feed', "
                                  "'end', __line__())\n",
                        'subtype': 'python3',
                        'type': 'python'},
 'is_password_protected': None,
 'locked': None,
 'modified': datetime.datetime(2023, 12, 27, 9, 58, 52, 867347, tzinfo=tzoffset(None, 7200)),
 'name': 'Cyberint Feed',
 'path': None,
 'prev_name': 'Cyberint Feed',
 'propagation_labels': ['all'],
 'readonly': None,
 'script_not_visible': None,
 'should_commit': False,
 'sort_values': None,
 'source_module_id': None,
 'system': None,
 'vc_should_ignore': False,
 'version': 4}
[2023-12-27T09:59:31] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-12-27T09:59:31] - [MainThread] - [DEBUG] - uploader.py:295 - Uploaded Integration integration-FeedCyberint.yml successfully
[2023-12-27T09:59:31] - [MainThread] - [INFO] - uploader.py:397 - UPLOAD SUMMARY:

[2023-12-27T09:59:31] - [MainThread] - [INFO] - uploader.py:430 - SUCCESSFUL UPLOADS:
╒══════════════════╤═════════════╤═════════════╤════════════════╕
│ NAME             │ TYPE        │ PACK NAME   │ PACK VERSION   │
╞══════════════════╪═════════════╪═════════════╪════════════════╡
│ FeedCyberint.yml │ Integration │             │                │
╘══════════════════╧═════════════╧═════════════╧════════════════╛

[2023-12-27T10:43:46] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-27T10:43:46] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-27T10:43:46] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-27T10:43:46] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2023-12-27T10:43:46] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): pypi.org:443
[2023-12-27T10:43:47] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 43312
[2023-12-27T10:43:47] - [MainThread] - [INFO] - __main__.py:231 - You are using demisto-sdk 1.25.0.
[2023-12-27T10:43:47] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2023-12-27T10:43:47] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2023-12-27T10:43:47] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2023-12-27T10:43:47] - [MainThread] - [DEBUG] - tools.py:3836 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2023-12-27T10:43:47] - [MainThread] - [INFO] - uploader.py:211 - Uploading /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml to https://192.168.30.206...
[2023-12-27T10:43:47] - [MainThread] - [DEBUG] - base_content.py:240 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-27T10:43:47] - [MainThread] - [DEBUG] - content_item.py:104 - Parsing content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-27T10:43:47] - [MainThread] - [DEBUG] - content_item.py:144 - Parsed Integration:Cyberint Feed
[2023-12-27T10:43:47] - [MainThread] - [DEBUG] - base_content.py:286 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml as <class 'demisto_sdk.commands.content_graph.objects.integration.Integration'>
[2023-12-27T10:43:47] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-12-27T10:43:47] - [MainThread] - [DEBUG] - content_item.py:232 - preparing /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-27T10:43:47] - [MainThread] - [DEBUG] - integration_script_unifier.py:76 - Unifying /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2023-12-27T10:43:47] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2023-12-27T10:43:47] - [MainThread] - [WARNING] - integration_script_unifier.py:207 - Failed getting image data for '/home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint'.
[2023-12-27T10:43:47] - [MainThread] - [INFO] - integration_script_unifier.py:650 - Did not find README in /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint, not adding integration doc link
[2023-12-27T10:43:47] - [MainThread] - [DEBUG] - integration_script_unifier.py:132 - Created unified yml: FeedCyberint.yml
[2023-12-27T10:43:47] - [MainThread] - [DEBUG] - integration_script.py:76 - The docker_native_image_config.json file could not be found.
[2023-12-27T10:43:47] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-12-27T10:43:47] - [MainThread] - [DEBUG] - tools.py:39 - got the following response when uploading Integration /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml: {'beta': None,
 'brand': '',
 'can_get_samples': True,
 'category': 'Data Enrichment & Threat Intelligence',
 'cmdline': None,
 'commit_message': '',
 'configuration': [{'default_value': 'https://qmasters-integration.cyberint.io/ioc/api/v1/feed/daily/',
                    'display': 'The Cyberint IOC feed endpoint URL',
                    'hidden': False,
                    'info': '',
                    'name': 'url',
                    'options': None,
                    'required': True,
                    'type': 0},
                   {'default_value': '',
                    'display': 'API Key (Leave empty. Fill in the API Key in '
                               'the password field.)',
                    'hidden': False,
                    'info': '',
                    'name': 'access_token',
                    'options': None,
                    'required': True,
                    'type': 9},
                   {'default_value': 'true',
                    'display': 'Fetch indicators',
                    'hidden': False,
                    'info': '',
                    'name': 'feed',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': 'Good',
                    'display': 'Indicator Reputation',
                    'hidden': False,
                    'info': 'Indicators from this integration instance will be '
                            'marked with this reputation',
                    'name': 'feedReputation',
                    'options': ['None', 'Good', 'Suspicious', 'Bad'],
                    'required': False,
                    'type': 18},
                   {'default_value': 'F - Reliability cannot be judged',
                    'display': 'Source Reliability',
                    'hidden': False,
                    'info': 'Reliability of the source providing the '
                            'intelligence data',
                    'name': 'feedReliability',
                    'options': ['A - Completely reliable',
                                'B - Usually reliable',
                                'C - Fairly reliable',
                                'D - Not usually reliable',
                                'E - Unreliable',
                                'F - Reliability cannot be judged'],
                    'required': True,
                    'type': 15},
                   {'default_value': '',
                    'display': 'Traffic Light Protocol Color',
                    'hidden': False,
                    'info': 'The Traffic Light Protocol (TLP) designation to '
                            'apply to indicators fetched from the feed',
                    'name': 'tlp_color',
                    'options': ['RED', 'AMBER', 'GREEN', 'WHITE'],
                    'required': False,
                    'type': 15},
                   {'default_value': 'suddenDeath',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationPolicy',
                    'options': ['never',
                                'interval',
                                'indicatorType',
                                'suddenDeath'],
                    'required': False,
                    'type': 17},
                   {'default_value': '20160',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationInterval',
                    'options': None,
                    'required': False,
                    'type': 1},
                   {'default_value': '30',
                    'display': 'Feed Fetch Interval',
                    'hidden': False,
                    'info': '',
                    'name': 'feedFetchInterval',
                    'options': None,
                    'required': False,
                    'type': 19},
                   {'default_value': '',
                    'display': 'Tags',
                    'hidden': False,
                    'info': 'Supports CSV values.',
                    'name': 'feedTags',
                    'options': None,
                    'required': False,
                    'type': 0},
                   {'default_value': 'true',
                    'display': 'Bypass exclusion list',
                    'hidden': False,
                    'info': 'When selected, the exclusion list is ignored for '
                            'indicators from this feed. This means that if an '
                            'indicator from this feed is on the exclusion '
                            'list, the indicator might still be added to the '
                            'system.',
                    'name': 'feedBypassExclusionList',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Trust any certificate (not secure)',
                    'hidden': False,
                    'info': '',
                    'name': 'insecure',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Use system proxy settings',
                    'hidden': False,
                    'info': '',
                    'name': 'proxy',
                    'options': None,
                    'required': False,
                    'type': 8}],
 'deprecated': None,
 'description': 'Use the Cyberint Feed integration to get indicators from the '
                'feed.',
 'detailed_description': '### Partner Contributed Integration\n'
                         '#### Integration Author: Cyberint\n'
                         'Support and maintenance for this integration are '
                         'provided by the author. Please use the following '
                         'contact details:\n'
                         '- **Email**: '
                         '[support@cyberint.com](mailto:support@cyberint.com)\n'
                         '- **URL**: '
                         '[https://cyberint.com](https://cyberint.com)\n'
                         '***\n',
 'display': 'Cyberint Feed (Partner Contribution)',
 'executable': None,
 'hidden': False,
 'hide_engines': None,
 'icon': '',
 'id': 'Cyberint Feed',
 'image': None,
 'integration_script': {'commands': [{'arguments': [{'auto': None,
                                                     'default': False,
                                                     'default_value': '10',
                                                     'deprecated': False,
                                                     'description': 'The '
                                                                    'maximum '
                                                                    'number of '
                                                                    'results '
                                                                    'to '
                                                                    'return. '
                                                                    'The '
                                                                    'default '
                                                                    'value is '
                                                                    '10.',
                                                     'is_array': None,
                                                     'name': 'limit',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False}],
                                      'cartesian': False,
                                      'deprecated': False,
                                      'description': 'Gets indicators from the '
                                                     'feed.',
                                      'execution': False,
                                      'hidden': False,
                                      'important': None,
                                      'name': 'cyberint-get-indicators',
                                      'outputs': [{'content_path': '',
                                                   'context_path': 'Cyberint.value',
                                                   'description': 'The '
                                                                  'indicator '
                                                                  'value.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.type',
                                                   'description': 'The '
                                                                  'indicator '
                                                                  'type.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.Tags',
                                                   'description': 'Tags that '
                                                                  'are '
                                                                  'associated '
                                                                  'with the '
                                                                  'indicator.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.description',
                                                   'description': 'The feed '
                                                                  'description.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.detected_activity',
                                                   'description': 'The feed '
                                                                  'detected '
                                                                  'activity.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.observation_date',
                                                   'description': 'The feed '
                                                                  'observation '
                                                                  'date.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.severity_score',
                                                   'description': 'The feed '
                                                                  'severity '
                                                                  'score.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.confidence',
                                                   'description': 'The feed '
                                                                  'confidence.',
                                                   'type': 'String'}],
                                      'permitted': False,
                                      'sensitive': False,
                                      'timeout': 0}],
                        'docker_image': 'demisto/btfl-soup:1.0.1.45563',
                        'feed': True,
                        'is_fetch': False,
                        'is_fetch_credentials': False,
                        'long_running': False,
                        'long_running_port_mapping': False,
                        'run_once': False,
                        'script': "register_module_line('Cyberint Feed', "
                                  "'start', __line__())\n"
                                  '### pack version: 1.1.3\n'
                                  'import re\n'
                                  'from typing import Any, Callable, Dict, '
                                  'List, Optional, Tuple\n'
                                  '\n'
                                  '\n'
                                  'import urllib3\n'
                                  'from bs4 import BeautifulSoup\n'
                                  '\n'
                                  '\n'
                                  '# disable insecure warnings\n'
                                  'urllib3.disable_warnings()\n'
                                  '\n'
                                  'INTEGRATION_NAME = "Microsoft Intune Feed"\n'
                                  '\n'
                                  '\n'
                                  'class Client(BaseClient):\n'
                                  '    """\n'
                                  '    Client to use in the Microsoft Intune '
                                  'Feed integration. Overrides BaseClient.\n'
                                  '    """\n'
                                  '\n'
                                  '    def __init__(\n'
                                  '        self,\n'
                                  '        base_url: str,\n'
                                  '        access_token: str,\n'
                                  '        verify: bool = False,\n'
                                  '        proxy: bool = False,\n'
                                  '    ):\n'
                                  '        self._cookies = {"access_token": '
                                  'access_token}\n'
                                  '        super().__init__(base_url, '
                                  'verify=verify, proxy=proxy)\n'
                                  '\n'
                                  '    def build_iterator(self, date_time: str '
                                  '= None) -> List:\n'
                                  '        """Retrieves all entries from the '
                                  'feed.\n'
                                  '\n'
                                  '        Returns:\n'
                                  '            A list of objects, containing '
                                  'the indicators.\n'
                                  '        """\n'
                                  '        result = []\n'
                                  '\n'
                                  '        date_time = "2023-11-23"\n'
                                  '        response = self._http_request(\n'
                                  '            method="GET",\n'
                                  '            url_suffix=date_time,\n'
                                  '            cookies=self._cookies,\n'
                                  '            resp_type="text",\n'
                                  '            timeout=70,\n'
                                  '        )\n'
                                  '        feeds = '
                                  'response.strip().split("\\n")\n'
                                  '        ioc_feeds = [json.loads(feed) for '
                                  'feed in feeds]\n'
                                  '\n'
                                  '        for indicator in ioc_feeds:\n'
                                  '            indicator_value = '
                                  'indicator["ioc_value"]\n'
                                  '            if indicator_type := '
                                  'auto_detect_indicator_type(indicator_value):\n'
                                  '                result.append(\n'
                                  '                    {\n'
                                  '                        "value": '
                                  'indicator_value,\n'
                                  '                        "type": '
                                  'indicator_type,\n'
                                  '                        "FeedURL": '
                                  'self._base_url,\n'
                                  '                        "rawJSON": '
                                  'indicator,\n'
                                  '                    }\n'
                                  '                )\n'
                                  '\n'
                                  '        return result\n'
                                  '\n'
                                  '\n'
                                  'def test_module(client: Client, *_) -> '
                                  'Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Builds the iterator to check that '
                                  'the feed is accessible.\n'
                                  '    Args:\n'
                                  '        client: Client object.\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    client.build_iterator()\n'
                                  '    return "ok"\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators(\n'
                                  '    client: Client,\n'
                                  '    tlp_color: str,\n'
                                  '    feed_tags: List = [],\n'
                                  '    limit: int = -1,\n'
                                  ') -> List[Dict]:\n'
                                  '    """Retrieves indicators from the feed\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client (Client): Client object with '
                                  'request\n'
                                  '        feed_tags (list): tags to assign '
                                  'fetched indicators\n'
                                  '        limit (int): limit the results\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    iterator = client.build_iterator()\n'
                                  '    indicators = []\n'
                                  '    if limit > 0:\n'
                                  '        iterator = iterator[:limit]\n'
                                  '\n'
                                  '    for item in iterator:\n'
                                  '        value_ = item.get("value")\n'
                                  '        type_ = item.get("type")\n'
                                  '        raw_data = item.get("rawJSON")\n'
                                  '\n'
                                  '        indicator_obj = {\n'
                                  '            "value": value_,\n'
                                  '            "type": type_,\n'
                                  '            "service": "Cyberint",\n'
                                  '            "rawJSON": raw_data,\n'
                                  '            "fields": {\n'
                                  '                "reportedby": "Cyberint",\n'
                                  '                "Description": '
                                  'raw_data.get("description"),\n'
                                  '                "FirstSeenBySource": '
                                  'raw_data.get("observation_date"),\n'
                                  '            },\n'
                                  '        }\n'
                                  '\n'
                                  '        if feed_tags:\n'
                                  '            indicator_obj["fields"]["tags"] '
                                  '= feed_tags\n'
                                  '\n'
                                  '        if tlp_color:\n'
                                  '            '
                                  'indicator_obj["fields"]["trafficlightprotocol"] '
                                  '= tlp_color\n'
                                  '\n'
                                  '        indicators.append(indicator_obj)\n'
                                  '\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def get_indicators_command(client: Client, '
                                  'params: Dict[str, str], args: Dict[str, '
                                  'str]) -> CommandResults:\n'
                                  '    """Wrapper for retrieving indicators '
                                  'from the feed to the war-room.\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '        args: demisto.args()\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    limit = int(args.get("limit", "10"))\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    indicators = fetch_indicators(client, '
                                  'tlp_color, feed_tags, limit)\n'
                                  '    human_readable = tableToMarkdown(\n'
                                  '        "Indicators from Cyberint Feed:",\n'
                                  '        indicators,\n'
                                  '        headers=["value", "type"],\n'
                                  '        '
                                  'headerTransform=string_to_table_header,\n'
                                  '        removeNull=True,\n'
                                  '    )\n'
                                  '    return CommandResults(\n'
                                  '        readable_output=human_readable,\n'
                                  '        outputs_prefix="Cyberint",\n'
                                  '        outputs_key_field="value",\n'
                                  '        raw_response=indicators,\n'
                                  '        outputs=indicators,\n'
                                  '    )\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators_command(client: '
                                  'Client, params: Dict[str, str]) -> '
                                  'List[Dict]:\n'
                                  '    """Wrapper for fetching indicators from '
                                  'the feed to the Indicators tab.\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '\n'
                                  '    indicators = fetch_indicators(client, '
                                  'tlp_color, feed_tags)\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def main():\n'
                                  '    """\n'
                                  '    PARSE AND VALIDATE INTEGRATION PARAMS\n'
                                  '    """\n'
                                  '    params = demisto.params()\n'
                                  '    args = demisto.args()\n'
                                  '    base_url = params.get("url")\n'
                                  '    access_token = '
                                  'params.get("access_token").get("password")\n'
                                  '    insecure = not params.get("insecure", '
                                  'False)\n'
                                  '    proxy = params.get("proxy", False)\n'
                                  '\n'
                                  '    command = demisto.command()\n'
                                  '    demisto.info(f"Command being called is '
                                  '{command}")\n'
                                  '\n'
                                  '    try:\n'
                                  '        client = Client(\n'
                                  '            base_url=base_url,\n'
                                  '            access_token=access_token,\n'
                                  '            verify=insecure,\n'
                                  '            proxy=proxy,\n'
                                  '        )\n'
                                  '\n'
                                  '        if command == "test-module":\n'
                                  '            # This is the call made when '
                                  'pressing the integration Test button.\n'
                                  '            '
                                  'return_results(test_module(client))\n'
                                  '\n'
                                  '        elif command == '
                                  '"cyberint-get-indicators":\n'
                                  '            # This is the command that '
                                  'fetches a limited number of indicators from '
                                  'the feed source\n'
                                  '            # and displays them in the war '
                                  'room.\n'
                                  '            '
                                  'return_results(get_indicators_command(client, '
                                  'params, args))\n'
                                  '\n'
                                  '        elif command == '
                                  '"fetch-indicators":\n'
                                  '            # This is the command that '
                                  'initiates a request to the feed endpoint '
                                  'and create new indicators objects from\n'
                                  '            # the data fetched. If the '
                                  'integration instance is configured to fetch '
                                  'indicators, then this is the command\n'
                                  '            # that will be executed at the '
                                  'specified feed fetch interval.\n'
                                  '            indicators = '
                                  'fetch_indicators_command(client, params)\n'
                                  '            for iter_ in batch(indicators, '
                                  'batch_size=2000):\n'
                                  '                '
                                  'demisto.createIndicators(iter_)\n'
                                  '\n'
                                  '        else:\n'
                                  '            raise '
                                  'NotImplementedError(f"Command {command} is '
                                  'not implemented.")\n'
                                  '\n'
                                  '    # Log exceptions and return errors\n'
                                  '    except Exception as e:\n'
                                  '        return_error(f"Failed to execute '
                                  '{command} command.\\nError:\\n{str(e)}")\n'
                                  '\n'
                                  '\n'
                                  'if __name__ in ["__main__", "builtin", '
                                  '"builtins"]:\n'
                                  '    main()\n'
                                  '\n'
                                  "register_module_line('Cyberint Feed', "
                                  "'end', __line__())\n",
                        'subtype': 'python3',
                        'type': 'python'},
 'is_password_protected': None,
 'locked': None,
 'modified': datetime.datetime(2023, 12, 27, 10, 43, 9, 412732, tzinfo=tzoffset(None, 7200)),
 'name': 'Cyberint Feed',
 'path': None,
 'prev_name': 'Cyberint Feed',
 'propagation_labels': ['all'],
 'readonly': None,
 'script_not_visible': None,
 'should_commit': False,
 'sort_values': None,
 'source_module_id': None,
 'system': None,
 'vc_should_ignore': False,
 'version': 5}
[2023-12-27T10:43:47] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2023-12-27T10:43:47] - [MainThread] - [DEBUG] - uploader.py:295 - Uploaded Integration integration-FeedCyberint.yml successfully
[2023-12-27T10:43:47] - [MainThread] - [INFO] - uploader.py:397 - UPLOAD SUMMARY:

[2023-12-27T10:43:47] - [MainThread] - [INFO] - uploader.py:430 - SUCCESSFUL UPLOADS:
╒══════════════════╤═════════════╤═════════════╤════════════════╕
│ NAME             │ TYPE        │ PACK NAME   │ PACK VERSION   │
╞══════════════════╪═════════════╪═════════════╪════════════════╡
│ FeedCyberint.yml │ Integration │             │                │
╘══════════════════╧═════════════╧═════════════╧════════════════╛

[2024-01-03T11:42:31] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2024-01-03T11:42:31] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2024-01-03T11:42:31] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2024-01-03T11:42:31] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2024-01-03T11:42:31] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): pypi.org:443
[2024-01-03T11:42:31] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 43609
[2024-01-03T11:42:32] - [MainThread] - [INFO] - __main__.py:231 - You are using demisto-sdk 1.25.0.
[2024-01-03T11:42:32] - [MainThread] - [INFO] - __main__.py:233 - however version 1.25.1 is available.
To update, run pip3 install --upgrade demisto-sdk
[2024-01-03T11:42:32] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2024-01-03T11:42:32] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2024-01-03T11:42:32] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2024-01-03T11:42:32] - [MainThread] - [DEBUG] - tools.py:3836 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2024-01-03T11:42:50] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2024-01-03T11:42:50] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2024-01-03T11:42:50] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2024-01-03T11:42:50] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2024-01-03T11:42:50] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): pypi.org:443
[2024-01-03T11:42:50] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 43609
[2024-01-03T11:42:50] - [MainThread] - [INFO] - __main__.py:231 - You are using demisto-sdk 1.25.0.
[2024-01-03T11:42:50] - [MainThread] - [INFO] - __main__.py:233 - however version 1.25.1 is available.
To update, run pip3 install --upgrade demisto-sdk
[2024-01-03T11:42:50] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2024-01-03T11:42:50] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2024-01-03T11:42:50] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2024-01-03T11:42:50] - [MainThread] - [DEBUG] - tools.py:3836 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2024-01-03T11:42:50] - [MainThread] - [INFO] - uploader.py:211 - Uploading /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml to https://192.168.30.206...
[2024-01-03T11:42:50] - [MainThread] - [DEBUG] - base_content.py:240 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2024-01-03T11:42:50] - [MainThread] - [DEBUG] - content_item.py:104 - Parsing content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2024-01-03T11:42:50] - [MainThread] - [DEBUG] - content_item.py:144 - Parsed Integration:Cyberint Feed
[2024-01-03T11:42:50] - [MainThread] - [DEBUG] - base_content.py:286 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml as <class 'demisto_sdk.commands.content_graph.objects.integration.Integration'>
[2024-01-03T11:42:50] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2024-01-03T11:42:50] - [MainThread] - [DEBUG] - content_item.py:232 - preparing /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2024-01-03T11:42:50] - [MainThread] - [DEBUG] - integration_script_unifier.py:76 - Unifying /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2024-01-03T11:42:50] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2024-01-03T11:42:51] - [MainThread] - [WARNING] - integration_script_unifier.py:207 - Failed getting image data for '/home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint'.
[2024-01-03T11:42:51] - [MainThread] - [INFO] - integration_script_unifier.py:650 - Did not find README in /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint, not adding integration doc link
[2024-01-03T11:42:51] - [MainThread] - [DEBUG] - integration_script_unifier.py:132 - Created unified yml: FeedCyberint.yml
[2024-01-03T11:42:51] - [MainThread] - [DEBUG] - integration_script.py:76 - The docker_native_image_config.json file could not be found.
[2024-01-03T11:42:51] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2024-01-03T11:42:51] - [MainThread] - [DEBUG] - tools.py:39 - got the following response when uploading Integration /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml: {'beta': None,
 'brand': '',
 'can_get_samples': True,
 'category': 'Data Enrichment & Threat Intelligence',
 'cmdline': None,
 'commit_message': '',
 'configuration': [{'default_value': 'https://qmasters-integration.cyberint.io/ioc/api/v1/feed/daily/',
                    'display': 'The Cyberint IOC feed endpoint URL',
                    'hidden': False,
                    'info': '',
                    'name': 'url',
                    'options': None,
                    'required': True,
                    'type': 0},
                   {'default_value': '',
                    'display': 'API Key (Leave empty. Fill in the API Key in '
                               'the password field.)',
                    'hidden': False,
                    'info': '',
                    'name': 'access_token',
                    'options': None,
                    'required': True,
                    'type': 9},
                   {'default_value': 'true',
                    'display': 'Fetch indicators',
                    'hidden': False,
                    'info': '',
                    'name': 'feed',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': 'Good',
                    'display': 'Indicator Reputation',
                    'hidden': False,
                    'info': 'Indicators from this integration instance will be '
                            'marked with this reputation',
                    'name': 'feedReputation',
                    'options': ['None', 'Good', 'Suspicious', 'Bad'],
                    'required': False,
                    'type': 18},
                   {'default_value': 'F - Reliability cannot be judged',
                    'display': 'Source Reliability',
                    'hidden': False,
                    'info': 'Reliability of the source providing the '
                            'intelligence data',
                    'name': 'feedReliability',
                    'options': ['A - Completely reliable',
                                'B - Usually reliable',
                                'C - Fairly reliable',
                                'D - Not usually reliable',
                                'E - Unreliable',
                                'F - Reliability cannot be judged'],
                    'required': True,
                    'type': 15},
                   {'default_value': '',
                    'display': 'Traffic Light Protocol Color',
                    'hidden': False,
                    'info': 'The Traffic Light Protocol (TLP) designation to '
                            'apply to indicators fetched from the feed',
                    'name': 'tlp_color',
                    'options': ['RED', 'AMBER', 'GREEN', 'WHITE'],
                    'required': False,
                    'type': 15},
                   {'default_value': 'All',
                    'display': 'Indicator Type',
                    'hidden': False,
                    'info': 'Which indicator types to fetch',
                    'name': 'indicator_type',
                    'options': ['All', 'IP', 'Domain', 'URL', 'File'],
                    'required': True,
                    'type': 16},
                   {'default_value': 'All',
                    'display': 'Feed Name',
                    'hidden': False,
                    'info': '',
                    'name': 'feed_name',
                    'options': ['All',
                                'malware_payload',
                                'cnc_server',
                                'infected_machine',
                                'phishing_website',
                                'payload_delivery',
                                'cc_skimming',
                                'botnet',
                                'anonymization'],
                    'required': True,
                    'type': 16},
                   {'default_value': '',
                    'display': 'Confidence',
                    'hidden': False,
                    'info': 'Confidence about the indicator details. The value '
                            'of confidence to fetch indicators from. The value '
                            'between 0-100',
                    'name': 'confidence_from',
                    'options': None,
                    'required': False,
                    'type': 0},
                   {'default_value': '',
                    'display': 'First fetch',
                    'hidden': False,
                    'info': 'The date or number of days from when to start '
                            'fetching indicators.',
                    'name': 'first_fetch',
                    'options': None,
                    'required': False,
                    'type': 0},
                   {'default_value': 'suddenDeath',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationPolicy',
                    'options': ['never',
                                'interval',
                                'indicatorType',
                                'suddenDeath'],
                    'required': False,
                    'type': 17},
                   {'default_value': '20160',
                    'display': '',
                    'hidden': False,
                    'info': '',
                    'name': 'feedExpirationInterval',
                    'options': None,
                    'required': False,
                    'type': 1},
                   {'default_value': '30',
                    'display': 'Feed Fetch Interval',
                    'hidden': False,
                    'info': '',
                    'name': 'feedFetchInterval',
                    'options': None,
                    'required': False,
                    'type': 19},
                   {'default_value': '',
                    'display': 'Tags',
                    'hidden': False,
                    'info': 'Supports CSV values.',
                    'name': 'feedTags',
                    'options': None,
                    'required': False,
                    'type': 0},
                   {'default_value': 'true',
                    'display': 'Bypass exclusion list',
                    'hidden': False,
                    'info': 'When selected, the exclusion list is ignored for '
                            'indicators from this feed. This means that if an '
                            'indicator from this feed is on the exclusion '
                            'list, the indicator might still be added to the '
                            'system.',
                    'name': 'feedBypassExclusionList',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Trust any certificate (not secure)',
                    'hidden': False,
                    'info': '',
                    'name': 'insecure',
                    'options': None,
                    'required': False,
                    'type': 8},
                   {'default_value': '',
                    'display': 'Use system proxy settings',
                    'hidden': False,
                    'info': '',
                    'name': 'proxy',
                    'options': None,
                    'required': False,
                    'type': 8}],
 'deprecated': None,
 'description': 'Use the Cyberint Feed integration to get indicators from the '
                'feed.',
 'detailed_description': '### Partner Contributed Integration\n'
                         '#### Integration Author: Cyberint\n'
                         'Support and maintenance for this integration are '
                         'provided by the author. Please use the following '
                         'contact details:\n'
                         '- **Email**: '
                         '[support@cyberint.com](mailto:support@cyberint.com)\n'
                         '- **URL**: '
                         '[https://cyberint.com](https://cyberint.com)\n'
                         '***\n',
 'display': 'Cyberint Feed (Partner Contribution)',
 'executable': None,
 'hidden': False,
 'hide_engines': None,
 'icon': '',
 'id': 'Cyberint Feed',
 'image': None,
 'integration_script': {'commands': [{'arguments': [{'auto': None,
                                                     'default': False,
                                                     'default_value': '10',
                                                     'deprecated': False,
                                                     'description': 'The '
                                                                    'maximum '
                                                                    'number of '
                                                                    'results '
                                                                    'to '
                                                                    'return. '
                                                                    'The '
                                                                    'default '
                                                                    'value is '
                                                                    '10.',
                                                     'is_array': None,
                                                     'name': 'limit',
                                                     'predefined': None,
                                                     'required': False,
                                                     'secret': False}],
                                      'cartesian': False,
                                      'deprecated': False,
                                      'description': 'Gets indicators from the '
                                                     'feed.',
                                      'execution': False,
                                      'hidden': False,
                                      'important': None,
                                      'name': 'cyberint-get-indicators',
                                      'outputs': [{'content_path': '',
                                                   'context_path': 'Cyberint.value',
                                                   'description': 'The '
                                                                  'indicator '
                                                                  'value.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.type',
                                                   'description': 'The '
                                                                  'indicator '
                                                                  'type.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.Tags',
                                                   'description': 'Tags that '
                                                                  'are '
                                                                  'associated '
                                                                  'with the '
                                                                  'indicator.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.description',
                                                   'description': 'The feed '
                                                                  'description.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.detected_activity',
                                                   'description': 'The feed '
                                                                  'detected '
                                                                  'activity.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.observation_date',
                                                   'description': 'The feed '
                                                                  'observation '
                                                                  'date.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.severity_score',
                                                   'description': 'The feed '
                                                                  'severity '
                                                                  'score.',
                                                   'type': 'String'},
                                                  {'content_path': '',
                                                   'context_path': 'Cyberint.confidence',
                                                   'description': 'The feed '
                                                                  'confidence.',
                                                   'type': 'String'}],
                                      'permitted': False,
                                      'sensitive': False,
                                      'timeout': 0}],
                        'docker_image': 'demisto/btfl-soup:1.0.1.45563',
                        'feed': True,
                        'is_fetch': False,
                        'is_fetch_credentials': False,
                        'long_running': False,
                        'long_running_port_mapping': False,
                        'run_once': False,
                        'script': "register_module_line('Cyberint Feed', "
                                  "'start', __line__())\n"
                                  '### pack version: 1.1.3\n'
                                  'import re\n'
                                  'from typing import Any, Callable, Dict, '
                                  'List, Optional, Tuple\n'
                                  '\n'
                                  '\n'
                                  'import urllib3\n'
                                  'from bs4 import BeautifulSoup\n'
                                  '\n'
                                  '\n'
                                  '# disable insecure warnings\n'
                                  'urllib3.disable_warnings()\n'
                                  '\n'
                                  'INTEGRATION_NAME = "Microsoft Intune Feed"\n'
                                  '\n'
                                  '\n'
                                  'class Client(BaseClient):\n'
                                  '    """\n'
                                  '    Client to use in the Microsoft Intune '
                                  'Feed integration. Overrides BaseClient.\n'
                                  '    """\n'
                                  '\n'
                                  '    def __init__(\n'
                                  '        self,\n'
                                  '        base_url: str,\n'
                                  '        access_token: str,\n'
                                  '        verify: bool = False,\n'
                                  '        proxy: bool = False,\n'
                                  '    ):\n'
                                  '        self._cookies = {"access_token": '
                                  'access_token}\n'
                                  '        super().__init__(base_url, '
                                  'verify=verify, proxy=proxy)\n'
                                  '\n'
                                  '    def build_iterator(self, date_time: str '
                                  '= None) -> List:\n'
                                  '        """Retrieves all entries from the '
                                  'feed.\n'
                                  '\n'
                                  '        Returns:\n'
                                  '            A list of objects, containing '
                                  'the indicators.\n'
                                  '        """\n'
                                  '        result = []\n'
                                  '\n'
                                  '        date_time = "2023-11-23"\n'
                                  '        response = self._http_request(\n'
                                  '            method="GET",\n'
                                  '            url_suffix=date_time,\n'
                                  '            cookies=self._cookies,\n'
                                  '            resp_type="text",\n'
                                  '            timeout=70,\n'
                                  '        )\n'
                                  '        feeds = '
                                  'response.strip().split("\\n")\n'
                                  '        ioc_feeds = [json.loads(feed) for '
                                  'feed in feeds]\n'
                                  '\n'
                                  '        for indicator in ioc_feeds:\n'
                                  '            indicator_value = '
                                  'indicator["ioc_value"]\n'
                                  '            if indicator_type := '
                                  'auto_detect_indicator_type(indicator_value):\n'
                                  '                result.append(\n'
                                  '                    {\n'
                                  '                        "value": '
                                  'indicator_value,\n'
                                  '                        "type": '
                                  'indicator_type,\n'
                                  '                        "FeedURL": '
                                  'self._base_url,\n'
                                  '                        "rawJSON": '
                                  'indicator,\n'
                                  '                    }\n'
                                  '                )\n'
                                  '\n'
                                  '        return result\n'
                                  '\n'
                                  '\n'
                                  'def test_module(client: Client, *_) -> '
                                  'Tuple[str, Dict[Any, Any], Dict[Any, '
                                  'Any]]:\n'
                                  '    """Builds the iterator to check that '
                                  'the feed is accessible.\n'
                                  '    Args:\n'
                                  '        client: Client object.\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    client.build_iterator()\n'
                                  '    return "ok"\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators(\n'
                                  '    client: Client,\n'
                                  '    tlp_color: str,\n'
                                  '    feed_names: list[str],\n'
                                  '    indicator_types: list[str],\n'
                                  '    feed_tags: List = [],\n'
                                  '    limit: int = -1,\n'
                                  ') -> List[Dict]:\n'
                                  '    """Retrieves indicators from the feed\n'
                                  '\n'
                                  '    Args:\n'
                                  '        client (Client): Client object with '
                                  'request\n'
                                  '        feed_tags (list): tags to assign '
                                  'fetched indicators\n'
                                  '        limit (int): limit the results\n'
                                  '\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    iterator = client.build_iterator()\n'
                                  '    indicators = []\n'
                                  '    if limit > 0:\n'
                                  '        iterator = iterator[:limit]\n'
                                  '\n'
                                  '    for item in iterator:\n'
                                  '        ioc_value = item.get("value")\n'
                                  '        ioc_type = item.get("type")\n'
                                  '        raw_data = item.get("rawJSON")\n'
                                  '\n'
                                  '        if (indicator_types == ["All"] or '
                                  'ioc_type in indicator_types) and (\n'
                                  '            feed_names == ["All"] or '
                                  'raw_data.get("detected_activity") in '
                                  'feed_names\n'
                                  '        ):\n'
                                  '            indicator_obj = {\n'
                                  '                "value": ioc_value,\n'
                                  '                "type": ioc_type,\n'
                                  '                "service": "Cyberint",\n'
                                  '                "rawJSON": raw_data,\n'
                                  '                "fields": {\n'
                                  '                    "reportedby": '
                                  '"Cyberint",\n'
                                  '                    "Description": '
                                  'raw_data.get("description"),\n'
                                  '                    "FirstSeenBySource": '
                                  'raw_data.get("observation_date"),\n'
                                  '                },\n'
                                  '            }\n'
                                  '\n'
                                  '            if feed_tags:\n'
                                  '                '
                                  'indicator_obj["fields"]["tags"] = '
                                  'feed_tags\n'
                                  '\n'
                                  '            if tlp_color:\n'
                                  '                '
                                  'indicator_obj["fields"]["trafficlightprotocol"] '
                                  '= tlp_color\n'
                                  '\n'
                                  '            '
                                  'indicators.append(indicator_obj)\n'
                                  '\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def get_indicators_command(client: Client, '
                                  'params: Dict[str, str], args: Dict[str, '
                                  'str]) -> CommandResults:\n'
                                  '    """Wrapper for retrieving indicators '
                                  'from the feed to the war-room.\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '        args: demisto.args()\n'
                                  '    Returns:\n'
                                  '        Outputs.\n'
                                  '    """\n'
                                  '    limit = int(args.get("limit", "10"))\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    feed_names = '
                                  'argToList(params.get("feed_name"))\n'
                                  '    indicator_types = '
                                  'argToList(params.get("indicator_type"))\n'
                                  '\n'
                                  '    indicators = fetch_indicators(\n'
                                  '        client=client,\n'
                                  '        tlp_color=tlp_color,\n'
                                  '        feed_tags=feed_tags,\n'
                                  '        limit=limit,\n'
                                  '        feed_names=feed_names,\n'
                                  '        indicator_types=indicator_types,\n'
                                  '    )\n'
                                  '    human_readable = tableToMarkdown(\n'
                                  '        "Indicators from Cyberint Feed:",\n'
                                  '        indicators,\n'
                                  '        headers=["value", "type"],\n'
                                  '        '
                                  'headerTransform=string_to_table_header,\n'
                                  '        removeNull=True,\n'
                                  '    )\n'
                                  '    return CommandResults(\n'
                                  '        readable_output=human_readable,\n'
                                  '        outputs_prefix="Cyberint",\n'
                                  '        outputs_key_field="value",\n'
                                  '        raw_response=indicators,\n'
                                  '        outputs=indicators,\n'
                                  '    )\n'
                                  '\n'
                                  '\n'
                                  'def fetch_indicators_command(client: '
                                  'Client, params: Dict[str, str]) -> '
                                  'List[Dict]:\n'
                                  '    """Wrapper for fetching indicators from '
                                  'the feed to the Indicators tab.\n'
                                  '    Args:\n'
                                  '        client: Client object with request\n'
                                  '        params: demisto.params()\n'
                                  '    Returns:\n'
                                  '        Indicators.\n'
                                  '    """\n'
                                  '    feed_tags = '
                                  'argToList(params.get("feedTags", ""))\n'
                                  '    tlp_color = params.get("tlp_color")\n'
                                  '    feed_names = '
                                  'argToList(params.get("feed_name"))\n'
                                  '    indicator_types = '
                                  'argToList(params.get("indicator_type"))\n'
                                  '\n'
                                  '    indicators = fetch_indicators(\n'
                                  '        client=client,\n'
                                  '        tlp_color=tlp_color,\n'
                                  '        feed_tags=feed_tags,\n'
                                  '        feed_names=feed_names,\n'
                                  '        indicator_types=indicator_types,\n'
                                  '    )\n'
                                  '    return indicators\n'
                                  '\n'
                                  '\n'
                                  'def main():\n'
                                  '    """\n'
                                  '    PARSE AND VALIDATE INTEGRATION PARAMS\n'
                                  '    """\n'
                                  '    params = demisto.params()\n'
                                  '    args = demisto.args()\n'
                                  '    base_url = params.get("url")\n'
                                  '    access_token = '
                                  'params.get("access_token").get("password")\n'
                                  '    insecure = not params.get("insecure", '
                                  'False)\n'
                                  '    proxy = params.get("proxy", False)\n'
                                  '\n'
                                  '    command = demisto.command()\n'
                                  '    demisto.info(f"Command being called is '
                                  '{command}")\n'
                                  '\n'
                                  '    try:\n'
                                  '        client = Client(\n'
                                  '            base_url=base_url,\n'
                                  '            access_token=access_token,\n'
                                  '            verify=insecure,\n'
                                  '            proxy=proxy,\n'
                                  '        )\n'
                                  '\n'
                                  '        if command == "test-module":\n'
                                  '            # This is the call made when '
                                  'pressing the integration Test button.\n'
                                  '            '
                                  'return_results(test_module(client))\n'
                                  '\n'
                                  '        elif command == '
                                  '"cyberint-get-indicators":\n'
                                  '            # This is the command that '
                                  'fetches a limited number of indicators from '
                                  'the feed source\n'
                                  '            # and displays them in the war '
                                  'room.\n'
                                  '            '
                                  'return_results(get_indicators_command(client, '
                                  'params, args))\n'
                                  '\n'
                                  '        elif command == '
                                  '"fetch-indicators":\n'
                                  '            # This is the command that '
                                  'initiates a request to the feed endpoint '
                                  'and create new indicators objects from\n'
                                  '            # the data fetched. If the '
                                  'integration instance is configured to fetch '
                                  'indicators, then this is the command\n'
                                  '            # that will be executed at the '
                                  'specified feed fetch interval.\n'
                                  '            indicators = '
                                  'fetch_indicators_command(client, params)\n'
                                  '            for iter_ in batch(indicators, '
                                  'batch_size=2000):\n'
                                  '                '
                                  'demisto.createIndicators(iter_)\n'
                                  '\n'
                                  '        else:\n'
                                  '            raise '
                                  'NotImplementedError(f"Command {command} is '
                                  'not implemented.")\n'
                                  '\n'
                                  '    # Log exceptions and return errors\n'
                                  '    except Exception as e:\n'
                                  '        return_error(f"Failed to execute '
                                  '{command} command.\\nError:\\n{str(e)}")\n'
                                  '\n'
                                  '\n'
                                  'if __name__ in ["__main__", "builtin", '
                                  '"builtins"]:\n'
                                  '    main()\n'
                                  '\n'
                                  "register_module_line('Cyberint Feed', "
                                  "'end', __line__())\n",
                        'subtype': 'python3',
                        'type': 'python'},
 'is_password_protected': None,
 'locked': None,
 'modified': datetime.datetime(2024, 1, 3, 11, 42, 40, 106369, tzinfo=tzoffset(None, 7200)),
 'name': 'Cyberint Feed',
 'path': None,
 'prev_name': 'Cyberint Feed',
 'propagation_labels': ['all'],
 'readonly': None,
 'script_not_visible': None,
 'should_commit': False,
 'sort_values': None,
 'source_module_id': None,
 'system': None,
 'vc_should_ignore': False,
 'version': 6}
[2024-01-03T11:42:51] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2024-01-03T11:42:51] - [MainThread] - [DEBUG] - uploader.py:295 - Uploaded Integration integration-FeedCyberint.yml successfully
[2024-01-03T11:42:51] - [MainThread] - [INFO] - uploader.py:397 - UPLOAD SUMMARY:

[2024-01-03T11:42:51] - [MainThread] - [INFO] - uploader.py:430 - SUCCESSFUL UPLOADS:
╒══════════════════╤═════════════╤═════════════╤════════════════╕
│ NAME             │ TYPE        │ PACK NAME   │ PACK VERSION   │
╞══════════════════╪═════════════╪═════════════╪════════════════╡
│ FeedCyberint.yml │ Integration │             │                │
╘══════════════════╧═════════════╧═════════════╧════════════════╛

[2024-01-03T11:46:21] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2024-01-03T11:46:21] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2024-01-03T11:46:21] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2024-01-03T11:46:21] - [MainThread] - [INFO] - logger.py:375 - Log file location: /home/talg/XSOAR/content-cyberint/demisto_sdk_debug.log
[2024-01-03T11:46:21] - [MainThread] - [DEBUG] - connectionpool.py:1003 - Starting new HTTPS connection (1): pypi.org:443
[2024-01-03T11:46:22] - [MainThread] - [DEBUG] - connectionpool.py:456 - https://pypi.org:443 "GET /pypi/demisto-sdk/json HTTP/1.1" 200 43609
[2024-01-03T11:46:22] - [MainThread] - [INFO] - __main__.py:231 - You are using demisto-sdk 1.25.0.
[2024-01-03T11:46:22] - [MainThread] - [INFO] - __main__.py:233 - however version 1.25.1 is available.
To update, run pip3 install --upgrade demisto-sdk
[2024-01-03T11:46:22] - [MainThread] - [DEBUG] - logger.py:367 - Python version: 3.10.9 (main, Jan 28 2023, 19:03:24) [GCC 9.4.0]
[2024-01-03T11:46:22] - [MainThread] - [DEBUG] - logger.py:368 - Working dir: /home/talg/XSOAR/content-cyberint
[2024-01-03T11:46:22] - [MainThread] - [DEBUG] - logger.py:371 - Platform: Linux
[2024-01-03T11:46:22] - [MainThread] - [DEBUG] - tools.py:3836 - neither marketplace nor is_xsiam provided, using default marketplace=XSOAR
[2024-01-03T11:46:22] - [MainThread] - [INFO] - uploader.py:211 - Uploading /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml to https://192.168.30.206...
[2024-01-03T11:46:22] - [MainThread] - [DEBUG] - base_content.py:240 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2024-01-03T11:46:22] - [MainThread] - [DEBUG] - content_item.py:104 - Parsing content item /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2024-01-03T11:46:22] - [MainThread] - [DEBUG] - content_item.py:144 - Parsed Integration:Cyberint Feed
[2024-01-03T11:46:22] - [MainThread] - [DEBUG] - base_content.py:286 - Loading content item from path: /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml as <class 'demisto_sdk.commands.content_graph.objects.integration.Integration'>
[2024-01-03T11:46:22] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
[2024-01-03T11:46:22] - [MainThread] - [DEBUG] - content_item.py:232 - preparing /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2024-01-03T11:46:22] - [MainThread] - [DEBUG] - integration_script_unifier.py:76 - Unifying /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint/FeedCyberint.yml
[2024-01-03T11:46:22] - [MainThread] - [DEBUG] - cmd.py:978 - Popen(['git', 'remote', 'get-url', '--all', 'origin'], cwd=/home/talg/XSOAR/content-cyberint, stdin=None, shell=False, universal_newlines=False)
[2024-01-03T11:46:22] - [MainThread] - [WARNING] - integration_script_unifier.py:207 - Failed getting image data for '/home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint'.
[2024-01-03T11:46:22] - [MainThread] - [INFO] - integration_script_unifier.py:650 - Did not find README in /home/talg/XSOAR/content-cyberint/Integrations/FeedCyberint, not adding integration doc link
[2024-01-03T11:46:22] - [MainThread] - [DEBUG] - integration_script_unifier.py:132 - Created unified yml: FeedCyberint.yml
[2024-01-03T11:46:22] - [MainThread] - [DEBUG] - integration_script.py:76 - The docker_native_image_config.json file could not be found.
[2024-01-03T11:46:22] - [MainThread] - [DEBUG] - content_item.py:306 - Normalized file name from FeedCyberint.yml to integration-FeedCyberint.yml
