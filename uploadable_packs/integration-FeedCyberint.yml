commonfields:
  id: Cyberint Feed
  version: -1
fromversion: 5.5.0
name: Cyberint Feed
display: Cyberint Feed (Partner Contribution)
category: Data Enrichment & Threat Intelligence
description: Use the Cyberint Feed integration to get indicators from the feed.
configuration:
- display: The Cyberint IOC feed endpoint URL
  name: url
  defaultvalue: https://qmasters-integration.cyberint.io/ioc/api/v1/feed/daily/
  type: 0
  required: true
- display: API Key (Leave empty. Fill in the API Key in the password field.)
  displaypassword: API access token
  name: access_token
  hiddenusername: true
  type: 9
  required: true
- display: Fetch indicators
  name: feed
  defaultvalue: 'true'
  type: 8
  required: false
- display: Indicator Reputation
  name: feedReputation
  defaultvalue: Good
  type: 18
  options:
  - None
  - Good
  - Suspicious
  - Bad
  additionalinfo: Indicators from this integration instance will be marked with this reputation
  required: false
- display: Source Reliability
  name: feedReliability
  defaultvalue: F - Reliability cannot be judged
  type: 15
  required: true
  options:
  - A - Completely reliable
  - B - Usually reliable
  - C - Fairly reliable
  - D - Not usually reliable
  - E - Unreliable
  - F - Reliability cannot be judged
  additionalinfo: Reliability of the source providing the intelligence data
- additionalinfo: The Traffic Light Protocol (TLP) designation to apply to indicators fetched from the feed
  display: Traffic Light Protocol Color
  name: tlp_color
  options:
  - RED
  - AMBER
  - GREEN
  - WHITE
  type: 15
  required: false
- additionalinfo: Which indicator types to fetch
  defaultvalue: All
  display: Indicator Type
  name: indicator_type
  options:
  - All
  - IP
  - Domain
  - URL
  - File
  required: true
  type: 16
- display: Feed Name
  name: feed_name
  defaultvalue: All
  options:
  - All
  - malware_payload
  - cnc_server
  - infected_machine
  - phishing_website
  - payload_delivery
  - cc_skimming
  - botnet
  - anonymization
  required: true
  type: 16
- additionalinfo: Confidence about the indicator details. The value of confidence to fetch indicators from. The value between 0-100.
  display: Confidence
  name: confidence_from
  defaultvalue: '0'
  type: 0
  required: false
- additionalinfo: Severity about the indicator details. The value of severity to fetch indicators from. The value between 0-100.
  display: Severity
  name: severity_from
  defaultvalue: '0'
  type: 0
  required: false
- display: ''
  name: feedExpirationPolicy
  defaultvalue: suddenDeath
  type: 17
  options:
  - never
  - interval
  - indicatorType
  - suddenDeath
  required: false
- display: ''
  name: feedExpirationInterval
  defaultvalue: '20160'
  type: 1
  required: false
- display: Feed Fetch Interval
  name: feedFetchInterval
  defaultvalue: '240'
  type: 19
  required: false
- additionalinfo: Supports CSV values.
  display: Tags
  name: feedTags
  type: 0
  required: false
- display: Bypass exclusion list
  name: feedBypassExclusionList
  defaultvalue: 'true'
  type: 8
  additionalinfo: When selected, the exclusion list is ignored for indicators from this feed. This means that if an indicator from this feed is on the exclusion list, the indicator might still be added to the system.
  required: false
- display: Trust any certificate (not secure)
  name: insecure
  type: 8
  required: false
- display: Use system proxy settings
  name: proxy
  type: 8
  required: false
script:
  script: >
    register_module_line('Cyberint Feed', 'start', __line__())

    ### pack version: 1.1.3

    from typing import Dict, List



    import urllib3



    urllib3.disable_warnings()


    DATE_FORMAT = "%Y-%m-%d"



    class Client(BaseClient):
        """
        Client to use in the Cyberint Feed integration.
        """

        def __init__(
            self,
            base_url: str,
            access_token: str,
            verify: bool = False,
            proxy: bool = False,
        ):
            self._cookies = {"access_token": access_token}
            self.headers = {"x-integration-type": "XSOAR"}
            self.headers = {"x-integration-instance-name": f"{demisto.integrationInstance()}"}
            super().__init__(base_url, verify=verify, proxy=proxy)

        def build_iterator(self, date_time: str = None) -> List:
            """
            Retrieves all entries from the feed.

            Returns:
                A list of objects, containing the indicators.
            """
            response = self._http_request(
                method="GET",
                url_suffix=date_time or get_today_time(),
                cookies=self._cookies,
                resp_type="text",
                timeout=120,
            )

            result = []
            feeds = response.strip().split("\n")
            ioc_feeds = [json.loads(feed) for feed in feeds]

            for indicator in ioc_feeds:
                indicator_value = indicator["ioc_value"]
                if indicator_type := auto_detect_indicator_type(indicator_value):
                    result.append(
                        {
                            "value": indicator_value,
                            "type": indicator_type,
                            "FeedURL": self._base_url,
                            "rawJSON": indicator,
                        }
                    )

            return result


    def test_module(client: Client) -> str:
        """
        Builds the iterator to check that the feed is accessible.

        Args:
            client: Client object.

        Returns:
            Outputs.
        """
        client.build_iterator()
        return "ok"


    def fetch_indicators(
        client: Client,
        tlp_color: str,
        feed_names: list[str],
        indicator_types: list[str],
        confidence_from: int,
        severity_from: int,
        date_time: str = None,
        feed_tags: List = [],
        limit: int = -1,
    ) -> List[Dict]:
        """
        Retrieves indicators from the feed.

        Args:
            client (Client): Client object with request
            feed_tags (list): tags to assign fetched indicators
            limit (int): limit the results

        Returns:
            Indicators.
        """
        iterator = client.build_iterator(date_time)
        indicators = []

        for item in iterator:
            ioc_value = item.get("value")
            ioc_type = item.get("type")
            raw_data = item.get("rawJSON")
            if (
                ("All" in indicator_types or ioc_type in indicator_types)
                and ("All" in feed_names or raw_data.get("detected_activity") in feed_names)
                and (raw_data.get("confidence") >= confidence_from)
                and (raw_data.get("severity_score") >= severity_from)
            ):
                indicator_obj = {
                    "value": ioc_value,
                    "type": ioc_type,
                    "service": "Cyberint",
                    "rawJSON": raw_data,
                    "fields": {
                        "reportedby": "Cyberint",
                        "Description": raw_data.get("description"),
                        "FirstSeenBySource": raw_data.get("observation_date"),
                    },
                }

                if feed_tags:
                    indicator_obj["fields"]["tags"] = feed_tags

                if tlp_color:
                    indicator_obj["fields"]["trafficlightprotocol"] = tlp_color

                indicators.append(indicator_obj)

            if limit > 0 and len(indicators) >= limit:
                break

        return indicators


    def get_indicators_command(client: Client, params: Dict[str, str], args: Dict[str, str]) -> CommandResults:
        """
        Wrapper for retrieving indicators from the feed to the war-room.

        Args:
            client: Cyberint API Client.
            params: Integration parameters.
            args: Command arguments.

        Returns:
            Outputs.
        """

        limit = arg_to_number(args.get("limit")) or 10
        tlp_color = params.get("tlp_color", "")
        severity_from = arg_to_number(params.get("severity_from")) or 0
        confidence_from = arg_to_number(params.get("confidence_from")) or 0
        feed_tags = argToList(params.get("feedTags"))
        feed_names = argToList(params.get("feed_name"))
        indicator_types = argToList(params.get("indicator_type"))

        indicators = fetch_indicators(
            client=client,
            tlp_color=tlp_color,
            feed_tags=feed_tags,
            limit=limit,
            feed_names=feed_names,
            indicator_types=indicator_types,
            severity_from=severity_from,
            confidence_from=confidence_from,
        )

        human_readable = tableToMarkdown(
            "Indicators from Cyberint Feed:",
            indicators,
            headers=["value", "type"],
            headerTransform=string_to_table_header,
            removeNull=True,
        )

        return CommandResults(
            readable_output=human_readable,
            outputs_prefix="Cyberint",
            outputs_key_field="value",
            raw_response=indicators,
            outputs=indicators,
        )


    def fetch_indicators_command(client: Client, params: Dict[str, str]) -> List[Dict]:
        """
        Wrapper for fetching indicators from the feed to the Indicators tab.

        Args:
            client: Cyberint API Client.
            params: Integration parameters.

        Returns:
            Indicators.
        """
        tlp_color = params.get("tlp_color", "")
        feed_tags = argToList(params.get("feedTags"))
        severity_from = arg_to_number(params.get("severity_from")) or 0
        confidence_from = arg_to_number(params.get("confidence_from")) or 0
        feed_names = argToList(params.get("feed_name"))
        indicator_types = argToList(params.get("indicator_type"))
        fetch_interval = arg_to_number(params.get("feedFetchInterval")) or 240

        indicators = []

        if is_x_minutes_ago_yesterday(fetch_interval):
            indicators = fetch_indicators(
                client=client,
                date_time=get_yesterday_time(),
                tlp_color=tlp_color,
                feed_tags=feed_tags,
                feed_names=feed_names,
                indicator_types=indicator_types,
                severity_from=severity_from,
                confidence_from=confidence_from,
            )

        indicators += fetch_indicators(
            client=client,
            tlp_color=tlp_color,
            feed_tags=feed_tags,
            feed_names=feed_names,
            indicator_types=indicator_types,
            severity_from=severity_from,
            confidence_from=confidence_from,
        )
        return indicators


    def get_today_time() -> str:
        """Get current date time.

        Returns:
            str: Today date string.
        """
        return datetime.now().strftime(DATE_FORMAT)


    def get_yesterday_time() -> str:
        """Get yesterday date time.

        Returns:
            str: Yesterday date string.
        """
        current_time = datetime.now()
        yesterday = current_time - timedelta(days=1)
        return yesterday.strftime(DATE_FORMAT)


    def is_x_minutes_ago_yesterday(minutes: int) -> bool:
        """Check if x minutes ago is yesterday.

        Args:
            minutes (int): The amount of minutes to reduce from today.

        Returns:
            bool: True if x minutes ago is yesterday, else False.
        """
        current_time = datetime.now()
        x_minutes_ago = current_time - timedelta(minutes=minutes)
        yesterday = current_time - timedelta(days=1)
        return x_minutes_ago.date() == yesterday.date()


    def main():
        """
        PARSE AND VALIDATE INTEGRATION PARAMS
        """
        params = demisto.params()
        args = demisto.args()

        base_url = params.get("url")
        access_token = params.get("access_token").get("password")
        insecure = not params.get("insecure", False)
        proxy = params.get("proxy", False)

        command = demisto.command()
        demisto.info(f"Command being called is {command}")

        try:
            client = Client(
                base_url=base_url,
                access_token=access_token,
                verify=insecure,
                proxy=proxy,
            )

            if command == "test-module":
                return_results(test_module(client))

            elif command == "cyberint-get-indicators":
                return_results(get_indicators_command(client, params, args))

            elif command == "fetch-indicators":
                indicators = fetch_indicators_command(client, params)
                for iter_ in batch(indicators, batch_size=2000):
                    demisto.createIndicators(iter_)

            else:
                raise NotImplementedError(f"Command {command} is not implemented.")

        except Exception as e:
            return_error(f"Failed to execute {command} command.\nError:\n{str(e)}")


    if __name__ in ["__main__", "builtin", "builtins"]:
        main()

    register_module_line('Cyberint Feed', 'end', __line__())
  type: python
  commands:
  - name: cyberint-get-indicators
    arguments:
    - name: limit
      description: The maximum number of results to return. The default value is 10.
      defaultValue: '10'
    outputs:
    - contextPath: Cyberint.value
      description: The indicator value.
      type: String
    - contextPath: Cyberint.type
      description: The indicator type.
      type: String
    - contextPath: Cyberint.Tags
      description: Tags that are associated with the indicator.
      type: String
    - contextPath: Cyberint.description
      description: The feed description.
      type: String
    - contextPath: Cyberint.detected_activity
      description: The feed detected activity.
      type: String
    - contextPath: Cyberint.observation_date
      description: The feed observation date.
      type: String
    - contextPath: Cyberint.severity_score
      description: The feed severity score.
      type: String
    - contextPath: Cyberint.confidence
      description: The feed confidence.
      type: String
    description: Gets indicators from the feed.
  dockerimage: demisto/python3:3.10.13.83255
  feed: true
  subtype: python3
detaileddescription: "### Partner Contributed Integration\n#### Integration Author: Cyberint\nSupport and maintenance for this integration are provided by the author. Please use the following contact details:\n- **Email**: [support@cyberint.com](mailto:support@cyberint.com)\n- **URL**: [https://cyberint.com](https://cyberint.com)\n***\n[View Integration Documentation](https://xsoar.pan.dev/docs/reference/integrations/cyberint-feed)"
